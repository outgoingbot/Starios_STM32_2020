
Starios_2020_ALPHA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6b8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001408  0800e7c8  0800e7c8  0001e7c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fbd0  0800fbd0  00020368  2**0
                  CONTENTS
  4 .ARM          00000000  0800fbd0  0800fbd0  00020368  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fbd0  0800fbd0  00020368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fbd0  0800fbd0  0001fbd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fbd4  0800fbd4  0001fbd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  0800fbd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fb8  20000368  0800ff40  00020368  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002320  0800ff40  00022320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e7e0  00000000  00000000  00020391  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e8b  00000000  00000000  0003eb71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017e0  00000000  00000000  00042a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001628  00000000  00000000  000441e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001960e  00000000  00000000  00045808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014cd2  00000000  00000000  0005ee16  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007f2e8  00000000  00000000  00073ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f2dd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007144  00000000  00000000  000f2e4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000368 	.word	0x20000368
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e7b0 	.word	0x0800e7b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000036c 	.word	0x2000036c
 800014c:	0800e7b0 	.word	0x0800e7b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_Init+0x28>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <HAL_Init+0x28>)
 8000ad2:	f043 0310 	orr.w	r3, r3, #16
 8000ad6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f000 fc5b 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f000 f808 	bl	8000af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae4:	f009 fde2 	bl	800a6ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40022000 	.word	0x40022000

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_InitTick+0x54>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_InitTick+0x58>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fc73 	bl	80013fe <HAL_SYSTICK_Config>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00e      	b.n	8000b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	d80a      	bhi.n	8000b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f000 fc3b 	bl	80013aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b34:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <HAL_InitTick+0x5c>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e000      	b.n	8000b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000130 	.word	0x20000130
 8000b4c:	20000004 	.word	0x20000004
 8000b50:	20000000 	.word	0x20000000

08000b54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_IncTick+0x1c>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <HAL_IncTick+0x20>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a03      	ldr	r2, [pc, #12]	; (8000b74 <HAL_IncTick+0x20>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	20000004 	.word	0x20000004
 8000b74:	200007e8 	.word	0x200007e8

08000b78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b02      	ldr	r3, [pc, #8]	; (8000b88 <HAL_GetTick+0x10>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	200007e8 	.word	0x200007e8

08000b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b94:	f7ff fff0 	bl	8000b78 <HAL_GetTick>
 8000b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba4:	d005      	beq.n	8000bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_Delay+0x40>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4413      	add	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bb2:	bf00      	nop
 8000bb4:	f7ff ffe0 	bl	8000b78 <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d8f7      	bhi.n	8000bb4 <HAL_Delay+0x28>
  {
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000004 	.word	0x20000004

08000bd0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e0be      	b.n	8000d70 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d109      	bne.n	8000c14 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f009 fd7e 	bl	800a710 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f000 fab7 	bl	8001188 <ADC_ConversionStop_Disable>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c22:	f003 0310 	and.w	r3, r3, #16
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f040 8099 	bne.w	8000d5e <HAL_ADC_Init+0x18e>
 8000c2c:	7dfb      	ldrb	r3, [r7, #23]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f040 8095 	bne.w	8000d5e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c3c:	f023 0302 	bic.w	r3, r3, #2
 8000c40:	f043 0202 	orr.w	r2, r3, #2
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c50:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7b1b      	ldrb	r3, [r3, #12]
 8000c56:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c58:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c68:	d003      	beq.n	8000c72 <HAL_ADC_Init+0xa2>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d102      	bne.n	8000c78 <HAL_ADC_Init+0xa8>
 8000c72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c76:	e000      	b.n	8000c7a <HAL_ADC_Init+0xaa>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	7d1b      	ldrb	r3, [r3, #20]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d119      	bne.n	8000cbc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	7b1b      	ldrb	r3, [r3, #12]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d109      	bne.n	8000ca4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	035a      	lsls	r2, r3, #13
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	e00b      	b.n	8000cbc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca8:	f043 0220 	orr.w	r2, r3, #32
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb4:	f043 0201 	orr.w	r2, r3, #1
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <HAL_ADC_Init+0x1a8>)
 8000cd8:	4013      	ands	r3, r2
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	6812      	ldr	r2, [r2, #0]
 8000cde:	68b9      	ldr	r1, [r7, #8]
 8000ce0:	430b      	orrs	r3, r1
 8000ce2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cec:	d003      	beq.n	8000cf6 <HAL_ADC_Init+0x126>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d104      	bne.n	8000d00 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	051b      	lsls	r3, r3, #20
 8000cfe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d06:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	430a      	orrs	r2, r1
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <HAL_ADC_Init+0x1ac>)
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d10b      	bne.n	8000d3c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2e:	f023 0303 	bic.w	r3, r3, #3
 8000d32:	f043 0201 	orr.w	r2, r3, #1
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d3a:	e018      	b.n	8000d6e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d40:	f023 0312 	bic.w	r3, r3, #18
 8000d44:	f043 0210 	orr.w	r2, r3, #16
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d50:	f043 0201 	orr.w	r2, r3, #1
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d5c:	e007      	b.n	8000d6e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d62:	f043 0210 	orr.w	r2, r3, #16
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	ffe1f7fd 	.word	0xffe1f7fd
 8000d7c:	ff1f0efe 	.word	0xff1f0efe

08000d80 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d101      	bne.n	8000d9a <HAL_ADC_Start+0x1a>
 8000d96:	2302      	movs	r3, #2
 8000d98:	e098      	b.n	8000ecc <HAL_ADC_Start+0x14c>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f000 f99e 	bl	80010e4 <ADC_Enable>
 8000da8:	4603      	mov	r3, r0
 8000daa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f040 8087 	bne.w	8000ec2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dbc:	f023 0301 	bic.w	r3, r3, #1
 8000dc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a41      	ldr	r2, [pc, #260]	; (8000ed4 <HAL_ADC_Start+0x154>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d105      	bne.n	8000dde <HAL_ADC_Start+0x5e>
 8000dd2:	4b41      	ldr	r3, [pc, #260]	; (8000ed8 <HAL_ADC_Start+0x158>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d115      	bne.n	8000e0a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d026      	beq.n	8000e46 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e08:	e01d      	b.n	8000e46 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a2f      	ldr	r2, [pc, #188]	; (8000ed8 <HAL_ADC_Start+0x158>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d004      	beq.n	8000e2a <HAL_ADC_Start+0xaa>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a2b      	ldr	r2, [pc, #172]	; (8000ed4 <HAL_ADC_Start+0x154>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d10d      	bne.n	8000e46 <HAL_ADC_Start+0xc6>
 8000e2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <HAL_ADC_Start+0x158>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d007      	beq.n	8000e46 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e3e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d006      	beq.n	8000e60 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e56:	f023 0206 	bic.w	r2, r3, #6
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e5e:	e002      	b.n	8000e66 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f06f 0202 	mvn.w	r2, #2
 8000e76:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e82:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e86:	d113      	bne.n	8000eb0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e8c:	4a11      	ldr	r2, [pc, #68]	; (8000ed4 <HAL_ADC_Start+0x154>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d105      	bne.n	8000e9e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <HAL_ADC_Start+0x158>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d108      	bne.n	8000eb0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	e00c      	b.n	8000eca <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	689a      	ldr	r2, [r3, #8]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	e003      	b.n	8000eca <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40012800 	.word	0x40012800
 8000ed8:	40012400 	.word	0x40012400

08000edc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d101      	bne.n	8000f14 <HAL_ADC_ConfigChannel+0x20>
 8000f10:	2302      	movs	r3, #2
 8000f12:	e0dc      	b.n	80010ce <HAL_ADC_ConfigChannel+0x1da>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2201      	movs	r2, #1
 8000f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b06      	cmp	r3, #6
 8000f22:	d81c      	bhi.n	8000f5e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	3b05      	subs	r3, #5
 8000f36:	221f      	movs	r2, #31
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	4019      	ands	r1, r3
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3b05      	subs	r3, #5
 8000f50:	fa00 f203 	lsl.w	r2, r0, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	635a      	str	r2, [r3, #52]	; 0x34
 8000f5c:	e03c      	b.n	8000fd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b0c      	cmp	r3, #12
 8000f64:	d81c      	bhi.n	8000fa0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	3b23      	subs	r3, #35	; 0x23
 8000f78:	221f      	movs	r2, #31
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	4019      	ands	r1, r3
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	6818      	ldr	r0, [r3, #0]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	3b23      	subs	r3, #35	; 0x23
 8000f92:	fa00 f203 	lsl.w	r2, r0, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f9e:	e01b      	b.n	8000fd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	3b41      	subs	r3, #65	; 0x41
 8000fb2:	221f      	movs	r2, #31
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	4019      	ands	r1, r3
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	3b41      	subs	r3, #65	; 0x41
 8000fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b09      	cmp	r3, #9
 8000fde:	d91c      	bls.n	800101a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68d9      	ldr	r1, [r3, #12]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	3b1e      	subs	r3, #30
 8000ff2:	2207      	movs	r2, #7
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	4019      	ands	r1, r3
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	6898      	ldr	r0, [r3, #8]
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	3b1e      	subs	r3, #30
 800100c:	fa00 f203 	lsl.w	r2, r0, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	430a      	orrs	r2, r1
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	e019      	b.n	800104e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6919      	ldr	r1, [r3, #16]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	2207      	movs	r2, #7
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	4019      	ands	r1, r3
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	6898      	ldr	r0, [r3, #8]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	fa00 f203 	lsl.w	r2, r0, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	430a      	orrs	r2, r1
 800104c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b10      	cmp	r3, #16
 8001054:	d003      	beq.n	800105e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800105a:	2b11      	cmp	r3, #17
 800105c:	d132      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d125      	bne.n	80010b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d126      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001084:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b10      	cmp	r3, #16
 800108c:	d11a      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <HAL_ADC_ConfigChannel+0x1e8>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001094:	fba2 2303 	umull	r2, r3, r2, r3
 8001098:	0c9a      	lsrs	r2, r3, #18
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010a4:	e002      	b.n	80010ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f9      	bne.n	80010a6 <HAL_ADC_ConfigChannel+0x1b2>
 80010b2:	e007      	b.n	80010c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b8:	f043 0220 	orr.w	r2, r3, #32
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	40012400 	.word	0x40012400
 80010dc:	20000130 	.word	0x20000130
 80010e0:	431bde83 	.word	0x431bde83

080010e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d039      	beq.n	8001176 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f042 0201 	orr.w	r2, r2, #1
 8001110:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001112:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <ADC_Enable+0x9c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <ADC_Enable+0xa0>)
 8001118:	fba2 2303 	umull	r2, r3, r2, r3
 800111c:	0c9b      	lsrs	r3, r3, #18
 800111e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001120:	e002      	b.n	8001128 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	3b01      	subs	r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f9      	bne.n	8001122 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800112e:	f7ff fd23 	bl	8000b78 <HAL_GetTick>
 8001132:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001134:	e018      	b.n	8001168 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001136:	f7ff fd1f 	bl	8000b78 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d911      	bls.n	8001168 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001148:	f043 0210 	orr.w	r2, r3, #16
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001154:	f043 0201 	orr.w	r2, r3, #1
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e007      	b.n	8001178 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b01      	cmp	r3, #1
 8001174:	d1df      	bne.n	8001136 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000130 	.word	0x20000130
 8001184:	431bde83 	.word	0x431bde83

08001188 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d127      	bne.n	80011f2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0201 	bic.w	r2, r2, #1
 80011b0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011b2:	f7ff fce1 	bl	8000b78 <HAL_GetTick>
 80011b6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011b8:	e014      	b.n	80011e4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011ba:	f7ff fcdd 	bl	8000b78 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d90d      	bls.n	80011e4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011cc:	f043 0210 	orr.w	r2, r3, #16
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d8:	f043 0201 	orr.w	r2, r3, #1
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e007      	b.n	80011f4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d0e3      	beq.n	80011ba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db0b      	blt.n	800128a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	4906      	ldr	r1, [pc, #24]	; (8001294 <__NVIC_EnableIRQ+0x34>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	2001      	movs	r0, #1
 8001282:	fa00 f202 	lsl.w	r2, r0, r2
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100

08001298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db0a      	blt.n	80012c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	490c      	ldr	r1, [pc, #48]	; (80012e4 <__NVIC_SetPriority+0x4c>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c0:	e00a      	b.n	80012d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4908      	ldr	r1, [pc, #32]	; (80012e8 <__NVIC_SetPriority+0x50>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	3b04      	subs	r3, #4
 80012d0:	0112      	lsls	r2, r2, #4
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	761a      	strb	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 0307 	rsb	r3, r3, #7
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf28      	it	cs
 800130a:	2304      	movcs	r3, #4
 800130c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3304      	adds	r3, #4
 8001312:	2b06      	cmp	r3, #6
 8001314:	d902      	bls.n	800131c <NVIC_EncodePriority+0x30>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3b03      	subs	r3, #3
 800131a:	e000      	b.n	800131e <NVIC_EncodePriority+0x32>
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43d9      	mvns	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	4313      	orrs	r3, r2
         );
}
 8001346:	4618      	mov	r0, r3
 8001348:	3724      	adds	r7, #36	; 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001360:	d301      	bcc.n	8001366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001362:	2301      	movs	r3, #1
 8001364:	e00f      	b.n	8001386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <SysTick_Config+0x40>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136e:	210f      	movs	r1, #15
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f7ff ff90 	bl	8001298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <SysTick_Config+0x40>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <SysTick_Config+0x40>)
 8001380:	2207      	movs	r2, #7
 8001382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	e000e010 	.word	0xe000e010

08001394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ff2d 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013bc:	f7ff ff42 	bl	8001244 <__NVIC_GetPriorityGrouping>
 80013c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	6978      	ldr	r0, [r7, #20]
 80013c8:	f7ff ff90 	bl	80012ec <NVIC_EncodePriority>
 80013cc:	4602      	mov	r2, r0
 80013ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff5f 	bl	8001298 <__NVIC_SetPriority>
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff35 	bl	8001260 <__NVIC_EnableIRQ>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffa2 	bl	8001350 <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e043      	b.n	80014b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <HAL_DMA_Init+0xa8>)
 8001436:	4413      	add	r3, r2
 8001438:	4a22      	ldr	r2, [pc, #136]	; (80014c4 <HAL_DMA_Init+0xac>)
 800143a:	fba2 2303 	umull	r2, r3, r2, r3
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	009a      	lsls	r2, r3, #2
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a1f      	ldr	r2, [pc, #124]	; (80014c8 <HAL_DMA_Init+0xb0>)
 800144a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2202      	movs	r2, #2
 8001450:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001462:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001466:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001470:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800147c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001488:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	4313      	orrs	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	bffdfff8 	.word	0xbffdfff8
 80014c4:	cccccccd 	.word	0xcccccccd
 80014c8:	40020000 	.word	0x40020000

080014cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d101      	bne.n	80014ec <HAL_DMA_Start_IT+0x20>
 80014e8:	2302      	movs	r3, #2
 80014ea:	e04a      	b.n	8001582 <HAL_DMA_Start_IT+0xb6>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d13a      	bne.n	8001574 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2202      	movs	r2, #2
 8001502:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f000 f938 	bl	8001798 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152c:	2b00      	cmp	r3, #0
 800152e:	d008      	beq.n	8001542 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 020e 	orr.w	r2, r2, #14
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	e00f      	b.n	8001562 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0204 	bic.w	r2, r2, #4
 8001550:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f042 020a 	orr.w	r2, r2, #10
 8001560:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f042 0201 	orr.w	r2, r2, #1
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	e005      	b.n	8001580 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800157c:	2302      	movs	r3, #2
 800157e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001580:	7dfb      	ldrb	r3, [r7, #23]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	2204      	movs	r2, #4
 80015aa:	409a      	lsls	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d04f      	beq.n	8001654 <HAL_DMA_IRQHandler+0xc8>
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d04a      	beq.n	8001654 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0320 	and.w	r3, r3, #32
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d107      	bne.n	80015dc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0204 	bic.w	r2, r2, #4
 80015da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a66      	ldr	r2, [pc, #408]	; (800177c <HAL_DMA_IRQHandler+0x1f0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d029      	beq.n	800163a <HAL_DMA_IRQHandler+0xae>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a65      	ldr	r2, [pc, #404]	; (8001780 <HAL_DMA_IRQHandler+0x1f4>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d022      	beq.n	8001636 <HAL_DMA_IRQHandler+0xaa>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a63      	ldr	r2, [pc, #396]	; (8001784 <HAL_DMA_IRQHandler+0x1f8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d01a      	beq.n	8001630 <HAL_DMA_IRQHandler+0xa4>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a62      	ldr	r2, [pc, #392]	; (8001788 <HAL_DMA_IRQHandler+0x1fc>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d012      	beq.n	800162a <HAL_DMA_IRQHandler+0x9e>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a60      	ldr	r2, [pc, #384]	; (800178c <HAL_DMA_IRQHandler+0x200>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d00a      	beq.n	8001624 <HAL_DMA_IRQHandler+0x98>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a5f      	ldr	r2, [pc, #380]	; (8001790 <HAL_DMA_IRQHandler+0x204>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d102      	bne.n	800161e <HAL_DMA_IRQHandler+0x92>
 8001618:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800161c:	e00e      	b.n	800163c <HAL_DMA_IRQHandler+0xb0>
 800161e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001622:	e00b      	b.n	800163c <HAL_DMA_IRQHandler+0xb0>
 8001624:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001628:	e008      	b.n	800163c <HAL_DMA_IRQHandler+0xb0>
 800162a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800162e:	e005      	b.n	800163c <HAL_DMA_IRQHandler+0xb0>
 8001630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001634:	e002      	b.n	800163c <HAL_DMA_IRQHandler+0xb0>
 8001636:	2340      	movs	r3, #64	; 0x40
 8001638:	e000      	b.n	800163c <HAL_DMA_IRQHandler+0xb0>
 800163a:	2304      	movs	r3, #4
 800163c:	4a55      	ldr	r2, [pc, #340]	; (8001794 <HAL_DMA_IRQHandler+0x208>)
 800163e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 8094 	beq.w	8001772 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001652:	e08e      	b.n	8001772 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	2202      	movs	r2, #2
 800165a:	409a      	lsls	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d056      	beq.n	8001712 <HAL_DMA_IRQHandler+0x186>
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d051      	beq.n	8001712 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0320 	and.w	r3, r3, #32
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10b      	bne.n	8001694 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 020a 	bic.w	r2, r2, #10
 800168a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a38      	ldr	r2, [pc, #224]	; (800177c <HAL_DMA_IRQHandler+0x1f0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d029      	beq.n	80016f2 <HAL_DMA_IRQHandler+0x166>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a37      	ldr	r2, [pc, #220]	; (8001780 <HAL_DMA_IRQHandler+0x1f4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d022      	beq.n	80016ee <HAL_DMA_IRQHandler+0x162>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a35      	ldr	r2, [pc, #212]	; (8001784 <HAL_DMA_IRQHandler+0x1f8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d01a      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x15c>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a34      	ldr	r2, [pc, #208]	; (8001788 <HAL_DMA_IRQHandler+0x1fc>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d012      	beq.n	80016e2 <HAL_DMA_IRQHandler+0x156>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a32      	ldr	r2, [pc, #200]	; (800178c <HAL_DMA_IRQHandler+0x200>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d00a      	beq.n	80016dc <HAL_DMA_IRQHandler+0x150>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a31      	ldr	r2, [pc, #196]	; (8001790 <HAL_DMA_IRQHandler+0x204>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d102      	bne.n	80016d6 <HAL_DMA_IRQHandler+0x14a>
 80016d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016d4:	e00e      	b.n	80016f4 <HAL_DMA_IRQHandler+0x168>
 80016d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016da:	e00b      	b.n	80016f4 <HAL_DMA_IRQHandler+0x168>
 80016dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016e0:	e008      	b.n	80016f4 <HAL_DMA_IRQHandler+0x168>
 80016e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e6:	e005      	b.n	80016f4 <HAL_DMA_IRQHandler+0x168>
 80016e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ec:	e002      	b.n	80016f4 <HAL_DMA_IRQHandler+0x168>
 80016ee:	2320      	movs	r3, #32
 80016f0:	e000      	b.n	80016f4 <HAL_DMA_IRQHandler+0x168>
 80016f2:	2302      	movs	r3, #2
 80016f4:	4a27      	ldr	r2, [pc, #156]	; (8001794 <HAL_DMA_IRQHandler+0x208>)
 80016f6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	2b00      	cmp	r3, #0
 8001706:	d034      	beq.n	8001772 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001710:	e02f      	b.n	8001772 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	2208      	movs	r2, #8
 8001718:	409a      	lsls	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4013      	ands	r3, r2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d028      	beq.n	8001774 <HAL_DMA_IRQHandler+0x1e8>
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d023      	beq.n	8001774 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 020e 	bic.w	r2, r2, #14
 800173a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001744:	2101      	movs	r1, #1
 8001746:	fa01 f202 	lsl.w	r2, r1, r2
 800174a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	2b00      	cmp	r3, #0
 8001768:	d004      	beq.n	8001774 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	4798      	blx	r3
    }
  }
  return;
 8001772:	bf00      	nop
 8001774:	bf00      	nop
}
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40020008 	.word	0x40020008
 8001780:	4002001c 	.word	0x4002001c
 8001784:	40020030 	.word	0x40020030
 8001788:	40020044 	.word	0x40020044
 800178c:	40020058 	.word	0x40020058
 8001790:	4002006c 	.word	0x4002006c
 8001794:	40020000 	.word	0x40020000

08001798 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
 80017a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ae:	2101      	movs	r1, #1
 80017b0:	fa01 f202 	lsl.w	r2, r1, r2
 80017b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b10      	cmp	r3, #16
 80017c4:	d108      	bne.n	80017d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017d6:	e007      	b.n	80017e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68ba      	ldr	r2, [r7, #8]
 80017de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	60da      	str	r2, [r3, #12]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
	...

080017f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b08b      	sub	sp, #44	; 0x2c
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001806:	e127      	b.n	8001a58 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001808:	2201      	movs	r2, #1
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	429a      	cmp	r2, r3
 8001822:	f040 8116 	bne.w	8001a52 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b12      	cmp	r3, #18
 800182c:	d034      	beq.n	8001898 <HAL_GPIO_Init+0xa4>
 800182e:	2b12      	cmp	r3, #18
 8001830:	d80d      	bhi.n	800184e <HAL_GPIO_Init+0x5a>
 8001832:	2b02      	cmp	r3, #2
 8001834:	d02b      	beq.n	800188e <HAL_GPIO_Init+0x9a>
 8001836:	2b02      	cmp	r3, #2
 8001838:	d804      	bhi.n	8001844 <HAL_GPIO_Init+0x50>
 800183a:	2b00      	cmp	r3, #0
 800183c:	d031      	beq.n	80018a2 <HAL_GPIO_Init+0xae>
 800183e:	2b01      	cmp	r3, #1
 8001840:	d01c      	beq.n	800187c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001842:	e048      	b.n	80018d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001844:	2b03      	cmp	r3, #3
 8001846:	d043      	beq.n	80018d0 <HAL_GPIO_Init+0xdc>
 8001848:	2b11      	cmp	r3, #17
 800184a:	d01b      	beq.n	8001884 <HAL_GPIO_Init+0x90>
          break;
 800184c:	e043      	b.n	80018d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800184e:	4a89      	ldr	r2, [pc, #548]	; (8001a74 <HAL_GPIO_Init+0x280>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d026      	beq.n	80018a2 <HAL_GPIO_Init+0xae>
 8001854:	4a87      	ldr	r2, [pc, #540]	; (8001a74 <HAL_GPIO_Init+0x280>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d806      	bhi.n	8001868 <HAL_GPIO_Init+0x74>
 800185a:	4a87      	ldr	r2, [pc, #540]	; (8001a78 <HAL_GPIO_Init+0x284>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d020      	beq.n	80018a2 <HAL_GPIO_Init+0xae>
 8001860:	4a86      	ldr	r2, [pc, #536]	; (8001a7c <HAL_GPIO_Init+0x288>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d01d      	beq.n	80018a2 <HAL_GPIO_Init+0xae>
          break;
 8001866:	e036      	b.n	80018d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001868:	4a85      	ldr	r2, [pc, #532]	; (8001a80 <HAL_GPIO_Init+0x28c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d019      	beq.n	80018a2 <HAL_GPIO_Init+0xae>
 800186e:	4a85      	ldr	r2, [pc, #532]	; (8001a84 <HAL_GPIO_Init+0x290>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d016      	beq.n	80018a2 <HAL_GPIO_Init+0xae>
 8001874:	4a84      	ldr	r2, [pc, #528]	; (8001a88 <HAL_GPIO_Init+0x294>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d013      	beq.n	80018a2 <HAL_GPIO_Init+0xae>
          break;
 800187a:	e02c      	b.n	80018d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	623b      	str	r3, [r7, #32]
          break;
 8001882:	e028      	b.n	80018d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	3304      	adds	r3, #4
 800188a:	623b      	str	r3, [r7, #32]
          break;
 800188c:	e023      	b.n	80018d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	3308      	adds	r3, #8
 8001894:	623b      	str	r3, [r7, #32]
          break;
 8001896:	e01e      	b.n	80018d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	330c      	adds	r3, #12
 800189e:	623b      	str	r3, [r7, #32]
          break;
 80018a0:	e019      	b.n	80018d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018aa:	2304      	movs	r3, #4
 80018ac:	623b      	str	r3, [r7, #32]
          break;
 80018ae:	e012      	b.n	80018d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d105      	bne.n	80018c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b8:	2308      	movs	r3, #8
 80018ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	611a      	str	r2, [r3, #16]
          break;
 80018c2:	e008      	b.n	80018d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c4:	2308      	movs	r3, #8
 80018c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	615a      	str	r2, [r3, #20]
          break;
 80018ce:	e002      	b.n	80018d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018d0:	2300      	movs	r3, #0
 80018d2:	623b      	str	r3, [r7, #32]
          break;
 80018d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	2bff      	cmp	r3, #255	; 0xff
 80018da:	d801      	bhi.n	80018e0 <HAL_GPIO_Init+0xec>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	e001      	b.n	80018e4 <HAL_GPIO_Init+0xf0>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3304      	adds	r3, #4
 80018e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	2bff      	cmp	r3, #255	; 0xff
 80018ea:	d802      	bhi.n	80018f2 <HAL_GPIO_Init+0xfe>
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	e002      	b.n	80018f8 <HAL_GPIO_Init+0x104>
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	3b08      	subs	r3, #8
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	210f      	movs	r1, #15
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	401a      	ands	r2, r3
 800190a:	6a39      	ldr	r1, [r7, #32]
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	431a      	orrs	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 8096 	beq.w	8001a52 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001926:	4b59      	ldr	r3, [pc, #356]	; (8001a8c <HAL_GPIO_Init+0x298>)
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	4a58      	ldr	r2, [pc, #352]	; (8001a8c <HAL_GPIO_Init+0x298>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6193      	str	r3, [r2, #24]
 8001932:	4b56      	ldr	r3, [pc, #344]	; (8001a8c <HAL_GPIO_Init+0x298>)
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800193e:	4a54      	ldr	r2, [pc, #336]	; (8001a90 <HAL_GPIO_Init+0x29c>)
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	3302      	adds	r3, #2
 8001946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	220f      	movs	r2, #15
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	4013      	ands	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a4b      	ldr	r2, [pc, #300]	; (8001a94 <HAL_GPIO_Init+0x2a0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d013      	beq.n	8001992 <HAL_GPIO_Init+0x19e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a4a      	ldr	r2, [pc, #296]	; (8001a98 <HAL_GPIO_Init+0x2a4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d00d      	beq.n	800198e <HAL_GPIO_Init+0x19a>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a49      	ldr	r2, [pc, #292]	; (8001a9c <HAL_GPIO_Init+0x2a8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d007      	beq.n	800198a <HAL_GPIO_Init+0x196>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a48      	ldr	r2, [pc, #288]	; (8001aa0 <HAL_GPIO_Init+0x2ac>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d101      	bne.n	8001986 <HAL_GPIO_Init+0x192>
 8001982:	2303      	movs	r3, #3
 8001984:	e006      	b.n	8001994 <HAL_GPIO_Init+0x1a0>
 8001986:	2304      	movs	r3, #4
 8001988:	e004      	b.n	8001994 <HAL_GPIO_Init+0x1a0>
 800198a:	2302      	movs	r3, #2
 800198c:	e002      	b.n	8001994 <HAL_GPIO_Init+0x1a0>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_GPIO_Init+0x1a0>
 8001992:	2300      	movs	r3, #0
 8001994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001996:	f002 0203 	and.w	r2, r2, #3
 800199a:	0092      	lsls	r2, r2, #2
 800199c:	4093      	lsls	r3, r2
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019a4:	493a      	ldr	r1, [pc, #232]	; (8001a90 <HAL_GPIO_Init+0x29c>)
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	089b      	lsrs	r3, r3, #2
 80019aa:	3302      	adds	r3, #2
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d006      	beq.n	80019cc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019be:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <HAL_GPIO_Init+0x2b0>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4938      	ldr	r1, [pc, #224]	; (8001aa4 <HAL_GPIO_Init+0x2b0>)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]
 80019ca:	e006      	b.n	80019da <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019cc:	4b35      	ldr	r3, [pc, #212]	; (8001aa4 <HAL_GPIO_Init+0x2b0>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	4933      	ldr	r1, [pc, #204]	; (8001aa4 <HAL_GPIO_Init+0x2b0>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d006      	beq.n	80019f4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019e6:	4b2f      	ldr	r3, [pc, #188]	; (8001aa4 <HAL_GPIO_Init+0x2b0>)
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	492e      	ldr	r1, [pc, #184]	; (8001aa4 <HAL_GPIO_Init+0x2b0>)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]
 80019f2:	e006      	b.n	8001a02 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019f4:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <HAL_GPIO_Init+0x2b0>)
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	4929      	ldr	r1, [pc, #164]	; (8001aa4 <HAL_GPIO_Init+0x2b0>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d006      	beq.n	8001a1c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a0e:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <HAL_GPIO_Init+0x2b0>)
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	4924      	ldr	r1, [pc, #144]	; (8001aa4 <HAL_GPIO_Init+0x2b0>)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
 8001a1a:	e006      	b.n	8001a2a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a1c:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <HAL_GPIO_Init+0x2b0>)
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	491f      	ldr	r1, [pc, #124]	; (8001aa4 <HAL_GPIO_Init+0x2b0>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d006      	beq.n	8001a44 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a36:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_GPIO_Init+0x2b0>)
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	491a      	ldr	r1, [pc, #104]	; (8001aa4 <HAL_GPIO_Init+0x2b0>)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	60cb      	str	r3, [r1, #12]
 8001a42:	e006      	b.n	8001a52 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <HAL_GPIO_Init+0x2b0>)
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	4915      	ldr	r1, [pc, #84]	; (8001aa4 <HAL_GPIO_Init+0x2b0>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	3301      	adds	r3, #1
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f47f aed0 	bne.w	8001808 <HAL_GPIO_Init+0x14>
  }
}
 8001a68:	bf00      	nop
 8001a6a:	372c      	adds	r7, #44	; 0x2c
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	10210000 	.word	0x10210000
 8001a78:	10110000 	.word	0x10110000
 8001a7c:	10120000 	.word	0x10120000
 8001a80:	10310000 	.word	0x10310000
 8001a84:	10320000 	.word	0x10320000
 8001a88:	10220000 	.word	0x10220000
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010000 	.word	0x40010000
 8001a94:	40010800 	.word	0x40010800
 8001a98:	40010c00 	.word	0x40010c00
 8001a9c:	40011000 	.word	0x40011000
 8001aa0:	40011400 	.word	0x40011400
 8001aa4:	40010400 	.word	0x40010400

08001aa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	887b      	ldrh	r3, [r7, #2]
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
 8001ac4:	e001      	b.n	8001aca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	807b      	strh	r3, [r7, #2]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae6:	787b      	ldrb	r3, [r7, #1]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aec:	887a      	ldrh	r2, [r7, #2]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001af2:	e003      	b.n	8001afc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001af4:	887b      	ldrh	r3, [r7, #2]
 8001af6:	041a      	lsls	r2, r3, #16
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	611a      	str	r2, [r3, #16]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e10f      	b.n	8001d3a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d106      	bne.n	8001b34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f008 fe54 	bl	800a7dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2224      	movs	r2, #36	; 0x24
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0201 	bic.w	r2, r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b4c:	f001 ffd8 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 8001b50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4a7b      	ldr	r2, [pc, #492]	; (8001d44 <HAL_I2C_Init+0x23c>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d807      	bhi.n	8001b6c <HAL_I2C_Init+0x64>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4a7a      	ldr	r2, [pc, #488]	; (8001d48 <HAL_I2C_Init+0x240>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	bf94      	ite	ls
 8001b64:	2301      	movls	r3, #1
 8001b66:	2300      	movhi	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	e006      	b.n	8001b7a <HAL_I2C_Init+0x72>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4a77      	ldr	r2, [pc, #476]	; (8001d4c <HAL_I2C_Init+0x244>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	bf94      	ite	ls
 8001b74:	2301      	movls	r3, #1
 8001b76:	2300      	movhi	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e0db      	b.n	8001d3a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4a72      	ldr	r2, [pc, #456]	; (8001d50 <HAL_I2C_Init+0x248>)
 8001b86:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8a:	0c9b      	lsrs	r3, r3, #18
 8001b8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	4a64      	ldr	r2, [pc, #400]	; (8001d44 <HAL_I2C_Init+0x23c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d802      	bhi.n	8001bbc <HAL_I2C_Init+0xb4>
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	e009      	b.n	8001bd0 <HAL_I2C_Init+0xc8>
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	4a63      	ldr	r2, [pc, #396]	; (8001d54 <HAL_I2C_Init+0x24c>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	099b      	lsrs	r3, r3, #6
 8001bce:	3301      	adds	r3, #1
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001be2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	4956      	ldr	r1, [pc, #344]	; (8001d44 <HAL_I2C_Init+0x23c>)
 8001bec:	428b      	cmp	r3, r1
 8001bee:	d80d      	bhi.n	8001c0c <HAL_I2C_Init+0x104>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1e59      	subs	r1, r3, #1
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bfe:	3301      	adds	r3, #1
 8001c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	bf38      	it	cc
 8001c08:	2304      	movcc	r3, #4
 8001c0a:	e04f      	b.n	8001cac <HAL_I2C_Init+0x1a4>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d111      	bne.n	8001c38 <HAL_I2C_Init+0x130>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1e58      	subs	r0, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6859      	ldr	r1, [r3, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	440b      	add	r3, r1
 8001c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c26:	3301      	adds	r3, #1
 8001c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	bf0c      	ite	eq
 8001c30:	2301      	moveq	r3, #1
 8001c32:	2300      	movne	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	e012      	b.n	8001c5e <HAL_I2C_Init+0x156>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1e58      	subs	r0, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6859      	ldr	r1, [r3, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	0099      	lsls	r1, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c4e:	3301      	adds	r3, #1
 8001c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	bf0c      	ite	eq
 8001c58:	2301      	moveq	r3, #1
 8001c5a:	2300      	movne	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_I2C_Init+0x15e>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e022      	b.n	8001cac <HAL_I2C_Init+0x1a4>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10e      	bne.n	8001c8c <HAL_I2C_Init+0x184>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1e58      	subs	r0, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6859      	ldr	r1, [r3, #4]
 8001c76:	460b      	mov	r3, r1
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	440b      	add	r3, r1
 8001c7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c80:	3301      	adds	r3, #1
 8001c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c8a:	e00f      	b.n	8001cac <HAL_I2C_Init+0x1a4>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	1e58      	subs	r0, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	0099      	lsls	r1, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	6809      	ldr	r1, [r1, #0]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69da      	ldr	r2, [r3, #28]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6911      	ldr	r1, [r2, #16]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	68d2      	ldr	r2, [r2, #12]
 8001ce6:	4311      	orrs	r1, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	430b      	orrs	r3, r1
 8001cee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695a      	ldr	r2, [r3, #20]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2220      	movs	r2, #32
 8001d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	000186a0 	.word	0x000186a0
 8001d48:	001e847f 	.word	0x001e847f
 8001d4c:	003d08ff 	.word	0x003d08ff
 8001d50:	431bde83 	.word	0x431bde83
 8001d54:	10624dd3 	.word	0x10624dd3

08001d58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	461a      	mov	r2, r3
 8001d64:	460b      	mov	r3, r1
 8001d66:	817b      	strh	r3, [r7, #10]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d6c:	f7fe ff04 	bl	8000b78 <HAL_GetTick>
 8001d70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b20      	cmp	r3, #32
 8001d7c:	f040 80e0 	bne.w	8001f40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	2319      	movs	r3, #25
 8001d86:	2201      	movs	r2, #1
 8001d88:	4970      	ldr	r1, [pc, #448]	; (8001f4c <HAL_I2C_Master_Transmit+0x1f4>)
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 fa7a 	bl	8002284 <I2C_WaitOnFlagUntilTimeout>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d96:	2302      	movs	r3, #2
 8001d98:	e0d3      	b.n	8001f42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_I2C_Master_Transmit+0x50>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e0cc      	b.n	8001f42 <HAL_I2C_Master_Transmit+0x1ea>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d007      	beq.n	8001dce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 0201 	orr.w	r2, r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ddc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2221      	movs	r2, #33	; 0x21
 8001de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2210      	movs	r2, #16
 8001dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	893a      	ldrh	r2, [r7, #8]
 8001dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4a50      	ldr	r2, [pc, #320]	; (8001f50 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e10:	8979      	ldrh	r1, [r7, #10]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	6a3a      	ldr	r2, [r7, #32]
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 f9be 	bl	8002198 <I2C_MasterRequestWrite>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e08d      	b.n	8001f42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e3c:	e066      	b.n	8001f0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	6a39      	ldr	r1, [r7, #32]
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 faf4 	bl	8002430 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00d      	beq.n	8001e6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d107      	bne.n	8001e66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e06b      	b.n	8001f42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6e:	781a      	ldrb	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d11b      	bne.n	8001ee0 <HAL_I2C_Master_Transmit+0x188>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d017      	beq.n	8001ee0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	781a      	ldrb	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	6a39      	ldr	r1, [r7, #32]
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 fae4 	bl	80024b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00d      	beq.n	8001f0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d107      	bne.n	8001f08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e01a      	b.n	8001f42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d194      	bne.n	8001e3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2220      	movs	r2, #32
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e000      	b.n	8001f42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f40:	2302      	movs	r3, #2
  }
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	00100002 	.word	0x00100002
 8001f50:	ffff0000 	.word	0xffff0000

08001f54 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af02      	add	r7, sp, #8
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	460b      	mov	r3, r1
 8001f62:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001f64:	f7fe fe08 	bl	8000b78 <HAL_GetTick>
 8001f68:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b20      	cmp	r3, #32
 8001f78:	f040 8105 	bne.w	8002186 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	2319      	movs	r3, #25
 8001f82:	2201      	movs	r2, #1
 8001f84:	4982      	ldr	r1, [pc, #520]	; (8002190 <HAL_I2C_IsDeviceReady+0x23c>)
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 f97c 	bl	8002284 <I2C_WaitOnFlagUntilTimeout>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001f92:	2302      	movs	r3, #2
 8001f94:	e0f8      	b.n	8002188 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_I2C_IsDeviceReady+0x50>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e0f1      	b.n	8002188 <HAL_I2C_IsDeviceReady+0x234>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d007      	beq.n	8001fca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0201 	orr.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2224      	movs	r2, #36	; 0x24
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4a6a      	ldr	r2, [pc, #424]	; (8002194 <HAL_I2C_IsDeviceReady+0x240>)
 8001fec:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ffc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2200      	movs	r2, #0
 8002006:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f93a 	bl	8002284 <I2C_WaitOnFlagUntilTimeout>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e0b6      	b.n	8002188 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800201a:	897b      	ldrh	r3, [r7, #10]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002028:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800202a:	f7fe fda5 	bl	8000b78 <HAL_GetTick>
 800202e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b02      	cmp	r3, #2
 800203c:	bf0c      	ite	eq
 800203e:	2301      	moveq	r3, #1
 8002040:	2300      	movne	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002054:	bf0c      	ite	eq
 8002056:	2301      	moveq	r3, #1
 8002058:	2300      	movne	r3, #0
 800205a:	b2db      	uxtb	r3, r3
 800205c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800205e:	e025      	b.n	80020ac <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002060:	f7fe fd8a 	bl	8000b78 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d302      	bcc.n	8002076 <HAL_I2C_IsDeviceReady+0x122>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d103      	bne.n	800207e <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	22a0      	movs	r2, #160	; 0xa0
 800207a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b02      	cmp	r3, #2
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a2:	bf0c      	ite	eq
 80020a4:	2301      	moveq	r3, #1
 80020a6:	2300      	movne	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2ba0      	cmp	r3, #160	; 0xa0
 80020b6:	d005      	beq.n	80020c4 <HAL_I2C_IsDeviceReady+0x170>
 80020b8:	7dfb      	ldrb	r3, [r7, #23]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d102      	bne.n	80020c4 <HAL_I2C_IsDeviceReady+0x170>
 80020be:	7dbb      	ldrb	r3, [r7, #22]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0cd      	beq.n	8002060 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d129      	bne.n	800212e <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	2319      	movs	r3, #25
 8002106:	2201      	movs	r2, #1
 8002108:	4921      	ldr	r1, [pc, #132]	; (8002190 <HAL_I2C_IsDeviceReady+0x23c>)
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 f8ba 	bl	8002284 <I2C_WaitOnFlagUntilTimeout>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e036      	b.n	8002188 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2220      	movs	r2, #32
 800211e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	e02c      	b.n	8002188 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800213c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002146:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	2319      	movs	r3, #25
 800214e:	2201      	movs	r2, #1
 8002150:	490f      	ldr	r1, [pc, #60]	; (8002190 <HAL_I2C_IsDeviceReady+0x23c>)
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 f896 	bl	8002284 <I2C_WaitOnFlagUntilTimeout>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e012      	b.n	8002188 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	3301      	adds	r3, #1
 8002166:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	429a      	cmp	r2, r3
 800216e:	f4ff af3e 	bcc.w	8001fee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2220      	movs	r2, #32
 8002176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8002186:	2302      	movs	r3, #2
  }
}
 8002188:	4618      	mov	r0, r3
 800218a:	3720      	adds	r7, #32
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	00100002 	.word	0x00100002
 8002194:	ffff0000 	.word	0xffff0000

08002198 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af02      	add	r7, sp, #8
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	460b      	mov	r3, r1
 80021a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d006      	beq.n	80021c2 <I2C_MasterRequestWrite+0x2a>
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d003      	beq.n	80021c2 <I2C_MasterRequestWrite+0x2a>
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021c0:	d108      	bne.n	80021d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	e00b      	b.n	80021ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	2b12      	cmp	r3, #18
 80021da:	d107      	bne.n	80021ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 f843 	bl	8002284 <I2C_WaitOnFlagUntilTimeout>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e035      	b.n	8002274 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002210:	d108      	bne.n	8002224 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002212:	897b      	ldrh	r3, [r7, #10]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002220:	611a      	str	r2, [r3, #16]
 8002222:	e01b      	b.n	800225c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002224:	897b      	ldrh	r3, [r7, #10]
 8002226:	11db      	asrs	r3, r3, #7
 8002228:	b2db      	uxtb	r3, r3
 800222a:	f003 0306 	and.w	r3, r3, #6
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f063 030f 	orn	r3, r3, #15
 8002234:	b2da      	uxtb	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	490e      	ldr	r1, [pc, #56]	; (800227c <I2C_MasterRequestWrite+0xe4>)
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 f875 	bl	8002332 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e010      	b.n	8002274 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002252:	897b      	ldrh	r3, [r7, #10]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	4907      	ldr	r1, [pc, #28]	; (8002280 <I2C_MasterRequestWrite+0xe8>)
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 f865 	bl	8002332 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	00010008 	.word	0x00010008
 8002280:	00010002 	.word	0x00010002

08002284 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	4613      	mov	r3, r2
 8002292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002294:	e025      	b.n	80022e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d021      	beq.n	80022e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229e:	f7fe fc6b 	bl	8000b78 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d302      	bcc.n	80022b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d116      	bne.n	80022e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2220      	movs	r2, #32
 80022be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f043 0220 	orr.w	r2, r3, #32
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e023      	b.n	800232a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	0c1b      	lsrs	r3, r3, #16
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d10d      	bne.n	8002308 <I2C_WaitOnFlagUntilTimeout+0x84>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	43da      	mvns	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4013      	ands	r3, r2
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	bf0c      	ite	eq
 80022fe:	2301      	moveq	r3, #1
 8002300:	2300      	movne	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	e00c      	b.n	8002322 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	43da      	mvns	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4013      	ands	r3, r2
 8002314:	b29b      	uxth	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	bf0c      	ite	eq
 800231a:	2301      	moveq	r3, #1
 800231c:	2300      	movne	r3, #0
 800231e:	b2db      	uxtb	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	429a      	cmp	r2, r3
 8002326:	d0b6      	beq.n	8002296 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002340:	e051      	b.n	80023e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800234c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002350:	d123      	bne.n	800239a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002360:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800236a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2220      	movs	r2, #32
 8002376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f043 0204 	orr.w	r2, r3, #4
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e046      	b.n	8002428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a0:	d021      	beq.n	80023e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a2:	f7fe fbe9 	bl	8000b78 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d302      	bcc.n	80023b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d116      	bne.n	80023e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f043 0220 	orr.w	r2, r3, #32
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e020      	b.n	8002428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d10c      	bne.n	800240a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	43da      	mvns	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4013      	ands	r3, r2
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	bf14      	ite	ne
 8002402:	2301      	movne	r3, #1
 8002404:	2300      	moveq	r3, #0
 8002406:	b2db      	uxtb	r3, r3
 8002408:	e00b      	b.n	8002422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	43da      	mvns	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	4013      	ands	r3, r2
 8002416:	b29b      	uxth	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	bf14      	ite	ne
 800241c:	2301      	movne	r3, #1
 800241e:	2300      	moveq	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d18d      	bne.n	8002342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800243c:	e02d      	b.n	800249a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f878 	bl	8002534 <I2C_IsAcknowledgeFailed>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e02d      	b.n	80024aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002454:	d021      	beq.n	800249a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002456:	f7fe fb8f 	bl	8000b78 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	429a      	cmp	r2, r3
 8002464:	d302      	bcc.n	800246c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d116      	bne.n	800249a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2220      	movs	r2, #32
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f043 0220 	orr.w	r2, r3, #32
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e007      	b.n	80024aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a4:	2b80      	cmp	r3, #128	; 0x80
 80024a6:	d1ca      	bne.n	800243e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b084      	sub	sp, #16
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024be:	e02d      	b.n	800251c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 f837 	bl	8002534 <I2C_IsAcknowledgeFailed>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e02d      	b.n	800252c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d6:	d021      	beq.n	800251c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d8:	f7fe fb4e 	bl	8000b78 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d302      	bcc.n	80024ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d116      	bne.n	800251c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	f043 0220 	orr.w	r2, r3, #32
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e007      	b.n	800252c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b04      	cmp	r3, #4
 8002528:	d1ca      	bne.n	80024c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800254a:	d11b      	bne.n	8002584 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002554:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	f043 0204 	orr.w	r2, r3, #4
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002592:	b08b      	sub	sp, #44	; 0x2c
 8002594:	af06      	add	r7, sp, #24
 8002596:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e0d3      	b.n	800274a <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f008 fb9a 	bl	800acf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2203      	movs	r2, #3
 80025c0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f002 f98e 	bl	80048ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	687e      	ldr	r6, [r7, #4]
 80025d6:	466d      	mov	r5, sp
 80025d8:	f106 0410 	add.w	r4, r6, #16
 80025dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	602b      	str	r3, [r5, #0]
 80025e4:	1d33      	adds	r3, r6, #4
 80025e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025e8:	6838      	ldr	r0, [r7, #0]
 80025ea:	f002 f957 	bl	800489c <USB_CoreInit>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0a4      	b.n	800274a <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f002 f98b 	bl	8004922 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800260c:	2300      	movs	r3, #0
 800260e:	73fb      	strb	r3, [r7, #15]
 8002610:	e035      	b.n	800267e <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	015b      	lsls	r3, r3, #5
 8002618:	4413      	add	r3, r2
 800261a:	3329      	adds	r3, #41	; 0x29
 800261c:	2201      	movs	r2, #1
 800261e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	015b      	lsls	r3, r3, #5
 8002626:	4413      	add	r3, r2
 8002628:	3328      	adds	r3, #40	; 0x28
 800262a:	7bfa      	ldrb	r2, [r7, #15]
 800262c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	7bfa      	ldrb	r2, [r7, #15]
 8002632:	b291      	uxth	r1, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	015b      	lsls	r3, r3, #5
 8002638:	4413      	add	r3, r2
 800263a:	3336      	adds	r3, #54	; 0x36
 800263c:	460a      	mov	r2, r1
 800263e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	015b      	lsls	r3, r3, #5
 8002646:	4413      	add	r3, r2
 8002648:	332b      	adds	r3, #43	; 0x2b
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	015b      	lsls	r3, r3, #5
 8002654:	4413      	add	r3, r2
 8002656:	3338      	adds	r3, #56	; 0x38
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	015b      	lsls	r3, r3, #5
 8002662:	4413      	add	r3, r2
 8002664:	333c      	adds	r3, #60	; 0x3c
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	3302      	adds	r3, #2
 8002670:	015b      	lsls	r3, r3, #5
 8002672:	4413      	add	r3, r2
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	3301      	adds	r3, #1
 800267c:	73fb      	strb	r3, [r7, #15]
 800267e:	7bfa      	ldrb	r2, [r7, #15]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	429a      	cmp	r2, r3
 8002686:	d3c4      	bcc.n	8002612 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]
 800268c:	e031      	b.n	80026f2 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	015b      	lsls	r3, r3, #5
 8002694:	4413      	add	r3, r2
 8002696:	f203 1329 	addw	r3, r3, #297	; 0x129
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	015b      	lsls	r3, r3, #5
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026aa:	7bfa      	ldrb	r2, [r7, #15]
 80026ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	015b      	lsls	r3, r3, #5
 80026b4:	4413      	add	r3, r2
 80026b6:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	015b      	lsls	r3, r3, #5
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	015b      	lsls	r3, r3, #5
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	330a      	adds	r3, #10
 80026e4:	015b      	lsls	r3, r3, #5
 80026e6:	4413      	add	r3, r2
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	3301      	adds	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
 80026f2:	7bfa      	ldrb	r2, [r7, #15]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d3c8      	bcc.n	800268e <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	687e      	ldr	r6, [r7, #4]
 8002704:	466d      	mov	r5, sp
 8002706:	f106 0410 	add.w	r4, r6, #16
 800270a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800270c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800270e:	6823      	ldr	r3, [r4, #0]
 8002710:	602b      	str	r3, [r5, #0]
 8002712:	1d33      	adds	r3, r6, #4
 8002714:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002716:	6838      	ldr	r0, [r7, #0]
 8002718:	f002 f90f 	bl	800493a <USB_DevInit>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2202      	movs	r2, #2
 8002726:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e00d      	b.n	800274a <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f003 f94d 	bl	80059e2 <USB_DevDisconnect>

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002752 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_PCD_Start+0x16>
 8002764:	2302      	movs	r3, #2
 8002766:	e016      	b.n	8002796 <HAL_PCD_Start+0x44>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002770:	2101      	movs	r1, #1
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f008 fd23 	bl	800b1be <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f003 f926 	bl	80059ce <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f002 f898 	bl	80048bc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f003 f923 	bl	80059f6 <USB_ReadInterrupts>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027ba:	d102      	bne.n	80027c2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 faf3 	bl	8002da8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f003 f915 	bl	80059f6 <USB_ReadInterrupts>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d6:	d112      	bne.n	80027fe <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ea:	b292      	uxth	r2, r2
 80027ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f008 faf2 	bl	800adda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80027f6:	2100      	movs	r1, #0
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f8de 	bl	80029ba <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f003 f8f7 	bl	80059f6 <USB_ReadInterrupts>
 8002808:	4603      	mov	r3, r0
 800280a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800280e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002812:	d10b      	bne.n	800282c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800281c:	b29a      	uxth	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002826:	b292      	uxth	r2, r2
 8002828:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f003 f8e0 	bl	80059f6 <USB_ReadInterrupts>
 8002836:	4603      	mov	r3, r0
 8002838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800283c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002840:	d10b      	bne.n	800285a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800284a:	b29a      	uxth	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002854:	b292      	uxth	r2, r2
 8002856:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f003 f8c9 	bl	80059f6 <USB_ReadInterrupts>
 8002864:	4603      	mov	r3, r0
 8002866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800286e:	d126      	bne.n	80028be <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002878:	b29a      	uxth	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0204 	bic.w	r2, r2, #4
 8002882:	b292      	uxth	r2, r2
 8002884:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002890:	b29a      	uxth	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0208 	bic.w	r2, r2, #8
 800289a:	b292      	uxth	r2, r2
 800289c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f008 fad3 	bl	800ae4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028b8:	b292      	uxth	r2, r2
 80028ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f003 f897 	bl	80059f6 <USB_ReadInterrupts>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028d2:	d13d      	bne.n	8002950 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028dc:	b29a      	uxth	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0208 	orr.w	r2, r2, #8
 80028e6:	b292      	uxth	r2, r2
 80028e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028fe:	b292      	uxth	r2, r2
 8002900:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800290c:	b29a      	uxth	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0204 	orr.w	r2, r2, #4
 8002916:	b292      	uxth	r2, r2
 8002918:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f003 f868 	bl	80059f6 <USB_ReadInterrupts>
 8002926:	4603      	mov	r3, r0
 8002928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800292c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002930:	d10b      	bne.n	800294a <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800293a:	b29a      	uxth	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002944:	b292      	uxth	r2, r2
 8002946:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f008 fa64 	bl	800ae18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f003 f84e 	bl	80059f6 <USB_ReadInterrupts>
 800295a:	4603      	mov	r3, r0
 800295c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002964:	d10e      	bne.n	8002984 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800296e:	b29a      	uxth	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002978:	b292      	uxth	r2, r2
 800297a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f008 fa1d 	bl	800adbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f003 f834 	bl	80059f6 <USB_ReadInterrupts>
 800298e:	4603      	mov	r3, r0
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002998:	d10b      	bne.n	80029b2 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029ac:	b292      	uxth	r2, r2
 80029ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_PCD_SetAddress+0x1a>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e013      	b.n	80029fc <HAL_PCD_SetAddress+0x42>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f002 ffdb 	bl	80059a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	4608      	mov	r0, r1
 8002a0e:	4611      	mov	r1, r2
 8002a10:	461a      	mov	r2, r3
 8002a12:	4603      	mov	r3, r0
 8002a14:	70fb      	strb	r3, [r7, #3]
 8002a16:	460b      	mov	r3, r1
 8002a18:	803b      	strh	r3, [r7, #0]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	da0b      	bge.n	8002a42 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a2a:	78fb      	ldrb	r3, [r7, #3]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	015b      	lsls	r3, r3, #5
 8002a32:	3328      	adds	r3, #40	; 0x28
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	4413      	add	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	705a      	strb	r2, [r3, #1]
 8002a40:	e00b      	b.n	8002a5a <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a42:	78fb      	ldrb	r3, [r7, #3]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	015b      	lsls	r3, r3, #5
 8002a4a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a5a:	78fb      	ldrb	r3, [r7, #3]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a66:	883a      	ldrh	r2, [r7, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	78ba      	ldrb	r2, [r7, #2]
 8002a70:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	785b      	ldrb	r3, [r3, #1]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d004      	beq.n	8002a84 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a84:	78bb      	ldrb	r3, [r7, #2]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d102      	bne.n	8002a90 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_PCD_EP_Open+0x9a>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e00e      	b.n	8002abc <HAL_PCD_EP_Open+0xb8>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68f9      	ldr	r1, [r7, #12]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f001 ff69 	bl	8004984 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002aba:	7afb      	ldrb	r3, [r7, #11]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	da0b      	bge.n	8002af0 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	015b      	lsls	r3, r3, #5
 8002ae0:	3328      	adds	r3, #40	; 0x28
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2201      	movs	r2, #1
 8002aec:	705a      	strb	r2, [r3, #1]
 8002aee:	e00b      	b.n	8002b08 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	015b      	lsls	r3, r3, #5
 8002af8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	4413      	add	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_PCD_EP_Close+0x5e>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e00e      	b.n	8002b40 <HAL_PCD_EP_Close+0x7c>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68f9      	ldr	r1, [r7, #12]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f002 fa15 	bl	8004f60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	460b      	mov	r3, r1
 8002b56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b58:	7afb      	ldrb	r3, [r7, #11]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	015b      	lsls	r3, r3, #5
 8002b60:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b82:	7afb      	ldrb	r3, [r7, #11]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b8e:	7afb      	ldrb	r3, [r7, #11]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d106      	bne.n	8002ba6 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6979      	ldr	r1, [r7, #20]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f002 fb74 	bl	800528c <USB_EPStartXfer>
 8002ba4:	e005      	b.n	8002bb2 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6979      	ldr	r1, [r7, #20]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f002 fb6d 	bl	800528c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	330a      	adds	r3, #10
 8002bd2:	015b      	lsls	r3, r3, #5
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	681b      	ldr	r3, [r3, #0]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bf4:	7afb      	ldrb	r3, [r7, #11]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	015b      	lsls	r3, r3, #5
 8002bfc:	3328      	adds	r3, #40	; 0x28
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4413      	add	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2200      	movs	r2, #0
 8002c14:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c1c:	7afb      	ldrb	r3, [r7, #11]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c28:	7afb      	ldrb	r3, [r7, #11]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6979      	ldr	r1, [r7, #20]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f002 fb27 	bl	800528c <USB_EPStartXfer>
 8002c3e:	e005      	b.n	8002c4c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6979      	ldr	r1, [r7, #20]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f002 fb20 	bl	800528c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	f003 0207 	and.w	r2, r3, #7
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d901      	bls.n	8002c74 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e046      	b.n	8002d02 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	da0b      	bge.n	8002c94 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	015b      	lsls	r3, r3, #5
 8002c84:	3328      	adds	r3, #40	; 0x28
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	4413      	add	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	705a      	strb	r2, [r3, #1]
 8002c92:	e009      	b.n	8002ca8 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	015b      	lsls	r3, r3, #5
 8002c98:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2201      	movs	r2, #1
 8002cac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_PCD_EP_SetStall+0x72>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e01c      	b.n	8002d02 <HAL_PCD_EP_SetStall+0xac>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68f9      	ldr	r1, [r7, #12]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f002 fd90 	bl	80057fc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d108      	bne.n	8002cf8 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	f002 fe8e 	bl	8005a14 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	460b      	mov	r3, r1
 8002d14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	f003 020f 	and.w	r2, r3, #15
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d901      	bls.n	8002d28 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e03a      	b.n	8002d9e <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	da0b      	bge.n	8002d48 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	015b      	lsls	r3, r3, #5
 8002d38:	3328      	adds	r3, #40	; 0x28
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	705a      	strb	r2, [r3, #1]
 8002d46:	e00b      	b.n	8002d60 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	015b      	lsls	r3, r3, #5
 8002d50:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	4413      	add	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_PCD_EP_ClrStall+0x76>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e00e      	b.n	8002d9e <HAL_PCD_EP_ClrStall+0x94>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68f9      	ldr	r1, [r7, #12]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f002 fd76 	bl	8005880 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002da8:	b590      	push	{r4, r7, lr}
 8002daa:	b089      	sub	sp, #36	; 0x24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002db0:	e282      	b.n	80032b8 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dba:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002dbc:	8afb      	ldrh	r3, [r7, #22]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8002dc6:	7d7b      	ldrb	r3, [r7, #21]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f040 8142 	bne.w	8003052 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002dce:	8afb      	ldrh	r3, [r7, #22]
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d151      	bne.n	8002e7c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de8:	b29c      	uxth	r4, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3328      	adds	r3, #40	; 0x28
 8002dfe:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4413      	add	r3, r2
 8002e14:	3302      	adds	r3, #2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	441a      	add	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f007 ffa7 	bl	800ad90 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 8234 	beq.w	80032b8 <PCD_EP_ISR_Handler+0x510>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 822f 	bne.w	80032b8 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	b292      	uxth	r2, r2
 8002e6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e7a:	e21d      	b.n	80032b8 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e82:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002e8c:	8a7b      	ldrh	r3, [r7, #18]
 8002e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d033      	beq.n	8002efe <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3306      	adds	r3, #6
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	f002 fdec 	bl	8005ab2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	b29c      	uxth	r4, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002ef2:	b292      	uxth	r2, r2
 8002ef4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f007 ff20 	bl	800ad3c <HAL_PCD_SetupStageCallback>
 8002efc:	e1dc      	b.n	80032b8 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002efe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f280 81d8 	bge.w	80032b8 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f14:	4013      	ands	r3, r2
 8002f16:	b29c      	uxth	r4, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002f20:	b292      	uxth	r2, r2
 8002f22:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4413      	add	r3, r2
 8002f38:	3306      	adds	r3, #6
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d019      	beq.n	8002f8c <PCD_EP_ISR_Handler+0x1e4>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d015      	beq.n	8002f8c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6959      	ldr	r1, [r3, #20]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	f002 fd9e 	bl	8005ab2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	441a      	add	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002f84:	2100      	movs	r1, #0
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f007 feea 	bl	800ad60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	461c      	mov	r4, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	441c      	add	r4, r3
 8002f9e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8002fa2:	461c      	mov	r4, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10e      	bne.n	8002fca <PCD_EP_ISR_Handler+0x222>
 8002fac:	8823      	ldrh	r3, [r4, #0]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	8023      	strh	r3, [r4, #0]
 8002fb8:	8823      	ldrh	r3, [r4, #0]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	8023      	strh	r3, [r4, #0]
 8002fc8:	e02d      	b.n	8003026 <PCD_EP_ISR_Handler+0x27e>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	2b3e      	cmp	r3, #62	; 0x3e
 8002fd0:	d812      	bhi.n	8002ff8 <PCD_EP_ISR_Handler+0x250>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <PCD_EP_ISR_Handler+0x244>
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	61bb      	str	r3, [r7, #24]
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	029b      	lsls	r3, r3, #10
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	8023      	strh	r3, [r4, #0]
 8002ff6:	e016      	b.n	8003026 <PCD_EP_ISR_Handler+0x27e>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	61bb      	str	r3, [r7, #24]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	2b00      	cmp	r3, #0
 800300a:	d102      	bne.n	8003012 <PCD_EP_ISR_Handler+0x26a>
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	3b01      	subs	r3, #1
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	b29b      	uxth	r3, r3
 8003016:	029b      	lsls	r3, r3, #10
 8003018:	b29b      	uxth	r3, r3
 800301a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800301e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003022:	b29b      	uxth	r3, r3
 8003024:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	b29b      	uxth	r3, r3
 800302e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003036:	b29c      	uxth	r4, r3
 8003038:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800303c:	b29c      	uxth	r4, r3
 800303e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003042:	b29c      	uxth	r4, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4ba2      	ldr	r3, [pc, #648]	; (80032d4 <PCD_EP_ISR_Handler+0x52c>)
 800304a:	4323      	orrs	r3, r4
 800304c:	b29b      	uxth	r3, r3
 800304e:	8013      	strh	r3, [r2, #0]
 8003050:	e132      	b.n	80032b8 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	7d7b      	ldrb	r3, [r7, #21]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003062:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003066:	2b00      	cmp	r3, #0
 8003068:	f280 80d1 	bge.w	800320e <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	461a      	mov	r2, r3
 8003072:	7d7b      	ldrb	r3, [r7, #21]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	b29a      	uxth	r2, r3
 800307c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003080:	4013      	ands	r3, r2
 8003082:	b29c      	uxth	r4, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	7d7b      	ldrb	r3, [r7, #21]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003094:	b292      	uxth	r2, r2
 8003096:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003098:	7d7b      	ldrb	r3, [r7, #21]
 800309a:	015b      	lsls	r3, r3, #5
 800309c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	4413      	add	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	7b1b      	ldrb	r3, [r3, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d121      	bne.n	80030f2 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	4413      	add	r3, r2
 80030c2:	3306      	adds	r3, #6
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6812      	ldr	r2, [r2, #0]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030d6:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80030d8:	8bfb      	ldrh	r3, [r7, #30]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d072      	beq.n	80031c4 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6959      	ldr	r1, [r3, #20]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	88da      	ldrh	r2, [r3, #6]
 80030ea:	8bfb      	ldrh	r3, [r7, #30]
 80030ec:	f002 fce1 	bl	8005ab2 <USB_ReadPMA>
 80030f0:	e068      	b.n	80031c4 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d021      	beq.n	8003150 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003114:	b29b      	uxth	r3, r3
 8003116:	461a      	mov	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	3302      	adds	r3, #2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	4413      	add	r3, r2
 800312a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003134:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003136:	8bfb      	ldrh	r3, [r7, #30]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d02a      	beq.n	8003192 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6959      	ldr	r1, [r3, #20]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	891a      	ldrh	r2, [r3, #8]
 8003148:	8bfb      	ldrh	r3, [r7, #30]
 800314a:	f002 fcb2 	bl	8005ab2 <USB_ReadPMA>
 800314e:	e020      	b.n	8003192 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003158:	b29b      	uxth	r3, r3
 800315a:	461a      	mov	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4413      	add	r3, r2
 8003164:	3306      	adds	r3, #6
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	4413      	add	r3, r2
 800316e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003178:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800317a:	8bfb      	ldrh	r3, [r7, #30]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6959      	ldr	r1, [r3, #20]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	895a      	ldrh	r2, [r3, #10]
 800318c:	8bfb      	ldrh	r3, [r7, #30]
 800318e:	f002 fc90 	bl	8005ab2 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	881b      	ldrh	r3, [r3, #0]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ac:	b29c      	uxth	r4, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	441a      	add	r2, r3
 80031bc:	4b46      	ldr	r3, [pc, #280]	; (80032d8 <PCD_EP_ISR_Handler+0x530>)
 80031be:	4323      	orrs	r3, r4
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	69da      	ldr	r2, [r3, #28]
 80031c8:	8bfb      	ldrh	r3, [r7, #30]
 80031ca:	441a      	add	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	695a      	ldr	r2, [r3, #20]
 80031d4:	8bfb      	ldrh	r3, [r7, #30]
 80031d6:	441a      	add	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d004      	beq.n	80031ee <PCD_EP_ISR_Handler+0x446>
 80031e4:	8bfa      	ldrh	r2, [r7, #30]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d206      	bcs.n	80031fc <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	4619      	mov	r1, r3
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f007 fdb3 	bl	800ad60 <HAL_PCD_DataOutStageCallback>
 80031fa:	e008      	b.n	800320e <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	7819      	ldrb	r1, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff fc9d 	bl	8002b48 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800320e:	8a7b      	ldrh	r3, [r7, #18]
 8003210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003214:	2b00      	cmp	r3, #0
 8003216:	d04f      	beq.n	80032b8 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8003218:	7d7b      	ldrb	r3, [r7, #21]
 800321a:	015b      	lsls	r3, r3, #5
 800321c:	3328      	adds	r3, #40	; 0x28
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	7d7b      	ldrb	r3, [r7, #21]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	b29b      	uxth	r3, r3
 8003234:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323c:	b29c      	uxth	r4, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	7d7b      	ldrb	r3, [r7, #21]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	441a      	add	r2, r3
 800324a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800324e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003252:	b29b      	uxth	r3, r3
 8003254:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800325e:	b29b      	uxth	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	3302      	adds	r3, #2
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6812      	ldr	r2, [r2, #0]
 8003272:	4413      	add	r3, r2
 8003274:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	441a      	add	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d106      	bne.n	80032a6 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	4619      	mov	r1, r3
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f007 fd76 	bl	800ad90 <HAL_PCD_DataInStageCallback>
 80032a4:	e008      	b.n	80032b8 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	7819      	ldrb	r1, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	695a      	ldr	r2, [r3, #20]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff fc96 	bl	8002be4 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	b21b      	sxth	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f6ff ad74 	blt.w	8002db2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3724      	adds	r7, #36	; 0x24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd90      	pop	{r4, r7, pc}
 80032d4:	ffff8080 	.word	0xffff8080
 80032d8:	ffff80c0 	.word	0xffff80c0

080032dc <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	460b      	mov	r3, r1
 80032e8:	817b      	strh	r3, [r7, #10]
 80032ea:	4613      	mov	r3, r2
 80032ec:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80032ee:	897b      	ldrh	r3, [r7, #10]
 80032f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032fa:	897b      	ldrh	r3, [r7, #10]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	015b      	lsls	r3, r3, #5
 8003302:	3328      	adds	r3, #40	; 0x28
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	4413      	add	r3, r2
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	e006      	b.n	800331a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800330c:	897b      	ldrh	r3, [r7, #10]
 800330e:	015b      	lsls	r3, r3, #5
 8003310:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4413      	add	r3, r2
 8003318:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800331a:	893b      	ldrh	r3, [r7, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d107      	bne.n	8003330 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2200      	movs	r2, #0
 8003324:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	b29a      	uxth	r2, r3
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	80da      	strh	r2, [r3, #6]
 800332e:	e00b      	b.n	8003348 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2201      	movs	r2, #1
 8003334:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	b29a      	uxth	r2, r3
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	0c1b      	lsrs	r3, r3, #16
 8003342:	b29a      	uxth	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	371c      	adds	r7, #28
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e26c      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 8087 	beq.w	8003482 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003374:	4b92      	ldr	r3, [pc, #584]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 030c 	and.w	r3, r3, #12
 800337c:	2b04      	cmp	r3, #4
 800337e:	d00c      	beq.n	800339a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003380:	4b8f      	ldr	r3, [pc, #572]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b08      	cmp	r3, #8
 800338a:	d112      	bne.n	80033b2 <HAL_RCC_OscConfig+0x5e>
 800338c:	4b8c      	ldr	r3, [pc, #560]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003398:	d10b      	bne.n	80033b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339a:	4b89      	ldr	r3, [pc, #548]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d06c      	beq.n	8003480 <HAL_RCC_OscConfig+0x12c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d168      	bne.n	8003480 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e246      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ba:	d106      	bne.n	80033ca <HAL_RCC_OscConfig+0x76>
 80033bc:	4b80      	ldr	r3, [pc, #512]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a7f      	ldr	r2, [pc, #508]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	e02e      	b.n	8003428 <HAL_RCC_OscConfig+0xd4>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0x98>
 80033d2:	4b7b      	ldr	r3, [pc, #492]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a7a      	ldr	r2, [pc, #488]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4b78      	ldr	r3, [pc, #480]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a77      	ldr	r2, [pc, #476]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e01d      	b.n	8003428 <HAL_RCC_OscConfig+0xd4>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0xbc>
 80033f6:	4b72      	ldr	r3, [pc, #456]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a71      	ldr	r2, [pc, #452]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b6f      	ldr	r3, [pc, #444]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a6e      	ldr	r2, [pc, #440]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e00b      	b.n	8003428 <HAL_RCC_OscConfig+0xd4>
 8003410:	4b6b      	ldr	r3, [pc, #428]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a6a      	ldr	r2, [pc, #424]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	4b68      	ldr	r3, [pc, #416]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a67      	ldr	r2, [pc, #412]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003426:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d013      	beq.n	8003458 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fd fba2 	bl	8000b78 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003438:	f7fd fb9e 	bl	8000b78 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e1fa      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	4b5d      	ldr	r3, [pc, #372]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCC_OscConfig+0xe4>
 8003456:	e014      	b.n	8003482 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7fd fb8e 	bl	8000b78 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003460:	f7fd fb8a 	bl	8000b78 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	; 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1e6      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003472:	4b53      	ldr	r3, [pc, #332]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x10c>
 800347e:	e000      	b.n	8003482 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d063      	beq.n	8003556 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800348e:	4b4c      	ldr	r3, [pc, #304]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00b      	beq.n	80034b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800349a:	4b49      	ldr	r3, [pc, #292]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d11c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x18c>
 80034a6:	4b46      	ldr	r3, [pc, #280]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d116      	bne.n	80034e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b2:	4b43      	ldr	r3, [pc, #268]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_RCC_OscConfig+0x176>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d001      	beq.n	80034ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e1ba      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ca:	4b3d      	ldr	r3, [pc, #244]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4939      	ldr	r1, [pc, #228]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034de:	e03a      	b.n	8003556 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d020      	beq.n	800352a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e8:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ee:	f7fd fb43 	bl	8000b78 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f6:	f7fd fb3f 	bl	8000b78 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e19b      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003508:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003514:	4b2a      	ldr	r3, [pc, #168]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4927      	ldr	r1, [pc, #156]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003524:	4313      	orrs	r3, r2
 8003526:	600b      	str	r3, [r1, #0]
 8003528:	e015      	b.n	8003556 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800352a:	4b26      	ldr	r3, [pc, #152]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003530:	f7fd fb22 	bl	8000b78 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003538:	f7fd fb1e 	bl	8000b78 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e17a      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d03a      	beq.n	80035d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d019      	beq.n	800359e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800356a:	4b17      	ldr	r3, [pc, #92]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 800356c:	2201      	movs	r2, #1
 800356e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003570:	f7fd fb02 	bl	8000b78 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003578:	f7fd fafe 	bl	8000b78 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e15a      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358a:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003596:	2001      	movs	r0, #1
 8003598:	f000 fac6 	bl	8003b28 <RCC_Delay>
 800359c:	e01c      	b.n	80035d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800359e:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a4:	f7fd fae8 	bl	8000b78 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035aa:	e00f      	b.n	80035cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ac:	f7fd fae4 	bl	8000b78 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d908      	bls.n	80035cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e140      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
 80035be:	bf00      	nop
 80035c0:	40021000 	.word	0x40021000
 80035c4:	42420000 	.word	0x42420000
 80035c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035cc:	4b9e      	ldr	r3, [pc, #632]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e9      	bne.n	80035ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80a6 	beq.w	8003732 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e6:	2300      	movs	r3, #0
 80035e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ea:	4b97      	ldr	r3, [pc, #604]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10d      	bne.n	8003612 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f6:	4b94      	ldr	r3, [pc, #592]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	4a93      	ldr	r2, [pc, #588]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80035fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003600:	61d3      	str	r3, [r2, #28]
 8003602:	4b91      	ldr	r3, [pc, #580]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360a:	60bb      	str	r3, [r7, #8]
 800360c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360e:	2301      	movs	r3, #1
 8003610:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003612:	4b8e      	ldr	r3, [pc, #568]	; (800384c <HAL_RCC_OscConfig+0x4f8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d118      	bne.n	8003650 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361e:	4b8b      	ldr	r3, [pc, #556]	; (800384c <HAL_RCC_OscConfig+0x4f8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a8a      	ldr	r2, [pc, #552]	; (800384c <HAL_RCC_OscConfig+0x4f8>)
 8003624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362a:	f7fd faa5 	bl	8000b78 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003632:	f7fd faa1 	bl	8000b78 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b64      	cmp	r3, #100	; 0x64
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e0fd      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003644:	4b81      	ldr	r3, [pc, #516]	; (800384c <HAL_RCC_OscConfig+0x4f8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d106      	bne.n	8003666 <HAL_RCC_OscConfig+0x312>
 8003658:	4b7b      	ldr	r3, [pc, #492]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	4a7a      	ldr	r2, [pc, #488]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	6213      	str	r3, [r2, #32]
 8003664:	e02d      	b.n	80036c2 <HAL_RCC_OscConfig+0x36e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10c      	bne.n	8003688 <HAL_RCC_OscConfig+0x334>
 800366e:	4b76      	ldr	r3, [pc, #472]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	4a75      	ldr	r2, [pc, #468]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	6213      	str	r3, [r2, #32]
 800367a:	4b73      	ldr	r3, [pc, #460]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	4a72      	ldr	r2, [pc, #456]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003680:	f023 0304 	bic.w	r3, r3, #4
 8003684:	6213      	str	r3, [r2, #32]
 8003686:	e01c      	b.n	80036c2 <HAL_RCC_OscConfig+0x36e>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	2b05      	cmp	r3, #5
 800368e:	d10c      	bne.n	80036aa <HAL_RCC_OscConfig+0x356>
 8003690:	4b6d      	ldr	r3, [pc, #436]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	4a6c      	ldr	r2, [pc, #432]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003696:	f043 0304 	orr.w	r3, r3, #4
 800369a:	6213      	str	r3, [r2, #32]
 800369c:	4b6a      	ldr	r3, [pc, #424]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	4a69      	ldr	r2, [pc, #420]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	6213      	str	r3, [r2, #32]
 80036a8:	e00b      	b.n	80036c2 <HAL_RCC_OscConfig+0x36e>
 80036aa:	4b67      	ldr	r3, [pc, #412]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	4a66      	ldr	r2, [pc, #408]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	6213      	str	r3, [r2, #32]
 80036b6:	4b64      	ldr	r3, [pc, #400]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	4a63      	ldr	r2, [pc, #396]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80036bc:	f023 0304 	bic.w	r3, r3, #4
 80036c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d015      	beq.n	80036f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ca:	f7fd fa55 	bl	8000b78 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d0:	e00a      	b.n	80036e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d2:	f7fd fa51 	bl	8000b78 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e0ab      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e8:	4b57      	ldr	r3, [pc, #348]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0ee      	beq.n	80036d2 <HAL_RCC_OscConfig+0x37e>
 80036f4:	e014      	b.n	8003720 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f6:	f7fd fa3f 	bl	8000b78 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036fc:	e00a      	b.n	8003714 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fe:	f7fd fa3b 	bl	8000b78 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	f241 3288 	movw	r2, #5000	; 0x1388
 800370c:	4293      	cmp	r3, r2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e095      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003714:	4b4c      	ldr	r3, [pc, #304]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1ee      	bne.n	80036fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003720:	7dfb      	ldrb	r3, [r7, #23]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d105      	bne.n	8003732 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003726:	4b48      	ldr	r3, [pc, #288]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	4a47      	ldr	r2, [pc, #284]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800372c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003730:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 8081 	beq.w	800383e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800373c:	4b42      	ldr	r3, [pc, #264]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 030c 	and.w	r3, r3, #12
 8003744:	2b08      	cmp	r3, #8
 8003746:	d061      	beq.n	800380c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d146      	bne.n	80037de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003750:	4b3f      	ldr	r3, [pc, #252]	; (8003850 <HAL_RCC_OscConfig+0x4fc>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003756:	f7fd fa0f 	bl	8000b78 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375e:	f7fd fa0b 	bl	8000b78 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e067      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003770:	4b35      	ldr	r3, [pc, #212]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1f0      	bne.n	800375e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003784:	d108      	bne.n	8003798 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003786:	4b30      	ldr	r3, [pc, #192]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	492d      	ldr	r1, [pc, #180]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003794:	4313      	orrs	r3, r2
 8003796:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003798:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a19      	ldr	r1, [r3, #32]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	430b      	orrs	r3, r1
 80037aa:	4927      	ldr	r1, [pc, #156]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b0:	4b27      	ldr	r3, [pc, #156]	; (8003850 <HAL_RCC_OscConfig+0x4fc>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b6:	f7fd f9df 	bl	8000b78 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037be:	f7fd f9db 	bl	8000b78 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e037      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037d0:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_RCC_OscConfig+0x46a>
 80037dc:	e02f      	b.n	800383e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037de:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <HAL_RCC_OscConfig+0x4fc>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fd f9c8 	bl	8000b78 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fd f9c4 	bl	8000b78 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e020      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x498>
 800380a:	e018      	b.n	800383e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e013      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	429a      	cmp	r2, r3
 800382a:	d106      	bne.n	800383a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003836:	429a      	cmp	r2, r3
 8003838:	d001      	beq.n	800383e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40021000 	.word	0x40021000
 800384c:	40007000 	.word	0x40007000
 8003850:	42420060 	.word	0x42420060

08003854 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0d0      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003868:	4b6a      	ldr	r3, [pc, #424]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d910      	bls.n	8003898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b67      	ldr	r3, [pc, #412]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f023 0207 	bic.w	r2, r3, #7
 800387e:	4965      	ldr	r1, [pc, #404]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	4313      	orrs	r3, r2
 8003884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003886:	4b63      	ldr	r3, [pc, #396]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d001      	beq.n	8003898 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0b8      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d020      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b0:	4b59      	ldr	r3, [pc, #356]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	4a58      	ldr	r2, [pc, #352]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c8:	4b53      	ldr	r3, [pc, #332]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	4a52      	ldr	r2, [pc, #328]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d4:	4b50      	ldr	r3, [pc, #320]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	494d      	ldr	r1, [pc, #308]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d040      	beq.n	8003974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d107      	bne.n	800390a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fa:	4b47      	ldr	r3, [pc, #284]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d115      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e07f      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d107      	bne.n	8003922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003912:	4b41      	ldr	r3, [pc, #260]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e073      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003922:	4b3d      	ldr	r3, [pc, #244]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e06b      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003932:	4b39      	ldr	r3, [pc, #228]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f023 0203 	bic.w	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4936      	ldr	r1, [pc, #216]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003940:	4313      	orrs	r3, r2
 8003942:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003944:	f7fd f918 	bl	8000b78 <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394a:	e00a      	b.n	8003962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800394c:	f7fd f914 	bl	8000b78 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	; 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e053      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003962:	4b2d      	ldr	r3, [pc, #180]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 020c 	and.w	r2, r3, #12
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	429a      	cmp	r2, r3
 8003972:	d1eb      	bne.n	800394c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003974:	4b27      	ldr	r3, [pc, #156]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d210      	bcs.n	80039a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 0207 	bic.w	r2, r3, #7
 800398a:	4922      	ldr	r1, [pc, #136]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003992:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e032      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b0:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4916      	ldr	r1, [pc, #88]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ce:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	490e      	ldr	r1, [pc, #56]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039e2:	f000 f821 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 80039e6:	4601      	mov	r1, r0
 80039e8:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	4a0a      	ldr	r2, [pc, #40]	; (8003a1c <HAL_RCC_ClockConfig+0x1c8>)
 80039f4:	5cd3      	ldrb	r3, [r2, r3]
 80039f6:	fa21 f303 	lsr.w	r3, r1, r3
 80039fa:	4a09      	ldr	r2, [pc, #36]	; (8003a20 <HAL_RCC_ClockConfig+0x1cc>)
 80039fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039fe:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <HAL_RCC_ClockConfig+0x1d0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fd f876 	bl	8000af4 <HAL_InitTick>

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40022000 	.word	0x40022000
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	0800f778 	.word	0x0800f778
 8003a20:	20000130 	.word	0x20000130
 8003a24:	20000000 	.word	0x20000000

08003a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a28:	b490      	push	{r4, r7}
 8003a2a:	b08a      	sub	sp, #40	; 0x28
 8003a2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a2e:	4b2a      	ldr	r3, [pc, #168]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a30:	1d3c      	adds	r4, r7, #4
 8003a32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a38:	4b28      	ldr	r3, [pc, #160]	; (8003adc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
 8003a42:	2300      	movs	r3, #0
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	2300      	movs	r3, #0
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a52:	4b23      	ldr	r3, [pc, #140]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d002      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0x40>
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d003      	beq.n	8003a6e <HAL_RCC_GetSysClockFreq+0x46>
 8003a66:	e02d      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a68:	4b1e      	ldr	r3, [pc, #120]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a6a:	623b      	str	r3, [r7, #32]
      break;
 8003a6c:	e02d      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	0c9b      	lsrs	r3, r3, #18
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a80:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d013      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a8c:	4b14      	ldr	r3, [pc, #80]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	0c5b      	lsrs	r3, r3, #17
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003aa0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	4a0f      	ldr	r2, [pc, #60]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003aa6:	fb02 f203 	mul.w	r2, r2, r3
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab2:	e004      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	4a0c      	ldr	r2, [pc, #48]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ab8:	fb02 f303 	mul.w	r3, r2, r3
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	623b      	str	r3, [r7, #32]
      break;
 8003ac2:	e002      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ac4:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ac6:	623b      	str	r3, [r7, #32]
      break;
 8003ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aca:	6a3b      	ldr	r3, [r7, #32]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3728      	adds	r7, #40	; 0x28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc90      	pop	{r4, r7}
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	0800e7c8 	.word	0x0800e7c8
 8003adc:	0800e7d8 	.word	0x0800e7d8
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	007a1200 	.word	0x007a1200
 8003ae8:	003d0900 	.word	0x003d0900

08003aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af0:	4b02      	ldr	r3, [pc, #8]	; (8003afc <HAL_RCC_GetHCLKFreq+0x10>)
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr
 8003afc:	20000130 	.word	0x20000130

08003b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b04:	f7ff fff2 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b08:	4601      	mov	r1, r0
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	4a03      	ldr	r2, [pc, #12]	; (8003b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b16:	5cd3      	ldrb	r3, [r2, r3]
 8003b18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000
 8003b24:	0800f788 	.word	0x0800f788

08003b28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b30:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <RCC_Delay+0x34>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <RCC_Delay+0x38>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	0a5b      	lsrs	r3, r3, #9
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	fb02 f303 	mul.w	r3, r2, r3
 8003b42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b44:	bf00      	nop
  }
  while (Delay --);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	1e5a      	subs	r2, r3, #1
 8003b4a:	60fa      	str	r2, [r7, #12]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1f9      	bne.n	8003b44 <RCC_Delay+0x1c>
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	20000130 	.word	0x20000130
 8003b60:	10624dd3 	.word	0x10624dd3

08003b64 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d07d      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003b80:	2300      	movs	r3, #0
 8003b82:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b84:	4b4f      	ldr	r3, [pc, #316]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10d      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b90:	4b4c      	ldr	r3, [pc, #304]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	4a4b      	ldr	r2, [pc, #300]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	61d3      	str	r3, [r2, #28]
 8003b9c:	4b49      	ldr	r3, [pc, #292]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bac:	4b46      	ldr	r3, [pc, #280]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d118      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bb8:	4b43      	ldr	r3, [pc, #268]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a42      	ldr	r2, [pc, #264]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc4:	f7fc ffd8 	bl	8000b78 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bca:	e008      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bcc:	f7fc ffd4 	bl	8000b78 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b64      	cmp	r3, #100	; 0x64
 8003bd8:	d901      	bls.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e06d      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bde:	4b3a      	ldr	r3, [pc, #232]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bea:	4b36      	ldr	r3, [pc, #216]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d02e      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d027      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c08:	4b2e      	ldr	r3, [pc, #184]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c10:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c12:	4b2e      	ldr	r3, [pc, #184]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c18:	4b2c      	ldr	r3, [pc, #176]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c1e:	4a29      	ldr	r2, [pc, #164]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d014      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2e:	f7fc ffa3 	bl	8000b78 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c34:	e00a      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c36:	f7fc ff9f 	bl	8000b78 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e036      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4c:	4b1d      	ldr	r3, [pc, #116]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0ee      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c58:	4b1a      	ldr	r3, [pc, #104]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4917      	ldr	r1, [pc, #92]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c6a:	7dfb      	ldrb	r3, [r7, #23]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d105      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c70:	4b14      	ldr	r3, [pc, #80]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	4a13      	ldr	r2, [pc, #76]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c88:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	490b      	ldr	r1, [pc, #44]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ca6:	4b07      	ldr	r3, [pc, #28]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	4904      	ldr	r1, [pc, #16]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	40007000 	.word	0x40007000
 8003ccc:	42420440 	.word	0x42420440

08003cd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e053      	b.n	8003d8a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d106      	bne.n	8003d02 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f006 fdab 	bl	800a858 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2202      	movs	r2, #2
 8003d06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d18:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	ea42 0103 	orr.w	r1, r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	0c1a      	lsrs	r2, r3, #16
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f002 0204 	and.w	r2, r2, #4
 8003d68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69da      	ldr	r2, [r3, #28]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_SPI_Transmit_DMA+0x20>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e093      	b.n	8003edc <HAL_SPI_Transmit_DMA+0x148>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d002      	beq.n	8003dce <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dcc:	e081      	b.n	8003ed2 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <HAL_SPI_Transmit_DMA+0x46>
 8003dd4:	88fb      	ldrh	r3, [r7, #6]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d102      	bne.n	8003de0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dde:	e078      	b.n	8003ed2 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2203      	movs	r2, #3
 8003de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	88fa      	ldrh	r2, [r7, #6]
 8003df8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	88fa      	ldrh	r2, [r7, #6]
 8003dfe:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e26:	d107      	bne.n	8003e38 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e3c:	4a29      	ldr	r2, [pc, #164]	; (8003ee4 <HAL_SPI_Transmit_DMA+0x150>)
 8003e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e44:	4a28      	ldr	r2, [pc, #160]	; (8003ee8 <HAL_SPI_Transmit_DMA+0x154>)
 8003e46:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e4c:	4a27      	ldr	r2, [pc, #156]	; (8003eec <HAL_SPI_Transmit_DMA+0x158>)
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e54:	2200      	movs	r2, #0
 8003e56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	4619      	mov	r1, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	330c      	adds	r3, #12
 8003e68:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e6e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003e70:	f7fd fb2c 	bl	80014cc <HAL_DMA_Start_IT>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00c      	beq.n	8003e94 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7e:	f043 0210 	orr.w	r2, r3, #16
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003e92:	e01e      	b.n	8003ed2 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9e:	2b40      	cmp	r3, #64	; 0x40
 8003ea0:	d007      	beq.n	8003eb2 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eb0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0220 	orr.w	r2, r2, #32
 8003ec0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0202 	orr.w	r2, r2, #2
 8003ed0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	08003fcd 	.word	0x08003fcd
 8003ee8:	08003f27 	.word	0x08003f27
 8003eec:	08003fe9 	.word	0x08003fe9

08003ef0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr

08003f02 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr

08003f14 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr

08003f26 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b086      	sub	sp, #24
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f34:	f7fc fe20 	bl	8000b78 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0320 	and.w	r3, r3, #32
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	d03b      	beq.n	8003fc0 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0220 	bic.w	r2, r2, #32
 8003f56:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0202 	bic.w	r2, r2, #2
 8003f66:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	2164      	movs	r1, #100	; 0x64
 8003f6c:	6978      	ldr	r0, [r7, #20]
 8003f6e:	f000 f8c5 	bl	80040fc <SPI_EndRxTxTransaction>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7c:	f043 0220 	orr.w	r2, r3, #32
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003fb8:	6978      	ldr	r0, [r7, #20]
 8003fba:	f7ff ffab 	bl	8003f14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003fbe:	e002      	b.n	8003fc6 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003fc0:	6978      	ldr	r0, [r7, #20]
 8003fc2:	f7ff ff95 	bl	8003ef0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f7ff ff91 	bl	8003f02 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0203 	bic.w	r2, r2, #3
 8004004:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400a:	f043 0210 	orr.w	r2, r3, #16
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f7ff ff7a 	bl	8003f14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004020:	bf00      	nop
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004038:	e04c      	b.n	80040d4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004040:	d048      	beq.n	80040d4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004042:	f7fc fd99 	bl	8000b78 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d902      	bls.n	8004058 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d13d      	bne.n	80040d4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004066:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004070:	d111      	bne.n	8004096 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800407a:	d004      	beq.n	8004086 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004084:	d107      	bne.n	8004096 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004094:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800409e:	d10f      	bne.n	80040c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e00f      	b.n	80040f4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4013      	ands	r3, r2
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	bf0c      	ite	eq
 80040e4:	2301      	moveq	r3, #1
 80040e6:	2300      	movne	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d1a3      	bne.n	800403a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af02      	add	r7, sp, #8
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2200      	movs	r2, #0
 8004110:	2180      	movs	r1, #128	; 0x80
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f7ff ff88 	bl	8004028 <SPI_WaitFlagStateUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	f043 0220 	orr.w	r2, r3, #32
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e000      	b.n	8004130 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e01d      	b.n	8004186 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f006 fbe4 	bl	800a92c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3304      	adds	r3, #4
 8004174:	4619      	mov	r1, r3
 8004176:	4610      	mov	r0, r2
 8004178:	f000 fa42 	bl	8004600 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800418e:	b480      	push	{r7}
 8004190:	b085      	sub	sp, #20
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0201 	orr.w	r2, r2, #1
 80041a4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b06      	cmp	r3, #6
 80041b6:	d007      	beq.n	80041c8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr

080041d4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0201 	bic.w	r2, r2, #1
 80041ea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6a1a      	ldr	r2, [r3, #32]
 80041f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10f      	bne.n	800421c <HAL_TIM_Base_Stop_IT+0x48>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6a1a      	ldr	r2, [r3, #32]
 8004202:	f240 4344 	movw	r3, #1092	; 0x444
 8004206:	4013      	ands	r3, r2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d107      	bne.n	800421c <HAL_TIM_Base_Stop_IT+0x48>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0201 	bic.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr

08004228 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b02      	cmp	r3, #2
 800423c:	d122      	bne.n	8004284 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b02      	cmp	r3, #2
 800424a:	d11b      	bne.n	8004284 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0202 	mvn.w	r2, #2
 8004254:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f9ad 	bl	80045ca <HAL_TIM_IC_CaptureCallback>
 8004270:	e005      	b.n	800427e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f9a0 	bl	80045b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f9af 	bl	80045dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b04      	cmp	r3, #4
 8004290:	d122      	bne.n	80042d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b04      	cmp	r3, #4
 800429e:	d11b      	bne.n	80042d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0204 	mvn.w	r2, #4
 80042a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2202      	movs	r2, #2
 80042ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f983 	bl	80045ca <HAL_TIM_IC_CaptureCallback>
 80042c4:	e005      	b.n	80042d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f976 	bl	80045b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f985 	bl	80045dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d122      	bne.n	800432c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0308 	and.w	r3, r3, #8
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d11b      	bne.n	800432c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0208 	mvn.w	r2, #8
 80042fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2204      	movs	r2, #4
 8004302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f959 	bl	80045ca <HAL_TIM_IC_CaptureCallback>
 8004318:	e005      	b.n	8004326 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f94c 	bl	80045b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f95b 	bl	80045dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	2b10      	cmp	r3, #16
 8004338:	d122      	bne.n	8004380 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b10      	cmp	r3, #16
 8004346:	d11b      	bne.n	8004380 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0210 	mvn.w	r2, #16
 8004350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2208      	movs	r2, #8
 8004356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f92f 	bl	80045ca <HAL_TIM_IC_CaptureCallback>
 800436c:	e005      	b.n	800437a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f922 	bl	80045b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f931 	bl	80045dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b01      	cmp	r3, #1
 800438c:	d10e      	bne.n	80043ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b01      	cmp	r3, #1
 800439a:	d107      	bne.n	80043ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0201 	mvn.w	r2, #1
 80043a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f8fd 	bl	80045a6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b6:	2b80      	cmp	r3, #128	; 0x80
 80043b8:	d10e      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c4:	2b80      	cmp	r3, #128	; 0x80
 80043c6:	d107      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fa59 	bl	800488a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e2:	2b40      	cmp	r3, #64	; 0x40
 80043e4:	d10e      	bne.n	8004404 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f0:	2b40      	cmp	r3, #64	; 0x40
 80043f2:	d107      	bne.n	8004404 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f8f5 	bl	80045ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b20      	cmp	r3, #32
 8004410:	d10e      	bne.n	8004430 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b20      	cmp	r3, #32
 800441e:	d107      	bne.n	8004430 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0220 	mvn.w	r2, #32
 8004428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fa24 	bl	8004878 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_TIM_ConfigClockSource+0x18>
 800444c:	2302      	movs	r3, #2
 800444e:	e0a6      	b.n	800459e <HAL_TIM_ConfigClockSource+0x166>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800446e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004476:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b40      	cmp	r3, #64	; 0x40
 8004486:	d067      	beq.n	8004558 <HAL_TIM_ConfigClockSource+0x120>
 8004488:	2b40      	cmp	r3, #64	; 0x40
 800448a:	d80b      	bhi.n	80044a4 <HAL_TIM_ConfigClockSource+0x6c>
 800448c:	2b10      	cmp	r3, #16
 800448e:	d073      	beq.n	8004578 <HAL_TIM_ConfigClockSource+0x140>
 8004490:	2b10      	cmp	r3, #16
 8004492:	d802      	bhi.n	800449a <HAL_TIM_ConfigClockSource+0x62>
 8004494:	2b00      	cmp	r3, #0
 8004496:	d06f      	beq.n	8004578 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004498:	e078      	b.n	800458c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800449a:	2b20      	cmp	r3, #32
 800449c:	d06c      	beq.n	8004578 <HAL_TIM_ConfigClockSource+0x140>
 800449e:	2b30      	cmp	r3, #48	; 0x30
 80044a0:	d06a      	beq.n	8004578 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80044a2:	e073      	b.n	800458c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044a4:	2b70      	cmp	r3, #112	; 0x70
 80044a6:	d00d      	beq.n	80044c4 <HAL_TIM_ConfigClockSource+0x8c>
 80044a8:	2b70      	cmp	r3, #112	; 0x70
 80044aa:	d804      	bhi.n	80044b6 <HAL_TIM_ConfigClockSource+0x7e>
 80044ac:	2b50      	cmp	r3, #80	; 0x50
 80044ae:	d033      	beq.n	8004518 <HAL_TIM_ConfigClockSource+0xe0>
 80044b0:	2b60      	cmp	r3, #96	; 0x60
 80044b2:	d041      	beq.n	8004538 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80044b4:	e06a      	b.n	800458c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ba:	d066      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x152>
 80044bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044c0:	d017      	beq.n	80044f2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80044c2:	e063      	b.n	800458c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	6899      	ldr	r1, [r3, #8]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f000 f96d 	bl	80047b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	609a      	str	r2, [r3, #8]
      break;
 80044f0:	e04c      	b.n	800458c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6818      	ldr	r0, [r3, #0]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	6899      	ldr	r1, [r3, #8]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f000 f956 	bl	80047b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004514:	609a      	str	r2, [r3, #8]
      break;
 8004516:	e039      	b.n	800458c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6818      	ldr	r0, [r3, #0]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	6859      	ldr	r1, [r3, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	461a      	mov	r2, r3
 8004526:	f000 f8cd 	bl	80046c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2150      	movs	r1, #80	; 0x50
 8004530:	4618      	mov	r0, r3
 8004532:	f000 f924 	bl	800477e <TIM_ITRx_SetConfig>
      break;
 8004536:	e029      	b.n	800458c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	6859      	ldr	r1, [r3, #4]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	461a      	mov	r2, r3
 8004546:	f000 f8eb 	bl	8004720 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2160      	movs	r1, #96	; 0x60
 8004550:	4618      	mov	r0, r3
 8004552:	f000 f914 	bl	800477e <TIM_ITRx_SetConfig>
      break;
 8004556:	e019      	b.n	800458c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6818      	ldr	r0, [r3, #0]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	6859      	ldr	r1, [r3, #4]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	461a      	mov	r2, r3
 8004566:	f000 f8ad 	bl	80046c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2140      	movs	r1, #64	; 0x40
 8004570:	4618      	mov	r0, r3
 8004572:	f000 f904 	bl	800477e <TIM_ITRx_SetConfig>
      break;
 8004576:	e009      	b.n	800458c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f000 f8fb 	bl	800477e <TIM_ITRx_SetConfig>
      break;
 8004588:	e000      	b.n	800458c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800458a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80045ae:	bf00      	nop
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bc80      	pop	{r7}
 80045b6:	4770      	bx	lr

080045b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr

080045ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr

080045dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr

080045ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a29      	ldr	r2, [pc, #164]	; (80046b8 <TIM_Base_SetConfig+0xb8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00b      	beq.n	8004630 <TIM_Base_SetConfig+0x30>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461e:	d007      	beq.n	8004630 <TIM_Base_SetConfig+0x30>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a26      	ldr	r2, [pc, #152]	; (80046bc <TIM_Base_SetConfig+0xbc>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d003      	beq.n	8004630 <TIM_Base_SetConfig+0x30>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a25      	ldr	r2, [pc, #148]	; (80046c0 <TIM_Base_SetConfig+0xc0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d108      	bne.n	8004642 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a1c      	ldr	r2, [pc, #112]	; (80046b8 <TIM_Base_SetConfig+0xb8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d00b      	beq.n	8004662 <TIM_Base_SetConfig+0x62>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004650:	d007      	beq.n	8004662 <TIM_Base_SetConfig+0x62>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a19      	ldr	r2, [pc, #100]	; (80046bc <TIM_Base_SetConfig+0xbc>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d003      	beq.n	8004662 <TIM_Base_SetConfig+0x62>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a18      	ldr	r2, [pc, #96]	; (80046c0 <TIM_Base_SetConfig+0xc0>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d108      	bne.n	8004674 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a07      	ldr	r2, [pc, #28]	; (80046b8 <TIM_Base_SetConfig+0xb8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d103      	bne.n	80046a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	691a      	ldr	r2, [r3, #16]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	615a      	str	r2, [r3, #20]
}
 80046ae:	bf00      	nop
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40000400 	.word	0x40000400
 80046c0:	40000800 	.word	0x40000800

080046c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	f023 0201 	bic.w	r2, r3, #1
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f023 030a 	bic.w	r3, r3, #10
 8004700:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	621a      	str	r2, [r3, #32]
}
 8004716:	bf00      	nop
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr

08004720 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	f023 0210 	bic.w	r2, r3, #16
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800474a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	031b      	lsls	r3, r3, #12
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	4313      	orrs	r3, r2
 8004754:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800475c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	621a      	str	r2, [r3, #32]
}
 8004774:	bf00      	nop
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr

0800477e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800477e:	b480      	push	{r7}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004794:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	f043 0307 	orr.w	r3, r3, #7
 80047a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	609a      	str	r2, [r3, #8]
}
 80047a8:	bf00      	nop
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr

080047b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b087      	sub	sp, #28
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	607a      	str	r2, [r7, #4]
 80047be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	021a      	lsls	r2, r3, #8
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	431a      	orrs	r2, r3
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	4313      	orrs	r3, r2
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	609a      	str	r2, [r3, #8]
}
 80047e6:	bf00      	nop
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004804:	2302      	movs	r3, #2
 8004806:	e032      	b.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004840:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	4313      	orrs	r3, r2
 800484a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr

08004878 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	bc80      	pop	{r7}
 8004888:	4770      	bx	lr

0800488a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800489c:	b084      	sub	sp, #16
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	f107 0014 	add.w	r0, r7, #20
 80048aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bc80      	pop	{r7}
 80048b8:	b004      	add	sp, #16
 80048ba:	4770      	bx	lr

080048bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80048c4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80048c8:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	89fb      	ldrh	r3, [r7, #14]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr

080048ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b085      	sub	sp, #20
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80048f2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80048f6:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048fe:	b29b      	uxth	r3, r3
 8004900:	b21a      	sxth	r2, r3
 8004902:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004906:	43db      	mvns	r3, r3
 8004908:	b21b      	sxth	r3, r3
 800490a:	4013      	ands	r3, r2
 800490c:	b21b      	sxth	r3, r3
 800490e:	b29a      	uxth	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	bc80      	pop	{r7}
 8004920:	4770      	bx	lr

08004922 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	460b      	mov	r3, r1
 800492c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	bc80      	pop	{r7}
 8004938:	4770      	bx	lr

0800493a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800493a:	b084      	sub	sp, #16
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	f107 0014 	add.w	r0, r7, #20
 8004948:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff ffa5 	bl	80048bc <USB_EnableGlobalInt>

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800497e:	b004      	add	sp, #16
 8004980:	4770      	bx	lr
	...

08004984 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004984:	b490      	push	{r4, r7}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80049a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a8:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	78db      	ldrb	r3, [r3, #3]
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d819      	bhi.n	80049e6 <USB_ActivateEndpoint+0x62>
 80049b2:	a201      	add	r2, pc, #4	; (adr r2, 80049b8 <USB_ActivateEndpoint+0x34>)
 80049b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b8:	080049c9 	.word	0x080049c9
 80049bc:	080049dd 	.word	0x080049dd
 80049c0:	080049ed 	.word	0x080049ed
 80049c4:	080049d3 	.word	0x080049d3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80049c8:	89bb      	ldrh	r3, [r7, #12]
 80049ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049ce:	81bb      	strh	r3, [r7, #12]
      break;
 80049d0:	e00d      	b.n	80049ee <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80049d2:	89bb      	ldrh	r3, [r7, #12]
 80049d4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80049d8:	81bb      	strh	r3, [r7, #12]
      break;
 80049da:	e008      	b.n	80049ee <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80049dc:	89bb      	ldrh	r3, [r7, #12]
 80049de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049e2:	81bb      	strh	r3, [r7, #12]
      break;
 80049e4:	e003      	b.n	80049ee <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	73fb      	strb	r3, [r7, #15]
      break;
 80049ea:	e000      	b.n	80049ee <USB_ActivateEndpoint+0x6a>
      break;
 80049ec:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	441a      	add	r2, r3
 80049f8:	89bb      	ldrh	r3, [r7, #12]
 80049fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	b29c      	uxth	r4, r3
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	441a      	add	r2, r3
 8004a3a:	4b8a      	ldr	r3, [pc, #552]	; (8004c64 <USB_ActivateEndpoint+0x2e0>)
 8004a3c:	4323      	orrs	r3, r4
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	7b1b      	ldrb	r3, [r3, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f040 8112 	bne.w	8004c70 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	785b      	ldrb	r3, [r3, #1]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d067      	beq.n	8004b24 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a54:	687c      	ldr	r4, [r7, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	441c      	add	r4, r3
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	4423      	add	r3, r4
 8004a68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a6c:	461c      	mov	r4, r3
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	88db      	ldrh	r3, [r3, #6]
 8004a72:	085b      	lsrs	r3, r3, #1
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	b29c      	uxth	r4, r3
 8004a8a:	4623      	mov	r3, r4
 8004a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d014      	beq.n	8004abe <USB_ActivateEndpoint+0x13a>
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aaa:	b29c      	uxth	r4, r3
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	441a      	add	r2, r3
 8004ab6:	4b6c      	ldr	r3, [pc, #432]	; (8004c68 <USB_ActivateEndpoint+0x2e4>)
 8004ab8:	4323      	orrs	r3, r4
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	78db      	ldrb	r3, [r3, #3]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d018      	beq.n	8004af8 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004adc:	b29c      	uxth	r4, r3
 8004ade:	f084 0320 	eor.w	r3, r4, #32
 8004ae2:	b29c      	uxth	r4, r3
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	441a      	add	r2, r3
 8004aee:	4b5d      	ldr	r3, [pc, #372]	; (8004c64 <USB_ActivateEndpoint+0x2e0>)
 8004af0:	4323      	orrs	r3, r4
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	8013      	strh	r3, [r2, #0]
 8004af6:	e22b      	b.n	8004f50 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b0e:	b29c      	uxth	r4, r3
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	441a      	add	r2, r3
 8004b1a:	4b52      	ldr	r3, [pc, #328]	; (8004c64 <USB_ActivateEndpoint+0x2e0>)
 8004b1c:	4323      	orrs	r3, r4
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	8013      	strh	r3, [r2, #0]
 8004b22:	e215      	b.n	8004f50 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b24:	687c      	ldr	r4, [r7, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	441c      	add	r4, r3
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	4423      	add	r3, r4
 8004b38:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004b3c:	461c      	mov	r4, r3
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	88db      	ldrh	r3, [r3, #6]
 8004b42:	085b      	lsrs	r3, r3, #1
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004b4c:	687c      	ldr	r4, [r7, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	441c      	add	r4, r3
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	4423      	add	r3, r4
 8004b60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b64:	461c      	mov	r4, r3
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10e      	bne.n	8004b8c <USB_ActivateEndpoint+0x208>
 8004b6e:	8823      	ldrh	r3, [r4, #0]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	8023      	strh	r3, [r4, #0]
 8004b7a:	8823      	ldrh	r3, [r4, #0]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	8023      	strh	r3, [r4, #0]
 8004b8a:	e02d      	b.n	8004be8 <USB_ActivateEndpoint+0x264>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b3e      	cmp	r3, #62	; 0x3e
 8004b92:	d812      	bhi.n	8004bba <USB_ActivateEndpoint+0x236>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	085b      	lsrs	r3, r3, #1
 8004b9a:	60bb      	str	r3, [r7, #8]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <USB_ActivateEndpoint+0x22a>
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	3301      	adds	r3, #1
 8004bac:	60bb      	str	r3, [r7, #8]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	029b      	lsls	r3, r3, #10
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	8023      	strh	r3, [r4, #0]
 8004bb8:	e016      	b.n	8004be8 <USB_ActivateEndpoint+0x264>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 031f 	and.w	r3, r3, #31
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d102      	bne.n	8004bd4 <USB_ActivateEndpoint+0x250>
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	60bb      	str	r3, [r7, #8]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	029b      	lsls	r3, r3, #10
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	b29c      	uxth	r4, r3
 8004bf6:	4623      	mov	r3, r4
 8004bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d014      	beq.n	8004c2a <USB_ActivateEndpoint+0x2a6>
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c16:	b29c      	uxth	r4, r3
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	441a      	add	r2, r3
 8004c22:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <USB_ActivateEndpoint+0x2e8>)
 8004c24:	4323      	orrs	r3, r4
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c40:	b29c      	uxth	r4, r3
 8004c42:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004c46:	b29c      	uxth	r4, r3
 8004c48:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004c4c:	b29c      	uxth	r4, r3
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	441a      	add	r2, r3
 8004c58:	4b02      	ldr	r3, [pc, #8]	; (8004c64 <USB_ActivateEndpoint+0x2e0>)
 8004c5a:	4323      	orrs	r3, r4
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	8013      	strh	r3, [r2, #0]
 8004c60:	e176      	b.n	8004f50 <USB_ActivateEndpoint+0x5cc>
 8004c62:	bf00      	nop
 8004c64:	ffff8080 	.word	0xffff8080
 8004c68:	ffff80c0 	.word	0xffff80c0
 8004c6c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c86:	b29c      	uxth	r4, r3
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	441a      	add	r2, r3
 8004c92:	4b96      	ldr	r3, [pc, #600]	; (8004eec <USB_ActivateEndpoint+0x568>)
 8004c94:	4323      	orrs	r3, r4
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004c9a:	687c      	ldr	r4, [r7, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	441c      	add	r4, r3
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	011b      	lsls	r3, r3, #4
 8004cac:	4423      	add	r3, r4
 8004cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cb2:	461c      	mov	r4, r3
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	891b      	ldrh	r3, [r3, #8]
 8004cb8:	085b      	lsrs	r3, r3, #1
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	8023      	strh	r3, [r4, #0]
 8004cc2:	687c      	ldr	r4, [r7, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	441c      	add	r4, r3
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	4423      	add	r3, r4
 8004cd6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004cda:	461c      	mov	r4, r3
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	895b      	ldrh	r3, [r3, #10]
 8004ce0:	085b      	lsrs	r3, r3, #1
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	785b      	ldrb	r3, [r3, #1]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f040 8088 	bne.w	8004e04 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	b29c      	uxth	r4, r3
 8004d02:	4623      	mov	r3, r4
 8004d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d014      	beq.n	8004d36 <USB_ActivateEndpoint+0x3b2>
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d22:	b29c      	uxth	r4, r3
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	441a      	add	r2, r3
 8004d2e:	4b70      	ldr	r3, [pc, #448]	; (8004ef0 <USB_ActivateEndpoint+0x56c>)
 8004d30:	4323      	orrs	r3, r4
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	b29c      	uxth	r4, r3
 8004d44:	4623      	mov	r3, r4
 8004d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d014      	beq.n	8004d78 <USB_ActivateEndpoint+0x3f4>
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d64:	b29c      	uxth	r4, r3
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	441a      	add	r2, r3
 8004d70:	4b60      	ldr	r3, [pc, #384]	; (8004ef4 <USB_ActivateEndpoint+0x570>)
 8004d72:	4323      	orrs	r3, r4
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8e:	b29c      	uxth	r4, r3
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	441a      	add	r2, r3
 8004d9a:	4b56      	ldr	r3, [pc, #344]	; (8004ef4 <USB_ActivateEndpoint+0x570>)
 8004d9c:	4323      	orrs	r3, r4
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db8:	b29c      	uxth	r4, r3
 8004dba:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004dbe:	b29c      	uxth	r4, r3
 8004dc0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004dc4:	b29c      	uxth	r4, r3
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	441a      	add	r2, r3
 8004dd0:	4b49      	ldr	r3, [pc, #292]	; (8004ef8 <USB_ActivateEndpoint+0x574>)
 8004dd2:	4323      	orrs	r3, r4
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dee:	b29c      	uxth	r4, r3
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	441a      	add	r2, r3
 8004dfa:	4b3f      	ldr	r3, [pc, #252]	; (8004ef8 <USB_ActivateEndpoint+0x574>)
 8004dfc:	4323      	orrs	r3, r4
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	8013      	strh	r3, [r2, #0]
 8004e02:	e0a5      	b.n	8004f50 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	b29c      	uxth	r4, r3
 8004e12:	4623      	mov	r3, r4
 8004e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d014      	beq.n	8004e46 <USB_ActivateEndpoint+0x4c2>
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e32:	b29c      	uxth	r4, r3
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	441a      	add	r2, r3
 8004e3e:	4b2c      	ldr	r3, [pc, #176]	; (8004ef0 <USB_ActivateEndpoint+0x56c>)
 8004e40:	4323      	orrs	r3, r4
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	b29c      	uxth	r4, r3
 8004e54:	4623      	mov	r3, r4
 8004e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d014      	beq.n	8004e88 <USB_ActivateEndpoint+0x504>
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e74:	b29c      	uxth	r4, r3
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	441a      	add	r2, r3
 8004e80:	4b1c      	ldr	r3, [pc, #112]	; (8004ef4 <USB_ActivateEndpoint+0x570>)
 8004e82:	4323      	orrs	r3, r4
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9e:	b29c      	uxth	r4, r3
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	441a      	add	r2, r3
 8004eaa:	4b11      	ldr	r3, [pc, #68]	; (8004ef0 <USB_ActivateEndpoint+0x56c>)
 8004eac:	4323      	orrs	r3, r4
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	78db      	ldrb	r3, [r3, #3]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d020      	beq.n	8004efc <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed0:	b29c      	uxth	r4, r3
 8004ed2:	f084 0320 	eor.w	r3, r4, #32
 8004ed6:	b29c      	uxth	r4, r3
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	441a      	add	r2, r3
 8004ee2:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <USB_ActivateEndpoint+0x574>)
 8004ee4:	4323      	orrs	r3, r4
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	8013      	strh	r3, [r2, #0]
 8004eea:	e01c      	b.n	8004f26 <USB_ActivateEndpoint+0x5a2>
 8004eec:	ffff8180 	.word	0xffff8180
 8004ef0:	ffffc080 	.word	0xffffc080
 8004ef4:	ffff80c0 	.word	0xffff80c0
 8004ef8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f12:	b29c      	uxth	r4, r3
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	441a      	add	r2, r3
 8004f1e:	4b0f      	ldr	r3, [pc, #60]	; (8004f5c <USB_ActivateEndpoint+0x5d8>)
 8004f20:	4323      	orrs	r3, r4
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3c:	b29c      	uxth	r4, r3
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	441a      	add	r2, r3
 8004f48:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <USB_ActivateEndpoint+0x5d8>)
 8004f4a:	4323      	orrs	r3, r4
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc90      	pop	{r4, r7}
 8004f5a:	4770      	bx	lr
 8004f5c:	ffff8080 	.word	0xffff8080

08004f60 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f60:	b490      	push	{r4, r7}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	7b1b      	ldrb	r3, [r3, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d171      	bne.n	8005056 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	785b      	ldrb	r3, [r3, #1]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d036      	beq.n	8004fe8 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	b29c      	uxth	r4, r3
 8004f88:	4623      	mov	r3, r4
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d014      	beq.n	8004fbc <USB_DeactivateEndpoint+0x5c>
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa8:	b29c      	uxth	r4, r3
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	441a      	add	r2, r3
 8004fb4:	4b6b      	ldr	r3, [pc, #428]	; (8005164 <USB_DeactivateEndpoint+0x204>)
 8004fb6:	4323      	orrs	r3, r4
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd2:	b29c      	uxth	r4, r3
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	441a      	add	r2, r3
 8004fde:	4b62      	ldr	r3, [pc, #392]	; (8005168 <USB_DeactivateEndpoint+0x208>)
 8004fe0:	4323      	orrs	r3, r4
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	8013      	strh	r3, [r2, #0]
 8004fe6:	e144      	b.n	8005272 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	b29c      	uxth	r4, r3
 8004ff6:	4623      	mov	r3, r4
 8004ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d014      	beq.n	800502a <USB_DeactivateEndpoint+0xca>
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	b29b      	uxth	r3, r3
 800500e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005016:	b29c      	uxth	r4, r3
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	441a      	add	r2, r3
 8005022:	4b52      	ldr	r3, [pc, #328]	; (800516c <USB_DeactivateEndpoint+0x20c>)
 8005024:	4323      	orrs	r3, r4
 8005026:	b29b      	uxth	r3, r3
 8005028:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	b29b      	uxth	r3, r3
 8005038:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800503c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005040:	b29c      	uxth	r4, r3
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	441a      	add	r2, r3
 800504c:	4b46      	ldr	r3, [pc, #280]	; (8005168 <USB_DeactivateEndpoint+0x208>)
 800504e:	4323      	orrs	r3, r4
 8005050:	b29b      	uxth	r3, r3
 8005052:	8013      	strh	r3, [r2, #0]
 8005054:	e10d      	b.n	8005272 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	785b      	ldrb	r3, [r3, #1]
 800505a:	2b00      	cmp	r3, #0
 800505c:	f040 8088 	bne.w	8005170 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	b29c      	uxth	r4, r3
 800506e:	4623      	mov	r3, r4
 8005070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d014      	beq.n	80050a2 <USB_DeactivateEndpoint+0x142>
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	b29b      	uxth	r3, r3
 8005086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508e:	b29c      	uxth	r4, r3
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	441a      	add	r2, r3
 800509a:	4b34      	ldr	r3, [pc, #208]	; (800516c <USB_DeactivateEndpoint+0x20c>)
 800509c:	4323      	orrs	r3, r4
 800509e:	b29b      	uxth	r3, r3
 80050a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	b29c      	uxth	r4, r3
 80050b0:	4623      	mov	r3, r4
 80050b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d014      	beq.n	80050e4 <USB_DeactivateEndpoint+0x184>
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d0:	b29c      	uxth	r4, r3
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	441a      	add	r2, r3
 80050dc:	4b21      	ldr	r3, [pc, #132]	; (8005164 <USB_DeactivateEndpoint+0x204>)
 80050de:	4323      	orrs	r3, r4
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fa:	b29c      	uxth	r4, r3
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	441a      	add	r2, r3
 8005106:	4b17      	ldr	r3, [pc, #92]	; (8005164 <USB_DeactivateEndpoint+0x204>)
 8005108:	4323      	orrs	r3, r4
 800510a:	b29b      	uxth	r3, r3
 800510c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	b29b      	uxth	r3, r3
 800511c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005124:	b29c      	uxth	r4, r3
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	441a      	add	r2, r3
 8005130:	4b0d      	ldr	r3, [pc, #52]	; (8005168 <USB_DeactivateEndpoint+0x208>)
 8005132:	4323      	orrs	r3, r4
 8005134:	b29b      	uxth	r3, r3
 8005136:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	b29b      	uxth	r3, r3
 8005146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800514e:	b29c      	uxth	r4, r3
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	441a      	add	r2, r3
 800515a:	4b03      	ldr	r3, [pc, #12]	; (8005168 <USB_DeactivateEndpoint+0x208>)
 800515c:	4323      	orrs	r3, r4
 800515e:	b29b      	uxth	r3, r3
 8005160:	8013      	strh	r3, [r2, #0]
 8005162:	e086      	b.n	8005272 <USB_DeactivateEndpoint+0x312>
 8005164:	ffff80c0 	.word	0xffff80c0
 8005168:	ffff8080 	.word	0xffff8080
 800516c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	b29c      	uxth	r4, r3
 800517e:	4623      	mov	r3, r4
 8005180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d014      	beq.n	80051b2 <USB_DeactivateEndpoint+0x252>
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	b29b      	uxth	r3, r3
 8005196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800519a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519e:	b29c      	uxth	r4, r3
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	441a      	add	r2, r3
 80051aa:	4b35      	ldr	r3, [pc, #212]	; (8005280 <USB_DeactivateEndpoint+0x320>)
 80051ac:	4323      	orrs	r3, r4
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	b29c      	uxth	r4, r3
 80051c0:	4623      	mov	r3, r4
 80051c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d014      	beq.n	80051f4 <USB_DeactivateEndpoint+0x294>
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e0:	b29c      	uxth	r4, r3
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	441a      	add	r2, r3
 80051ec:	4b25      	ldr	r3, [pc, #148]	; (8005284 <USB_DeactivateEndpoint+0x324>)
 80051ee:	4323      	orrs	r3, r4
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
 8005202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520a:	b29c      	uxth	r4, r3
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	441a      	add	r2, r3
 8005216:	4b1a      	ldr	r3, [pc, #104]	; (8005280 <USB_DeactivateEndpoint+0x320>)
 8005218:	4323      	orrs	r3, r4
 800521a:	b29b      	uxth	r3, r3
 800521c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	b29b      	uxth	r3, r3
 800522c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005234:	b29c      	uxth	r4, r3
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	441a      	add	r2, r3
 8005240:	4b11      	ldr	r3, [pc, #68]	; (8005288 <USB_DeactivateEndpoint+0x328>)
 8005242:	4323      	orrs	r3, r4
 8005244:	b29b      	uxth	r3, r3
 8005246:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	b29b      	uxth	r3, r3
 8005256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800525a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525e:	b29c      	uxth	r4, r3
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	441a      	add	r2, r3
 800526a:	4b07      	ldr	r3, [pc, #28]	; (8005288 <USB_DeactivateEndpoint+0x328>)
 800526c:	4323      	orrs	r3, r4
 800526e:	b29b      	uxth	r3, r3
 8005270:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bc90      	pop	{r4, r7}
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	ffffc080 	.word	0xffffc080
 8005284:	ffff80c0 	.word	0xffff80c0
 8005288:	ffff8080 	.word	0xffff8080

0800528c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800528c:	b590      	push	{r4, r7, lr}
 800528e:	b08d      	sub	sp, #52	; 0x34
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	785b      	ldrb	r3, [r3, #1]
 800529a:	2b01      	cmp	r3, #1
 800529c:	f040 8160 	bne.w	8005560 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	699a      	ldr	r2, [r3, #24]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d909      	bls.n	80052c0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b8:	1ad2      	subs	r2, r2, r3
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	619a      	str	r2, [r3, #24]
 80052be:	e005      	b.n	80052cc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2200      	movs	r2, #0
 80052ca:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	7b1b      	ldrb	r3, [r3, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d119      	bne.n	8005308 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	6959      	ldr	r1, [r3, #20]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	88da      	ldrh	r2, [r3, #6]
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	b29b      	uxth	r3, r3
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fba2 	bl	8005a2a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80052e6:	687c      	ldr	r4, [r7, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	441c      	add	r4, r3
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	4423      	add	r3, r4
 80052fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052fe:	461c      	mov	r4, r3
 8005300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005302:	b29b      	uxth	r3, r3
 8005304:	8023      	strh	r3, [r4, #0]
 8005306:	e10f      	b.n	8005528 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	b29b      	uxth	r3, r3
 8005316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	d065      	beq.n	80053ea <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800531e:	687c      	ldr	r4, [r7, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	785b      	ldrb	r3, [r3, #1]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d148      	bne.n	80053ba <USB_EPStartXfer+0x12e>
 8005328:	687c      	ldr	r4, [r7, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005330:	b29b      	uxth	r3, r3
 8005332:	441c      	add	r4, r3
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	4423      	add	r3, r4
 800533c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005340:	461c      	mov	r4, r3
 8005342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10e      	bne.n	8005366 <USB_EPStartXfer+0xda>
 8005348:	8823      	ldrh	r3, [r4, #0]
 800534a:	b29b      	uxth	r3, r3
 800534c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005350:	b29b      	uxth	r3, r3
 8005352:	8023      	strh	r3, [r4, #0]
 8005354:	8823      	ldrh	r3, [r4, #0]
 8005356:	b29b      	uxth	r3, r3
 8005358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800535c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005360:	b29b      	uxth	r3, r3
 8005362:	8023      	strh	r3, [r4, #0]
 8005364:	e03d      	b.n	80053e2 <USB_EPStartXfer+0x156>
 8005366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005368:	2b3e      	cmp	r3, #62	; 0x3e
 800536a:	d810      	bhi.n	800538e <USB_EPStartXfer+0x102>
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	085b      	lsrs	r3, r3, #1
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
 8005372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <USB_EPStartXfer+0xf6>
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	3301      	adds	r3, #1
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	b29b      	uxth	r3, r3
 8005386:	029b      	lsls	r3, r3, #10
 8005388:	b29b      	uxth	r3, r3
 800538a:	8023      	strh	r3, [r4, #0]
 800538c:	e029      	b.n	80053e2 <USB_EPStartXfer+0x156>
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	095b      	lsrs	r3, r3, #5
 8005392:	627b      	str	r3, [r7, #36]	; 0x24
 8005394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005396:	f003 031f 	and.w	r3, r3, #31
 800539a:	2b00      	cmp	r3, #0
 800539c:	d102      	bne.n	80053a4 <USB_EPStartXfer+0x118>
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	3b01      	subs	r3, #1
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	029b      	lsls	r3, r3, #10
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	8023      	strh	r3, [r4, #0]
 80053b8:	e013      	b.n	80053e2 <USB_EPStartXfer+0x156>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	785b      	ldrb	r3, [r3, #1]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d10f      	bne.n	80053e2 <USB_EPStartXfer+0x156>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	441c      	add	r4, r3
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	4423      	add	r3, r4
 80053d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053dc:	b29a      	uxth	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	895b      	ldrh	r3, [r3, #10]
 80053e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80053e8:	e063      	b.n	80054b2 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	785b      	ldrb	r3, [r3, #1]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d148      	bne.n	8005484 <USB_EPStartXfer+0x1f8>
 80053f2:	687c      	ldr	r4, [r7, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	441c      	add	r4, r3
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	4423      	add	r3, r4
 8005406:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800540a:	461c      	mov	r4, r3
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10e      	bne.n	8005430 <USB_EPStartXfer+0x1a4>
 8005412:	8823      	ldrh	r3, [r4, #0]
 8005414:	b29b      	uxth	r3, r3
 8005416:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800541a:	b29b      	uxth	r3, r3
 800541c:	8023      	strh	r3, [r4, #0]
 800541e:	8823      	ldrh	r3, [r4, #0]
 8005420:	b29b      	uxth	r3, r3
 8005422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800542a:	b29b      	uxth	r3, r3
 800542c:	8023      	strh	r3, [r4, #0]
 800542e:	e03d      	b.n	80054ac <USB_EPStartXfer+0x220>
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	2b3e      	cmp	r3, #62	; 0x3e
 8005434:	d810      	bhi.n	8005458 <USB_EPStartXfer+0x1cc>
 8005436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005438:	085b      	lsrs	r3, r3, #1
 800543a:	623b      	str	r3, [r7, #32]
 800543c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <USB_EPStartXfer+0x1c0>
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	3301      	adds	r3, #1
 800544a:	623b      	str	r3, [r7, #32]
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	b29b      	uxth	r3, r3
 8005450:	029b      	lsls	r3, r3, #10
 8005452:	b29b      	uxth	r3, r3
 8005454:	8023      	strh	r3, [r4, #0]
 8005456:	e029      	b.n	80054ac <USB_EPStartXfer+0x220>
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	095b      	lsrs	r3, r3, #5
 800545c:	623b      	str	r3, [r7, #32]
 800545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005460:	f003 031f 	and.w	r3, r3, #31
 8005464:	2b00      	cmp	r3, #0
 8005466:	d102      	bne.n	800546e <USB_EPStartXfer+0x1e2>
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	3b01      	subs	r3, #1
 800546c:	623b      	str	r3, [r7, #32]
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	b29b      	uxth	r3, r3
 8005472:	029b      	lsls	r3, r3, #10
 8005474:	b29b      	uxth	r3, r3
 8005476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800547a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800547e:	b29b      	uxth	r3, r3
 8005480:	8023      	strh	r3, [r4, #0]
 8005482:	e013      	b.n	80054ac <USB_EPStartXfer+0x220>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	785b      	ldrb	r3, [r3, #1]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d10f      	bne.n	80054ac <USB_EPStartXfer+0x220>
 800548c:	687c      	ldr	r4, [r7, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005494:	b29b      	uxth	r3, r3
 8005496:	441c      	add	r4, r3
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	4423      	add	r3, r4
 80054a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054a4:	461c      	mov	r4, r3
 80054a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	891b      	ldrh	r3, [r3, #8]
 80054b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	6959      	ldr	r1, [r3, #20]
 80054b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fab4 	bl	8005a2a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	785b      	ldrb	r3, [r3, #1]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d115      	bne.n	80054f6 <USB_EPStartXfer+0x26a>
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e0:	b29c      	uxth	r4, r3
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	441a      	add	r2, r3
 80054ec:	4b9a      	ldr	r3, [pc, #616]	; (8005758 <USB_EPStartXfer+0x4cc>)
 80054ee:	4323      	orrs	r3, r4
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	8013      	strh	r3, [r2, #0]
 80054f4:	e018      	b.n	8005528 <USB_EPStartXfer+0x29c>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	785b      	ldrb	r3, [r3, #1]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d114      	bne.n	8005528 <USB_EPStartXfer+0x29c>
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	b29b      	uxth	r3, r3
 800550c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005514:	b29c      	uxth	r4, r3
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	441a      	add	r2, r3
 8005520:	4b8e      	ldr	r3, [pc, #568]	; (800575c <USB_EPStartXfer+0x4d0>)
 8005522:	4323      	orrs	r3, r4
 8005524:	b29b      	uxth	r3, r3
 8005526:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	b29b      	uxth	r3, r3
 8005536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800553e:	b29c      	uxth	r4, r3
 8005540:	f084 0310 	eor.w	r3, r4, #16
 8005544:	b29c      	uxth	r4, r3
 8005546:	f084 0320 	eor.w	r3, r4, #32
 800554a:	b29c      	uxth	r4, r3
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	441a      	add	r2, r3
 8005556:	4b82      	ldr	r3, [pc, #520]	; (8005760 <USB_EPStartXfer+0x4d4>)
 8005558:	4323      	orrs	r3, r4
 800555a:	b29b      	uxth	r3, r3
 800555c:	8013      	strh	r3, [r2, #0]
 800555e:	e146      	b.n	80057ee <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	699a      	ldr	r2, [r3, #24]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	429a      	cmp	r2, r3
 800556a:	d909      	bls.n	8005580 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	699a      	ldr	r2, [r3, #24]
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005578:	1ad2      	subs	r2, r2, r3
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	619a      	str	r2, [r3, #24]
 800557e:	e005      	b.n	800558c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2200      	movs	r2, #0
 800558a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	7b1b      	ldrb	r3, [r3, #12]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d148      	bne.n	8005626 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005594:	687c      	ldr	r4, [r7, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800559c:	b29b      	uxth	r3, r3
 800559e:	441c      	add	r4, r3
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	4423      	add	r3, r4
 80055a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055ac:	461c      	mov	r4, r3
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10e      	bne.n	80055d2 <USB_EPStartXfer+0x346>
 80055b4:	8823      	ldrh	r3, [r4, #0]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055bc:	b29b      	uxth	r3, r3
 80055be:	8023      	strh	r3, [r4, #0]
 80055c0:	8823      	ldrh	r3, [r4, #0]
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	8023      	strh	r3, [r4, #0]
 80055d0:	e0f2      	b.n	80057b8 <USB_EPStartXfer+0x52c>
 80055d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d4:	2b3e      	cmp	r3, #62	; 0x3e
 80055d6:	d810      	bhi.n	80055fa <USB_EPStartXfer+0x36e>
 80055d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055da:	085b      	lsrs	r3, r3, #1
 80055dc:	61fb      	str	r3, [r7, #28]
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <USB_EPStartXfer+0x362>
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	3301      	adds	r3, #1
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	029b      	lsls	r3, r3, #10
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	8023      	strh	r3, [r4, #0]
 80055f8:	e0de      	b.n	80057b8 <USB_EPStartXfer+0x52c>
 80055fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fc:	095b      	lsrs	r3, r3, #5
 80055fe:	61fb      	str	r3, [r7, #28]
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	f003 031f 	and.w	r3, r3, #31
 8005606:	2b00      	cmp	r3, #0
 8005608:	d102      	bne.n	8005610 <USB_EPStartXfer+0x384>
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	3b01      	subs	r3, #1
 800560e:	61fb      	str	r3, [r7, #28]
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	b29b      	uxth	r3, r3
 8005614:	029b      	lsls	r3, r3, #10
 8005616:	b29b      	uxth	r3, r3
 8005618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800561c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005620:	b29b      	uxth	r3, r3
 8005622:	8023      	strh	r3, [r4, #0]
 8005624:	e0c8      	b.n	80057b8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	785b      	ldrb	r3, [r3, #1]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d148      	bne.n	80056c0 <USB_EPStartXfer+0x434>
 800562e:	687c      	ldr	r4, [r7, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005636:	b29b      	uxth	r3, r3
 8005638:	441c      	add	r4, r3
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	4423      	add	r3, r4
 8005642:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005646:	461c      	mov	r4, r3
 8005648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10e      	bne.n	800566c <USB_EPStartXfer+0x3e0>
 800564e:	8823      	ldrh	r3, [r4, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005656:	b29b      	uxth	r3, r3
 8005658:	8023      	strh	r3, [r4, #0]
 800565a:	8823      	ldrh	r3, [r4, #0]
 800565c:	b29b      	uxth	r3, r3
 800565e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005666:	b29b      	uxth	r3, r3
 8005668:	8023      	strh	r3, [r4, #0]
 800566a:	e03d      	b.n	80056e8 <USB_EPStartXfer+0x45c>
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	2b3e      	cmp	r3, #62	; 0x3e
 8005670:	d810      	bhi.n	8005694 <USB_EPStartXfer+0x408>
 8005672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005674:	085b      	lsrs	r3, r3, #1
 8005676:	61bb      	str	r3, [r7, #24]
 8005678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <USB_EPStartXfer+0x3fc>
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	3301      	adds	r3, #1
 8005686:	61bb      	str	r3, [r7, #24]
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	b29b      	uxth	r3, r3
 800568c:	029b      	lsls	r3, r3, #10
 800568e:	b29b      	uxth	r3, r3
 8005690:	8023      	strh	r3, [r4, #0]
 8005692:	e029      	b.n	80056e8 <USB_EPStartXfer+0x45c>
 8005694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005696:	095b      	lsrs	r3, r3, #5
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569c:	f003 031f 	and.w	r3, r3, #31
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d102      	bne.n	80056aa <USB_EPStartXfer+0x41e>
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	61bb      	str	r3, [r7, #24]
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	029b      	lsls	r3, r3, #10
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	8023      	strh	r3, [r4, #0]
 80056be:	e013      	b.n	80056e8 <USB_EPStartXfer+0x45c>
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	785b      	ldrb	r3, [r3, #1]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d10f      	bne.n	80056e8 <USB_EPStartXfer+0x45c>
 80056c8:	687c      	ldr	r4, [r7, #4]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	441c      	add	r4, r3
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	4423      	add	r3, r4
 80056dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056e0:	461c      	mov	r4, r3
 80056e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	8023      	strh	r3, [r4, #0]
 80056e8:	687c      	ldr	r4, [r7, #4]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	785b      	ldrb	r3, [r3, #1]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d14e      	bne.n	8005790 <USB_EPStartXfer+0x504>
 80056f2:	687c      	ldr	r4, [r7, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	441c      	add	r4, r3
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	4423      	add	r3, r4
 8005706:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800570a:	461c      	mov	r4, r3
 800570c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10e      	bne.n	8005730 <USB_EPStartXfer+0x4a4>
 8005712:	8823      	ldrh	r3, [r4, #0]
 8005714:	b29b      	uxth	r3, r3
 8005716:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800571a:	b29b      	uxth	r3, r3
 800571c:	8023      	strh	r3, [r4, #0]
 800571e:	8823      	ldrh	r3, [r4, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800572a:	b29b      	uxth	r3, r3
 800572c:	8023      	strh	r3, [r4, #0]
 800572e:	e043      	b.n	80057b8 <USB_EPStartXfer+0x52c>
 8005730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005732:	2b3e      	cmp	r3, #62	; 0x3e
 8005734:	d816      	bhi.n	8005764 <USB_EPStartXfer+0x4d8>
 8005736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005738:	085b      	lsrs	r3, r3, #1
 800573a:	617b      	str	r3, [r7, #20]
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <USB_EPStartXfer+0x4c0>
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	3301      	adds	r3, #1
 800574a:	617b      	str	r3, [r7, #20]
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	b29b      	uxth	r3, r3
 8005750:	029b      	lsls	r3, r3, #10
 8005752:	b29b      	uxth	r3, r3
 8005754:	8023      	strh	r3, [r4, #0]
 8005756:	e02f      	b.n	80057b8 <USB_EPStartXfer+0x52c>
 8005758:	ffff80c0 	.word	0xffff80c0
 800575c:	ffffc080 	.word	0xffffc080
 8005760:	ffff8080 	.word	0xffff8080
 8005764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005766:	095b      	lsrs	r3, r3, #5
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576c:	f003 031f 	and.w	r3, r3, #31
 8005770:	2b00      	cmp	r3, #0
 8005772:	d102      	bne.n	800577a <USB_EPStartXfer+0x4ee>
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	3b01      	subs	r3, #1
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	b29b      	uxth	r3, r3
 800577e:	029b      	lsls	r3, r3, #10
 8005780:	b29b      	uxth	r3, r3
 8005782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800578a:	b29b      	uxth	r3, r3
 800578c:	8023      	strh	r3, [r4, #0]
 800578e:	e013      	b.n	80057b8 <USB_EPStartXfer+0x52c>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	785b      	ldrb	r3, [r3, #1]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d10f      	bne.n	80057b8 <USB_EPStartXfer+0x52c>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800579e:	b29b      	uxth	r3, r3
 80057a0:	441c      	add	r4, r3
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	4423      	add	r3, r4
 80057aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ce:	b29c      	uxth	r4, r3
 80057d0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80057d4:	b29c      	uxth	r4, r3
 80057d6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80057da:	b29c      	uxth	r4, r3
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	441a      	add	r2, r3
 80057e6:	4b04      	ldr	r3, [pc, #16]	; (80057f8 <USB_EPStartXfer+0x56c>)
 80057e8:	4323      	orrs	r3, r4
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3734      	adds	r7, #52	; 0x34
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd90      	pop	{r4, r7, pc}
 80057f8:	ffff8080 	.word	0xffff8080

080057fc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057fc:	b490      	push	{r4, r7}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	785b      	ldrb	r3, [r3, #1]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d018      	beq.n	8005840 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	b29b      	uxth	r3, r3
 800581c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005824:	b29c      	uxth	r4, r3
 8005826:	f084 0310 	eor.w	r3, r4, #16
 800582a:	b29c      	uxth	r4, r3
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	441a      	add	r2, r3
 8005836:	4b11      	ldr	r3, [pc, #68]	; (800587c <USB_EPSetStall+0x80>)
 8005838:	4323      	orrs	r3, r4
 800583a:	b29b      	uxth	r3, r3
 800583c:	8013      	strh	r3, [r2, #0]
 800583e:	e017      	b.n	8005870 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	b29b      	uxth	r3, r3
 800584e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005856:	b29c      	uxth	r4, r3
 8005858:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800585c:	b29c      	uxth	r4, r3
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	441a      	add	r2, r3
 8005868:	4b04      	ldr	r3, [pc, #16]	; (800587c <USB_EPSetStall+0x80>)
 800586a:	4323      	orrs	r3, r4
 800586c:	b29b      	uxth	r3, r3
 800586e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bc90      	pop	{r4, r7}
 800587a:	4770      	bx	lr
 800587c:	ffff8080 	.word	0xffff8080

08005880 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005880:	b490      	push	{r4, r7}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	7b1b      	ldrb	r3, [r3, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d17d      	bne.n	800598e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	785b      	ldrb	r3, [r3, #1]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d03d      	beq.n	8005916 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	b29c      	uxth	r4, r3
 80058a8:	4623      	mov	r3, r4
 80058aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d014      	beq.n	80058dc <USB_EPClearStall+0x5c>
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c8:	b29c      	uxth	r4, r3
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	441a      	add	r2, r3
 80058d4:	4b31      	ldr	r3, [pc, #196]	; (800599c <USB_EPClearStall+0x11c>)
 80058d6:	4323      	orrs	r3, r4
 80058d8:	b29b      	uxth	r3, r3
 80058da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	78db      	ldrb	r3, [r3, #3]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d054      	beq.n	800598e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058fa:	b29c      	uxth	r4, r3
 80058fc:	f084 0320 	eor.w	r3, r4, #32
 8005900:	b29c      	uxth	r4, r3
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	441a      	add	r2, r3
 800590c:	4b24      	ldr	r3, [pc, #144]	; (80059a0 <USB_EPClearStall+0x120>)
 800590e:	4323      	orrs	r3, r4
 8005910:	b29b      	uxth	r3, r3
 8005912:	8013      	strh	r3, [r2, #0]
 8005914:	e03b      	b.n	800598e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b29c      	uxth	r4, r3
 8005924:	4623      	mov	r3, r4
 8005926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d014      	beq.n	8005958 <USB_EPClearStall+0xd8>
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	b29b      	uxth	r3, r3
 800593c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005944:	b29c      	uxth	r4, r3
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	441a      	add	r2, r3
 8005950:	4b14      	ldr	r3, [pc, #80]	; (80059a4 <USB_EPClearStall+0x124>)
 8005952:	4323      	orrs	r3, r4
 8005954:	b29b      	uxth	r3, r3
 8005956:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	b29b      	uxth	r3, r3
 8005966:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800596a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596e:	b29c      	uxth	r4, r3
 8005970:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005974:	b29c      	uxth	r4, r3
 8005976:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800597a:	b29c      	uxth	r4, r3
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	441a      	add	r2, r3
 8005986:	4b06      	ldr	r3, [pc, #24]	; (80059a0 <USB_EPClearStall+0x120>)
 8005988:	4323      	orrs	r3, r4
 800598a:	b29b      	uxth	r3, r3
 800598c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bc90      	pop	{r4, r7}
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	ffff80c0 	.word	0xffff80c0
 80059a0:	ffff8080 	.word	0xffff8080
 80059a4:	ffffc080 	.word	0xffffc080

080059a8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80059b4:	78fb      	ldrb	r3, [r7, #3]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d103      	bne.n	80059c2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2280      	movs	r2, #128	; 0x80
 80059be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr

080059ce <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr

080059e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bc80      	pop	{r7}
 80059f4:	4770      	bx	lr

080059f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b085      	sub	sp, #20
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005a08:	68fb      	ldr	r3, [r7, #12]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bc80      	pop	{r7}
 8005a12:	4770      	bx	lr

08005a14 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bc80      	pop	{r7}
 8005a28:	4770      	bx	lr

08005a2a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b08d      	sub	sp, #52	; 0x34
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	60f8      	str	r0, [r7, #12]
 8005a32:	60b9      	str	r1, [r7, #8]
 8005a34:	4611      	mov	r1, r2
 8005a36:	461a      	mov	r2, r3
 8005a38:	460b      	mov	r3, r1
 8005a3a:	80fb      	strh	r3, [r7, #6]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005a40:	88bb      	ldrh	r3, [r7, #4]
 8005a42:	3301      	adds	r3, #1
 8005a44:	085b      	lsrs	r3, r3, #1
 8005a46:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005a50:	88fb      	ldrh	r3, [r7, #6]
 8005a52:	005a      	lsls	r2, r3, #1
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a5c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a62:	e01e      	b.n	8005aa2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	021b      	lsls	r3, r3, #8
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a88:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	3302      	adds	r3, #2
 8005a8e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a92:	3302      	adds	r3, #2
 8005a94:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	3301      	adds	r3, #1
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1dd      	bne.n	8005a64 <USB_WritePMA+0x3a>
  }
}
 8005aa8:	bf00      	nop
 8005aaa:	3734      	adds	r7, #52	; 0x34
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bc80      	pop	{r7}
 8005ab0:	4770      	bx	lr

08005ab2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b08b      	sub	sp, #44	; 0x2c
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	60f8      	str	r0, [r7, #12]
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	4611      	mov	r1, r2
 8005abe:	461a      	mov	r2, r3
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	80fb      	strh	r3, [r7, #6]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005ac8:	88bb      	ldrh	r3, [r7, #4]
 8005aca:	085b      	lsrs	r3, r3, #1
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ad8:	88fb      	ldrh	r3, [r7, #6]
 8005ada:	005a      	lsls	r2, r3, #1
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ae4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aea:	e01b      	b.n	8005b24 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	3302      	adds	r3, #2
 8005af8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	3301      	adds	r3, #1
 8005b06:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	0a1b      	lsrs	r3, r3, #8
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	3301      	adds	r3, #1
 8005b16:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	3302      	adds	r3, #2
 8005b1c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	3b01      	subs	r3, #1
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1e0      	bne.n	8005aec <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005b2a:	88bb      	ldrh	r3, [r7, #4]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d007      	beq.n	8005b46 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	701a      	strb	r2, [r3, #0]
  }
}
 8005b46:	bf00      	nop
 8005b48:	372c      	adds	r7, #44	; 0x2c
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bc80      	pop	{r7}
 8005b4e:	4770      	bx	lr

08005b50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	7c1b      	ldrb	r3, [r3, #16]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d115      	bne.n	8005b94 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005b68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	2181      	movs	r1, #129	; 0x81
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f005 f9ee 	bl	800af52 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b80:	2202      	movs	r2, #2
 8005b82:	2101      	movs	r1, #1
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f005 f9e4 	bl	800af52 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005b92:	e012      	b.n	8005bba <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005b94:	2340      	movs	r3, #64	; 0x40
 8005b96:	2202      	movs	r2, #2
 8005b98:	2181      	movs	r1, #129	; 0x81
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f005 f9d9 	bl	800af52 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ba6:	2340      	movs	r3, #64	; 0x40
 8005ba8:	2202      	movs	r2, #2
 8005baa:	2101      	movs	r1, #1
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f005 f9d0 	bl	800af52 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005bba:	2308      	movs	r3, #8
 8005bbc:	2203      	movs	r2, #3
 8005bbe:	2182      	movs	r1, #130	; 0x82
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f005 f9c6 	bl	800af52 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005bcc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005bd0:	f005 fae0 	bl	800b194 <USBD_static_malloc>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d102      	bne.n	8005bec <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005be6:	2301      	movs	r3, #1
 8005be8:	73fb      	strb	r3, [r7, #15]
 8005bea:	e026      	b.n	8005c3a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	7c1b      	ldrb	r3, [r3, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c20:	2101      	movs	r1, #1
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f005 fa7f 	bl	800b126 <USBD_LL_PrepareReceive>
 8005c28:	e007      	b.n	8005c3a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c30:	2340      	movs	r3, #64	; 0x40
 8005c32:	2101      	movs	r1, #1
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f005 fa76 	bl	800b126 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005c54:	2181      	movs	r1, #129	; 0x81
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f005 f9a1 	bl	800af9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005c62:	2101      	movs	r1, #1
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f005 f99a 	bl	800af9e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005c72:	2182      	movs	r1, #130	; 0x82
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f005 f992 	bl	800af9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00e      	beq.n	8005ca8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f005 fa86 	bl	800b1ac <USBD_static_free>
    pdev->pClassData = NULL;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b086      	sub	sp, #24
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cc2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d039      	beq.n	8005d50 <USBD_CDC_Setup+0x9e>
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d17c      	bne.n	8005dda <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	88db      	ldrh	r3, [r3, #6]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d029      	beq.n	8005d3c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	b25b      	sxtb	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	da11      	bge.n	8005d16 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005cfe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	88d2      	ldrh	r2, [r2, #6]
 8005d04:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005d06:	6939      	ldr	r1, [r7, #16]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	88db      	ldrh	r3, [r3, #6]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f001 f9f6 	bl	8007100 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005d14:	e068      	b.n	8005de8 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	785a      	ldrb	r2, [r3, #1]
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	88db      	ldrh	r3, [r3, #6]
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005d2c:	6939      	ldr	r1, [r7, #16]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	88db      	ldrh	r3, [r3, #6]
 8005d32:	461a      	mov	r2, r3
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f001 fa11 	bl	800715c <USBD_CtlPrepareRx>
      break;
 8005d3a:	e055      	b.n	8005de8 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	7850      	ldrb	r0, [r2, #1]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	6839      	ldr	r1, [r7, #0]
 8005d4c:	4798      	blx	r3
      break;
 8005d4e:	e04b      	b.n	8005de8 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	785b      	ldrb	r3, [r3, #1]
 8005d54:	2b0a      	cmp	r3, #10
 8005d56:	d017      	beq.n	8005d88 <USBD_CDC_Setup+0xd6>
 8005d58:	2b0b      	cmp	r3, #11
 8005d5a:	d029      	beq.n	8005db0 <USBD_CDC_Setup+0xfe>
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d133      	bne.n	8005dc8 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	d107      	bne.n	8005d7a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005d6a:	f107 030c 	add.w	r3, r7, #12
 8005d6e:	2202      	movs	r2, #2
 8005d70:	4619      	mov	r1, r3
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f001 f9c4 	bl	8007100 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d78:	e02e      	b.n	8005dd8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005d7a:	6839      	ldr	r1, [r7, #0]
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f001 f955 	bl	800702c <USBD_CtlError>
            ret = USBD_FAIL;
 8005d82:	2302      	movs	r3, #2
 8005d84:	75fb      	strb	r3, [r7, #23]
          break;
 8005d86:	e027      	b.n	8005dd8 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d107      	bne.n	8005da2 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005d92:	f107 030f 	add.w	r3, r7, #15
 8005d96:	2201      	movs	r2, #1
 8005d98:	4619      	mov	r1, r3
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f001 f9b0 	bl	8007100 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005da0:	e01a      	b.n	8005dd8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005da2:	6839      	ldr	r1, [r7, #0]
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f001 f941 	bl	800702c <USBD_CtlError>
            ret = USBD_FAIL;
 8005daa:	2302      	movs	r3, #2
 8005dac:	75fb      	strb	r3, [r7, #23]
          break;
 8005dae:	e013      	b.n	8005dd8 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005db6:	2b03      	cmp	r3, #3
 8005db8:	d00d      	beq.n	8005dd6 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005dba:	6839      	ldr	r1, [r7, #0]
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f001 f935 	bl	800702c <USBD_CtlError>
            ret = USBD_FAIL;
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005dc6:	e006      	b.n	8005dd6 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f001 f92e 	bl	800702c <USBD_CtlError>
          ret = USBD_FAIL;
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	75fb      	strb	r3, [r7, #23]
          break;
 8005dd4:	e000      	b.n	8005dd8 <USBD_CDC_Setup+0x126>
          break;
 8005dd6:	bf00      	nop
      }
      break;
 8005dd8:	e006      	b.n	8005de8 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f001 f925 	bl	800702c <USBD_CtlError>
      ret = USBD_FAIL;
 8005de2:	2302      	movs	r3, #2
 8005de4:	75fb      	strb	r3, [r7, #23]
      break;
 8005de6:	bf00      	nop
  }

  return ret;
 8005de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e04:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e0c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d037      	beq.n	8005e88 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005e18:	78fa      	ldrb	r2, [r7, #3]
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	440b      	add	r3, r1
 8005e26:	331c      	adds	r3, #28
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d026      	beq.n	8005e7c <USBD_CDC_DataIn+0x8a>
 8005e2e:	78fa      	ldrb	r2, [r7, #3]
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	4613      	mov	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	331c      	adds	r3, #28
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	78fa      	ldrb	r2, [r7, #3]
 8005e42:	68b9      	ldr	r1, [r7, #8]
 8005e44:	0152      	lsls	r2, r2, #5
 8005e46:	440a      	add	r2, r1
 8005e48:	3238      	adds	r2, #56	; 0x38
 8005e4a:	6812      	ldr	r2, [r2, #0]
 8005e4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e50:	fb02 f201 	mul.w	r2, r2, r1
 8005e54:	1a9b      	subs	r3, r3, r2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d110      	bne.n	8005e7c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005e5a:	78fa      	ldrb	r2, [r7, #3]
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	440b      	add	r3, r1
 8005e68:	331c      	adds	r3, #28
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e6e:	78f9      	ldrb	r1, [r7, #3]
 8005e70:	2300      	movs	r3, #0
 8005e72:	2200      	movs	r2, #0
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f005 f933 	bl	800b0e0 <USBD_LL_Transmit>
 8005e7a:	e003      	b.n	8005e84 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005e84:	2300      	movs	r3, #0
 8005e86:	e000      	b.n	8005e8a <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8005e88:	2302      	movs	r3, #2
  }
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b084      	sub	sp, #16
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ea6:	78fb      	ldrb	r3, [r7, #3]
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f005 f95e 	bl	800b16c <USBD_LL_GetRxDataSize>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00d      	beq.n	8005ede <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	4798      	blx	r3

    return USBD_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	e000      	b.n	8005ee0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005ede:	2302      	movs	r3, #2
  }
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d015      	beq.n	8005f2e <USBD_CDC_EP0_RxReady+0x46>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005f08:	2bff      	cmp	r3, #255	; 0xff
 8005f0a:	d010      	beq.n	8005f2e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005f1a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005f22:	b292      	uxth	r2, r2
 8005f24:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	22ff      	movs	r2, #255	; 0xff
 8005f2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2243      	movs	r2, #67	; 0x43
 8005f44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005f46:	4b03      	ldr	r3, [pc, #12]	; (8005f54 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bc80      	pop	{r7}
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	20000090 	.word	0x20000090

08005f58 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2243      	movs	r2, #67	; 0x43
 8005f64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005f66:	4b03      	ldr	r3, [pc, #12]	; (8005f74 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bc80      	pop	{r7}
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	2000004c 	.word	0x2000004c

08005f78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2243      	movs	r2, #67	; 0x43
 8005f84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005f86:	4b03      	ldr	r3, [pc, #12]	; (8005f94 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bc80      	pop	{r7}
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	200000d4 	.word	0x200000d4

08005f98 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	220a      	movs	r2, #10
 8005fa4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005fa6:	4b03      	ldr	r3, [pc, #12]	; (8005fb4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bc80      	pop	{r7}
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	20000008 	.word	0x20000008

08005fb8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d005      	beq.n	8005fd8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bc80      	pop	{r7}
 8005fe2:	4770      	bx	lr

08005fe4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006002:	88fa      	ldrh	r2, [r7, #6]
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	371c      	adds	r7, #28
 8006010:	46bd      	mov	sp, r7
 8006012:	bc80      	pop	{r7}
 8006014:	4770      	bx	lr

08006016 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006016:	b480      	push	{r7}
 8006018:	b085      	sub	sp, #20
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006026:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	bc80      	pop	{r7}
 800603a:	4770      	bx	lr

0800603c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800604a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006052:	2b00      	cmp	r3, #0
 8006054:	d01c      	beq.n	8006090 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800605c:	2b00      	cmp	r3, #0
 800605e:	d115      	bne.n	800608c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2201      	movs	r2, #1
 8006064:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800607e:	b29b      	uxth	r3, r3
 8006080:	2181      	movs	r1, #129	; 0x81
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f005 f82c 	bl	800b0e0 <USBD_LL_Transmit>

      return USBD_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	e002      	b.n	8006092 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800608c:	2301      	movs	r3, #1
 800608e:	e000      	b.n	8006092 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006090:	2302      	movs	r3, #2
  }
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b084      	sub	sp, #16
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d017      	beq.n	80060e4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	7c1b      	ldrb	r3, [r3, #16]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d109      	bne.n	80060d0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060c6:	2101      	movs	r1, #1
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f005 f82c 	bl	800b126 <USBD_LL_PrepareReceive>
 80060ce:	e007      	b.n	80060e0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060d6:	2340      	movs	r3, #64	; 0x40
 80060d8:	2101      	movs	r1, #1
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f005 f823 	bl	800b126 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80060e0:	2300      	movs	r3, #0
 80060e2:	e000      	b.n	80060e6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80060e4:	2302      	movs	r3, #2
  }
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b084      	sub	sp, #16
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	4613      	mov	r3, r2
 80060fa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006102:	2302      	movs	r3, #2
 8006104:	e01a      	b.n	800613c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	79fa      	ldrb	r2, [r7, #7]
 8006132:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f004 fe97 	bl	800ae68 <USBD_LL_Init>

  return USBD_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d006      	beq.n	8006166 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006160:	2300      	movs	r3, #0
 8006162:	73fb      	strb	r3, [r7, #15]
 8006164:	e001      	b.n	800616a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006166:	2302      	movs	r3, #2
 8006168:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800616a:	7bfb      	ldrb	r3, [r7, #15]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	bc80      	pop	{r7}
 8006174:	4770      	bx	lr

08006176 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b082      	sub	sp, #8
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f004 fecc 	bl	800af1c <USBD_LL_Start>

  return USBD_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800618e:	b480      	push	{r7}
 8006190:	b083      	sub	sp, #12
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	bc80      	pop	{r7}
 80061a0:	4770      	bx	lr

080061a2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b084      	sub	sp, #16
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	460b      	mov	r3, r1
 80061ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80061ae:	2302      	movs	r3, #2
 80061b0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00c      	beq.n	80061d6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	78fa      	ldrb	r2, [r7, #3]
 80061c6:	4611      	mov	r1, r2
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	4798      	blx	r3
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	78fa      	ldrb	r2, [r7, #3]
 80061f6:	4611      	mov	r1, r2
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	4798      	blx	r3

  return USBD_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b082      	sub	sp, #8
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006216:	6839      	ldr	r1, [r7, #0]
 8006218:	4618      	mov	r0, r3
 800621a:	f000 fecb 	bl	8006fb4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800622c:	461a      	mov	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800623a:	f003 031f 	and.w	r3, r3, #31
 800623e:	2b01      	cmp	r3, #1
 8006240:	d00c      	beq.n	800625c <USBD_LL_SetupStage+0x56>
 8006242:	2b01      	cmp	r3, #1
 8006244:	d302      	bcc.n	800624c <USBD_LL_SetupStage+0x46>
 8006246:	2b02      	cmp	r3, #2
 8006248:	d010      	beq.n	800626c <USBD_LL_SetupStage+0x66>
 800624a:	e017      	b.n	800627c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006252:	4619      	mov	r1, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f9cb 	bl	80065f0 <USBD_StdDevReq>
      break;
 800625a:	e01a      	b.n	8006292 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fa2d 	bl	80066c4 <USBD_StdItfReq>
      break;
 800626a:	e012      	b.n	8006292 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006272:	4619      	mov	r1, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fa6b 	bl	8006750 <USBD_StdEPReq>
      break;
 800627a:	e00a      	b.n	8006292 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006282:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006286:	b2db      	uxtb	r3, r3
 8006288:	4619      	mov	r1, r3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f004 fea6 	bl	800afdc <USBD_LL_StallEP>
      break;
 8006290:	bf00      	nop
  }

  return USBD_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	460b      	mov	r3, r1
 80062a6:	607a      	str	r2, [r7, #4]
 80062a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80062aa:	7afb      	ldrb	r3, [r7, #11]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d14b      	bne.n	8006348 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80062b6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d134      	bne.n	800632c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d919      	bls.n	8006302 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	68da      	ldr	r2, [r3, #12]
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	1ad2      	subs	r2, r2, r3
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d203      	bcs.n	80062f0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	e002      	b.n	80062f6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	461a      	mov	r2, r3
 80062f8:	6879      	ldr	r1, [r7, #4]
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 ff4c 	bl	8007198 <USBD_CtlContinueRx>
 8006300:	e038      	b.n	8006374 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006314:	2b03      	cmp	r3, #3
 8006316:	d105      	bne.n	8006324 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 ff49 	bl	80071bc <USBD_CtlSendStatus>
 800632a:	e023      	b.n	8006374 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006332:	2b05      	cmp	r3, #5
 8006334:	d11e      	bne.n	8006374 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800633e:	2100      	movs	r1, #0
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f004 fe4b 	bl	800afdc <USBD_LL_StallEP>
 8006346:	e015      	b.n	8006374 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00d      	beq.n	8006370 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800635a:	2b03      	cmp	r3, #3
 800635c:	d108      	bne.n	8006370 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	7afa      	ldrb	r2, [r7, #11]
 8006368:	4611      	mov	r1, r2
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	4798      	blx	r3
 800636e:	e001      	b.n	8006374 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006370:	2302      	movs	r3, #2
 8006372:	e000      	b.n	8006376 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b086      	sub	sp, #24
 8006382:	af00      	add	r7, sp, #0
 8006384:	60f8      	str	r0, [r7, #12]
 8006386:	460b      	mov	r3, r1
 8006388:	607a      	str	r2, [r7, #4]
 800638a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800638c:	7afb      	ldrb	r3, [r7, #11]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d17f      	bne.n	8006492 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3314      	adds	r3, #20
 8006396:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d15c      	bne.n	800645c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	68da      	ldr	r2, [r3, #12]
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d915      	bls.n	80063da <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	68da      	ldr	r2, [r3, #12]
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	1ad2      	subs	r2, r2, r3
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	461a      	mov	r2, r3
 80063c4:	6879      	ldr	r1, [r7, #4]
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 feb6 	bl	8007138 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063cc:	2300      	movs	r3, #0
 80063ce:	2200      	movs	r2, #0
 80063d0:	2100      	movs	r1, #0
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f004 fea7 	bl	800b126 <USBD_LL_PrepareReceive>
 80063d8:	e04e      	b.n	8006478 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	6912      	ldr	r2, [r2, #16]
 80063e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80063e6:	fb02 f201 	mul.w	r2, r2, r1
 80063ea:	1a9b      	subs	r3, r3, r2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d11c      	bne.n	800642a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d316      	bcc.n	800642a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	689a      	ldr	r2, [r3, #8]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006406:	429a      	cmp	r2, r3
 8006408:	d20f      	bcs.n	800642a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800640a:	2200      	movs	r2, #0
 800640c:	2100      	movs	r1, #0
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 fe92 	bl	8007138 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800641c:	2300      	movs	r3, #0
 800641e:	2200      	movs	r2, #0
 8006420:	2100      	movs	r1, #0
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f004 fe7f 	bl	800b126 <USBD_LL_PrepareReceive>
 8006428:	e026      	b.n	8006478 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00a      	beq.n	800644c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800643c:	2b03      	cmp	r3, #3
 800643e:	d105      	bne.n	800644c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800644c:	2180      	movs	r1, #128	; 0x80
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f004 fdc4 	bl	800afdc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 fec4 	bl	80071e2 <USBD_CtlReceiveStatus>
 800645a:	e00d      	b.n	8006478 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006462:	2b04      	cmp	r3, #4
 8006464:	d004      	beq.n	8006470 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800646c:	2b00      	cmp	r3, #0
 800646e:	d103      	bne.n	8006478 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006470:	2180      	movs	r1, #128	; 0x80
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f004 fdb2 	bl	800afdc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800647e:	2b01      	cmp	r3, #1
 8006480:	d11d      	bne.n	80064be <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f7ff fe83 	bl	800618e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006490:	e015      	b.n	80064be <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00d      	beq.n	80064ba <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d108      	bne.n	80064ba <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	7afa      	ldrb	r2, [r7, #11]
 80064b2:	4611      	mov	r1, r2
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	4798      	blx	r3
 80064b8:	e001      	b.n	80064be <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80064ba:	2302      	movs	r3, #2
 80064bc:	e000      	b.n	80064c0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064d0:	2340      	movs	r3, #64	; 0x40
 80064d2:	2200      	movs	r2, #0
 80064d4:	2100      	movs	r1, #0
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f004 fd3b 	bl	800af52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2240      	movs	r2, #64	; 0x40
 80064e8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064ec:	2340      	movs	r3, #64	; 0x40
 80064ee:	2200      	movs	r2, #0
 80064f0:	2180      	movs	r1, #128	; 0x80
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f004 fd2d 	bl	800af52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2240      	movs	r2, #64	; 0x40
 8006502:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006528:	2b00      	cmp	r3, #0
 800652a:	d009      	beq.n	8006540 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	6852      	ldr	r2, [r2, #4]
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	4611      	mov	r1, r2
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	4798      	blx	r3
  }

  return USBD_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800654a:	b480      	push	{r7}
 800654c:	b083      	sub	sp, #12
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	460b      	mov	r3, r1
 8006554:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	78fa      	ldrb	r2, [r7, #3]
 800655a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	bc80      	pop	{r7}
 8006566:	4770      	bx	lr

08006568 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2204      	movs	r2, #4
 8006580:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	bc80      	pop	{r7}
 800658e:	4770      	bx	lr

08006590 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800659e:	2b04      	cmp	r3, #4
 80065a0:	d105      	bne.n	80065ae <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bc80      	pop	{r7}
 80065b8:	4770      	bx	lr

080065ba <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b082      	sub	sp, #8
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c8:	2b03      	cmp	r3, #3
 80065ca:	d10b      	bne.n	80065e4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d005      	beq.n	80065e4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
	...

080065f0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006606:	2b20      	cmp	r3, #32
 8006608:	d004      	beq.n	8006614 <USBD_StdDevReq+0x24>
 800660a:	2b40      	cmp	r3, #64	; 0x40
 800660c:	d002      	beq.n	8006614 <USBD_StdDevReq+0x24>
 800660e:	2b00      	cmp	r3, #0
 8006610:	d008      	beq.n	8006624 <USBD_StdDevReq+0x34>
 8006612:	e04c      	b.n	80066ae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	4798      	blx	r3
      break;
 8006622:	e049      	b.n	80066b8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	2b09      	cmp	r3, #9
 800662a:	d83a      	bhi.n	80066a2 <USBD_StdDevReq+0xb2>
 800662c:	a201      	add	r2, pc, #4	; (adr r2, 8006634 <USBD_StdDevReq+0x44>)
 800662e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006632:	bf00      	nop
 8006634:	08006685 	.word	0x08006685
 8006638:	08006699 	.word	0x08006699
 800663c:	080066a3 	.word	0x080066a3
 8006640:	0800668f 	.word	0x0800668f
 8006644:	080066a3 	.word	0x080066a3
 8006648:	08006667 	.word	0x08006667
 800664c:	0800665d 	.word	0x0800665d
 8006650:	080066a3 	.word	0x080066a3
 8006654:	0800667b 	.word	0x0800667b
 8006658:	08006671 	.word	0x08006671
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800665c:	6839      	ldr	r1, [r7, #0]
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f9d4 	bl	8006a0c <USBD_GetDescriptor>
          break;
 8006664:	e022      	b.n	80066ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006666:	6839      	ldr	r1, [r7, #0]
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fb37 	bl	8006cdc <USBD_SetAddress>
          break;
 800666e:	e01d      	b.n	80066ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006670:	6839      	ldr	r1, [r7, #0]
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fb74 	bl	8006d60 <USBD_SetConfig>
          break;
 8006678:	e018      	b.n	80066ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fbfd 	bl	8006e7c <USBD_GetConfig>
          break;
 8006682:	e013      	b.n	80066ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fc2c 	bl	8006ee4 <USBD_GetStatus>
          break;
 800668c:	e00e      	b.n	80066ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fc5a 	bl	8006f4a <USBD_SetFeature>
          break;
 8006696:	e009      	b.n	80066ac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fc69 	bl	8006f72 <USBD_ClrFeature>
          break;
 80066a0:	e004      	b.n	80066ac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80066a2:	6839      	ldr	r1, [r7, #0]
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fcc1 	bl	800702c <USBD_CtlError>
          break;
 80066aa:	bf00      	nop
      }
      break;
 80066ac:	e004      	b.n	80066b8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fcbb 	bl	800702c <USBD_CtlError>
      break;
 80066b6:	bf00      	nop
  }

  return ret;
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop

080066c4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066da:	2b20      	cmp	r3, #32
 80066dc:	d003      	beq.n	80066e6 <USBD_StdItfReq+0x22>
 80066de:	2b40      	cmp	r3, #64	; 0x40
 80066e0:	d001      	beq.n	80066e6 <USBD_StdItfReq+0x22>
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d12a      	bne.n	800673c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ec:	3b01      	subs	r3, #1
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d81d      	bhi.n	800672e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	889b      	ldrh	r3, [r3, #4]
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d813      	bhi.n	8006724 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	4798      	blx	r3
 800670a:	4603      	mov	r3, r0
 800670c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	88db      	ldrh	r3, [r3, #6]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d110      	bne.n	8006738 <USBD_StdItfReq+0x74>
 8006716:	7bfb      	ldrb	r3, [r7, #15]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10d      	bne.n	8006738 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fd4d 	bl	80071bc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006722:	e009      	b.n	8006738 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fc80 	bl	800702c <USBD_CtlError>
          break;
 800672c:	e004      	b.n	8006738 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fc7b 	bl	800702c <USBD_CtlError>
          break;
 8006736:	e000      	b.n	800673a <USBD_StdItfReq+0x76>
          break;
 8006738:	bf00      	nop
      }
      break;
 800673a:	e004      	b.n	8006746 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fc74 	bl	800702c <USBD_CtlError>
      break;
 8006744:	bf00      	nop
  }

  return USBD_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	889b      	ldrh	r3, [r3, #4]
 8006762:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800676c:	2b20      	cmp	r3, #32
 800676e:	d004      	beq.n	800677a <USBD_StdEPReq+0x2a>
 8006770:	2b40      	cmp	r3, #64	; 0x40
 8006772:	d002      	beq.n	800677a <USBD_StdEPReq+0x2a>
 8006774:	2b00      	cmp	r3, #0
 8006776:	d008      	beq.n	800678a <USBD_StdEPReq+0x3a>
 8006778:	e13d      	b.n	80069f6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	4798      	blx	r3
      break;
 8006788:	e13a      	b.n	8006a00 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006792:	2b20      	cmp	r3, #32
 8006794:	d10a      	bne.n	80067ac <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	4798      	blx	r3
 80067a4:	4603      	mov	r3, r0
 80067a6:	73fb      	strb	r3, [r7, #15]

        return ret;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
 80067aa:	e12a      	b.n	8006a02 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	785b      	ldrb	r3, [r3, #1]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d03e      	beq.n	8006832 <USBD_StdEPReq+0xe2>
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	d002      	beq.n	80067be <USBD_StdEPReq+0x6e>
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d070      	beq.n	800689e <USBD_StdEPReq+0x14e>
 80067bc:	e115      	b.n	80069ea <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d002      	beq.n	80067ce <USBD_StdEPReq+0x7e>
 80067c8:	2b03      	cmp	r3, #3
 80067ca:	d015      	beq.n	80067f8 <USBD_StdEPReq+0xa8>
 80067cc:	e02b      	b.n	8006826 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067ce:	7bbb      	ldrb	r3, [r7, #14]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00c      	beq.n	80067ee <USBD_StdEPReq+0x9e>
 80067d4:	7bbb      	ldrb	r3, [r7, #14]
 80067d6:	2b80      	cmp	r3, #128	; 0x80
 80067d8:	d009      	beq.n	80067ee <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80067da:	7bbb      	ldrb	r3, [r7, #14]
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f004 fbfc 	bl	800afdc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80067e4:	2180      	movs	r1, #128	; 0x80
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f004 fbf8 	bl	800afdc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067ec:	e020      	b.n	8006830 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fc1b 	bl	800702c <USBD_CtlError>
              break;
 80067f6:	e01b      	b.n	8006830 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	885b      	ldrh	r3, [r3, #2]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10e      	bne.n	800681e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006800:	7bbb      	ldrb	r3, [r7, #14]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00b      	beq.n	800681e <USBD_StdEPReq+0xce>
 8006806:	7bbb      	ldrb	r3, [r7, #14]
 8006808:	2b80      	cmp	r3, #128	; 0x80
 800680a:	d008      	beq.n	800681e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	88db      	ldrh	r3, [r3, #6]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d104      	bne.n	800681e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006814:	7bbb      	ldrb	r3, [r7, #14]
 8006816:	4619      	mov	r1, r3
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f004 fbdf 	bl	800afdc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fccc 	bl	80071bc <USBD_CtlSendStatus>

              break;
 8006824:	e004      	b.n	8006830 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006826:	6839      	ldr	r1, [r7, #0]
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fbff 	bl	800702c <USBD_CtlError>
              break;
 800682e:	bf00      	nop
          }
          break;
 8006830:	e0e0      	b.n	80069f4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006838:	2b02      	cmp	r3, #2
 800683a:	d002      	beq.n	8006842 <USBD_StdEPReq+0xf2>
 800683c:	2b03      	cmp	r3, #3
 800683e:	d015      	beq.n	800686c <USBD_StdEPReq+0x11c>
 8006840:	e026      	b.n	8006890 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006842:	7bbb      	ldrb	r3, [r7, #14]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00c      	beq.n	8006862 <USBD_StdEPReq+0x112>
 8006848:	7bbb      	ldrb	r3, [r7, #14]
 800684a:	2b80      	cmp	r3, #128	; 0x80
 800684c:	d009      	beq.n	8006862 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800684e:	7bbb      	ldrb	r3, [r7, #14]
 8006850:	4619      	mov	r1, r3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f004 fbc2 	bl	800afdc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006858:	2180      	movs	r1, #128	; 0x80
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f004 fbbe 	bl	800afdc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006860:	e01c      	b.n	800689c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006862:	6839      	ldr	r1, [r7, #0]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fbe1 	bl	800702c <USBD_CtlError>
              break;
 800686a:	e017      	b.n	800689c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	885b      	ldrh	r3, [r3, #2]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d112      	bne.n	800689a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006874:	7bbb      	ldrb	r3, [r7, #14]
 8006876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800687a:	2b00      	cmp	r3, #0
 800687c:	d004      	beq.n	8006888 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800687e:	7bbb      	ldrb	r3, [r7, #14]
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f004 fbc9 	bl	800b01a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fc97 	bl	80071bc <USBD_CtlSendStatus>
              }
              break;
 800688e:	e004      	b.n	800689a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006890:	6839      	ldr	r1, [r7, #0]
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fbca 	bl	800702c <USBD_CtlError>
              break;
 8006898:	e000      	b.n	800689c <USBD_StdEPReq+0x14c>
              break;
 800689a:	bf00      	nop
          }
          break;
 800689c:	e0aa      	b.n	80069f4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d002      	beq.n	80068ae <USBD_StdEPReq+0x15e>
 80068a8:	2b03      	cmp	r3, #3
 80068aa:	d032      	beq.n	8006912 <USBD_StdEPReq+0x1c2>
 80068ac:	e097      	b.n	80069de <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068ae:	7bbb      	ldrb	r3, [r7, #14]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d007      	beq.n	80068c4 <USBD_StdEPReq+0x174>
 80068b4:	7bbb      	ldrb	r3, [r7, #14]
 80068b6:	2b80      	cmp	r3, #128	; 0x80
 80068b8:	d004      	beq.n	80068c4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80068ba:	6839      	ldr	r1, [r7, #0]
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fbb5 	bl	800702c <USBD_CtlError>
                break;
 80068c2:	e091      	b.n	80069e8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	da0b      	bge.n	80068e4 <USBD_StdEPReq+0x194>
 80068cc:	7bbb      	ldrb	r3, [r7, #14]
 80068ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	3310      	adds	r3, #16
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	4413      	add	r3, r2
 80068e0:	3304      	adds	r3, #4
 80068e2:	e00b      	b.n	80068fc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068e4:	7bbb      	ldrb	r3, [r7, #14]
 80068e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068ea:	4613      	mov	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	4413      	add	r3, r2
 80068fa:	3304      	adds	r3, #4
 80068fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	2200      	movs	r2, #0
 8006902:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2202      	movs	r2, #2
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fbf8 	bl	8007100 <USBD_CtlSendData>
              break;
 8006910:	e06a      	b.n	80069e8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006912:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006916:	2b00      	cmp	r3, #0
 8006918:	da11      	bge.n	800693e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800691a:	7bbb      	ldrb	r3, [r7, #14]
 800691c:	f003 020f 	and.w	r2, r3, #15
 8006920:	6879      	ldr	r1, [r7, #4]
 8006922:	4613      	mov	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	440b      	add	r3, r1
 800692c:	3318      	adds	r3, #24
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d117      	bne.n	8006964 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006934:	6839      	ldr	r1, [r7, #0]
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fb78 	bl	800702c <USBD_CtlError>
                  break;
 800693c:	e054      	b.n	80069e8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800693e:	7bbb      	ldrb	r3, [r7, #14]
 8006940:	f003 020f 	and.w	r2, r3, #15
 8006944:	6879      	ldr	r1, [r7, #4]
 8006946:	4613      	mov	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	440b      	add	r3, r1
 8006950:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d104      	bne.n	8006964 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fb65 	bl	800702c <USBD_CtlError>
                  break;
 8006962:	e041      	b.n	80069e8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006964:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006968:	2b00      	cmp	r3, #0
 800696a:	da0b      	bge.n	8006984 <USBD_StdEPReq+0x234>
 800696c:	7bbb      	ldrb	r3, [r7, #14]
 800696e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006972:	4613      	mov	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	3310      	adds	r3, #16
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	4413      	add	r3, r2
 8006980:	3304      	adds	r3, #4
 8006982:	e00b      	b.n	800699c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006984:	7bbb      	ldrb	r3, [r7, #14]
 8006986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	4413      	add	r3, r2
 800699a:	3304      	adds	r3, #4
 800699c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800699e:	7bbb      	ldrb	r3, [r7, #14]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <USBD_StdEPReq+0x25a>
 80069a4:	7bbb      	ldrb	r3, [r7, #14]
 80069a6:	2b80      	cmp	r3, #128	; 0x80
 80069a8:	d103      	bne.n	80069b2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	2200      	movs	r2, #0
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	e00e      	b.n	80069d0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80069b2:	7bbb      	ldrb	r3, [r7, #14]
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f004 fb4e 	bl	800b058 <USBD_LL_IsStallEP>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d003      	beq.n	80069ca <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2201      	movs	r2, #1
 80069c6:	601a      	str	r2, [r3, #0]
 80069c8:	e002      	b.n	80069d0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2200      	movs	r2, #0
 80069ce:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2202      	movs	r2, #2
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fb92 	bl	8007100 <USBD_CtlSendData>
              break;
 80069dc:	e004      	b.n	80069e8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fb23 	bl	800702c <USBD_CtlError>
              break;
 80069e6:	bf00      	nop
          }
          break;
 80069e8:	e004      	b.n	80069f4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fb1d 	bl	800702c <USBD_CtlError>
          break;
 80069f2:	bf00      	nop
      }
      break;
 80069f4:	e004      	b.n	8006a00 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fb17 	bl	800702c <USBD_CtlError>
      break;
 80069fe:	bf00      	nop
  }

  return ret;
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
	...

08006a0c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	885b      	ldrh	r3, [r3, #2]
 8006a26:	0a1b      	lsrs	r3, r3, #8
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	2b06      	cmp	r3, #6
 8006a2e:	f200 8128 	bhi.w	8006c82 <USBD_GetDescriptor+0x276>
 8006a32:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <USBD_GetDescriptor+0x2c>)
 8006a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a38:	08006a55 	.word	0x08006a55
 8006a3c:	08006a6d 	.word	0x08006a6d
 8006a40:	08006aad 	.word	0x08006aad
 8006a44:	08006c83 	.word	0x08006c83
 8006a48:	08006c83 	.word	0x08006c83
 8006a4c:	08006c23 	.word	0x08006c23
 8006a50:	08006c4f 	.word	0x08006c4f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	7c12      	ldrb	r2, [r2, #16]
 8006a60:	f107 0108 	add.w	r1, r7, #8
 8006a64:	4610      	mov	r0, r2
 8006a66:	4798      	blx	r3
 8006a68:	60f8      	str	r0, [r7, #12]
      break;
 8006a6a:	e112      	b.n	8006c92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	7c1b      	ldrb	r3, [r3, #16]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10d      	bne.n	8006a90 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7c:	f107 0208 	add.w	r2, r7, #8
 8006a80:	4610      	mov	r0, r2
 8006a82:	4798      	blx	r3
 8006a84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a8e:	e100      	b.n	8006c92 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	f107 0208 	add.w	r2, r7, #8
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	4798      	blx	r3
 8006aa0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	701a      	strb	r2, [r3, #0]
      break;
 8006aaa:	e0f2      	b.n	8006c92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	885b      	ldrh	r3, [r3, #2]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b05      	cmp	r3, #5
 8006ab4:	f200 80ac 	bhi.w	8006c10 <USBD_GetDescriptor+0x204>
 8006ab8:	a201      	add	r2, pc, #4	; (adr r2, 8006ac0 <USBD_GetDescriptor+0xb4>)
 8006aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abe:	bf00      	nop
 8006ac0:	08006ad9 	.word	0x08006ad9
 8006ac4:	08006b0d 	.word	0x08006b0d
 8006ac8:	08006b41 	.word	0x08006b41
 8006acc:	08006b75 	.word	0x08006b75
 8006ad0:	08006ba9 	.word	0x08006ba9
 8006ad4:	08006bdd 	.word	0x08006bdd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00b      	beq.n	8006afc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	7c12      	ldrb	r2, [r2, #16]
 8006af0:	f107 0108 	add.w	r1, r7, #8
 8006af4:	4610      	mov	r0, r2
 8006af6:	4798      	blx	r3
 8006af8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006afa:	e091      	b.n	8006c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fa94 	bl	800702c <USBD_CtlError>
            err++;
 8006b04:	7afb      	ldrb	r3, [r7, #11]
 8006b06:	3301      	adds	r3, #1
 8006b08:	72fb      	strb	r3, [r7, #11]
          break;
 8006b0a:	e089      	b.n	8006c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00b      	beq.n	8006b30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	7c12      	ldrb	r2, [r2, #16]
 8006b24:	f107 0108 	add.w	r1, r7, #8
 8006b28:	4610      	mov	r0, r2
 8006b2a:	4798      	blx	r3
 8006b2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b2e:	e077      	b.n	8006c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fa7a 	bl	800702c <USBD_CtlError>
            err++;
 8006b38:	7afb      	ldrb	r3, [r7, #11]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b3e:	e06f      	b.n	8006c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00b      	beq.n	8006b64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	7c12      	ldrb	r2, [r2, #16]
 8006b58:	f107 0108 	add.w	r1, r7, #8
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	4798      	blx	r3
 8006b60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b62:	e05d      	b.n	8006c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fa60 	bl	800702c <USBD_CtlError>
            err++;
 8006b6c:	7afb      	ldrb	r3, [r7, #11]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	72fb      	strb	r3, [r7, #11]
          break;
 8006b72:	e055      	b.n	8006c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00b      	beq.n	8006b98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	7c12      	ldrb	r2, [r2, #16]
 8006b8c:	f107 0108 	add.w	r1, r7, #8
 8006b90:	4610      	mov	r0, r2
 8006b92:	4798      	blx	r3
 8006b94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b96:	e043      	b.n	8006c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fa46 	bl	800702c <USBD_CtlError>
            err++;
 8006ba0:	7afb      	ldrb	r3, [r7, #11]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ba6:	e03b      	b.n	8006c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00b      	beq.n	8006bcc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	7c12      	ldrb	r2, [r2, #16]
 8006bc0:	f107 0108 	add.w	r1, r7, #8
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	4798      	blx	r3
 8006bc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bca:	e029      	b.n	8006c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fa2c 	bl	800702c <USBD_CtlError>
            err++;
 8006bd4:	7afb      	ldrb	r3, [r7, #11]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8006bda:	e021      	b.n	8006c20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00b      	beq.n	8006c00 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	7c12      	ldrb	r2, [r2, #16]
 8006bf4:	f107 0108 	add.w	r1, r7, #8
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	4798      	blx	r3
 8006bfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bfe:	e00f      	b.n	8006c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c00:	6839      	ldr	r1, [r7, #0]
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fa12 	bl	800702c <USBD_CtlError>
            err++;
 8006c08:	7afb      	ldrb	r3, [r7, #11]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c0e:	e007      	b.n	8006c20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006c10:	6839      	ldr	r1, [r7, #0]
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fa0a 	bl	800702c <USBD_CtlError>
          err++;
 8006c18:	7afb      	ldrb	r3, [r7, #11]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006c1e:	e038      	b.n	8006c92 <USBD_GetDescriptor+0x286>
 8006c20:	e037      	b.n	8006c92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	7c1b      	ldrb	r3, [r3, #16]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d109      	bne.n	8006c3e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c32:	f107 0208 	add.w	r2, r7, #8
 8006c36:	4610      	mov	r0, r2
 8006c38:	4798      	blx	r3
 8006c3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c3c:	e029      	b.n	8006c92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f9f3 	bl	800702c <USBD_CtlError>
        err++;
 8006c46:	7afb      	ldrb	r3, [r7, #11]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	72fb      	strb	r3, [r7, #11]
      break;
 8006c4c:	e021      	b.n	8006c92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	7c1b      	ldrb	r3, [r3, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10d      	bne.n	8006c72 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5e:	f107 0208 	add.w	r2, r7, #8
 8006c62:	4610      	mov	r0, r2
 8006c64:	4798      	blx	r3
 8006c66:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	2207      	movs	r2, #7
 8006c6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c70:	e00f      	b.n	8006c92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f9d9 	bl	800702c <USBD_CtlError>
        err++;
 8006c7a:	7afb      	ldrb	r3, [r7, #11]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	72fb      	strb	r3, [r7, #11]
      break;
 8006c80:	e007      	b.n	8006c92 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f9d1 	bl	800702c <USBD_CtlError>
      err++;
 8006c8a:	7afb      	ldrb	r3, [r7, #11]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	72fb      	strb	r3, [r7, #11]
      break;
 8006c90:	bf00      	nop
  }

  if (err != 0U)
 8006c92:	7afb      	ldrb	r3, [r7, #11]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d11c      	bne.n	8006cd2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006c98:	893b      	ldrh	r3, [r7, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d011      	beq.n	8006cc2 <USBD_GetDescriptor+0x2b6>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	88db      	ldrh	r3, [r3, #6]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00d      	beq.n	8006cc2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	88da      	ldrh	r2, [r3, #6]
 8006caa:	893b      	ldrh	r3, [r7, #8]
 8006cac:	4293      	cmp	r3, r2
 8006cae:	bf28      	it	cs
 8006cb0:	4613      	movcs	r3, r2
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006cb6:	893b      	ldrh	r3, [r7, #8]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	68f9      	ldr	r1, [r7, #12]
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fa1f 	bl	8007100 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	88db      	ldrh	r3, [r3, #6]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d104      	bne.n	8006cd4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fa76 	bl	80071bc <USBD_CtlSendStatus>
 8006cd0:	e000      	b.n	8006cd4 <USBD_GetDescriptor+0x2c8>
    return;
 8006cd2:	bf00      	nop
    }
  }
}
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop

08006cdc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	889b      	ldrh	r3, [r3, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d130      	bne.n	8006d50 <USBD_SetAddress+0x74>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	88db      	ldrh	r3, [r3, #6]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d12c      	bne.n	8006d50 <USBD_SetAddress+0x74>
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	885b      	ldrh	r3, [r3, #2]
 8006cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8006cfc:	d828      	bhi.n	8006d50 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	885b      	ldrh	r3, [r3, #2]
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d10:	2b03      	cmp	r3, #3
 8006d12:	d104      	bne.n	8006d1e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f988 	bl	800702c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d1c:	e01c      	b.n	8006d58 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	7bfa      	ldrb	r2, [r7, #15]
 8006d22:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006d26:	7bfb      	ldrb	r3, [r7, #15]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f004 f9b9 	bl	800b0a2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fa43 	bl	80071bc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d004      	beq.n	8006d46 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d44:	e008      	b.n	8006d58 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d4e:	e003      	b.n	8006d58 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f96a 	bl	800702c <USBD_CtlError>
  }
}
 8006d58:	bf00      	nop
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	885b      	ldrh	r3, [r3, #2]
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	4b41      	ldr	r3, [pc, #260]	; (8006e78 <USBD_SetConfig+0x118>)
 8006d72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d74:	4b40      	ldr	r3, [pc, #256]	; (8006e78 <USBD_SetConfig+0x118>)
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d904      	bls.n	8006d86 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f954 	bl	800702c <USBD_CtlError>
 8006d84:	e075      	b.n	8006e72 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d002      	beq.n	8006d96 <USBD_SetConfig+0x36>
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d023      	beq.n	8006ddc <USBD_SetConfig+0x7c>
 8006d94:	e062      	b.n	8006e5c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006d96:	4b38      	ldr	r3, [pc, #224]	; (8006e78 <USBD_SetConfig+0x118>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d01a      	beq.n	8006dd4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006d9e:	4b36      	ldr	r3, [pc, #216]	; (8006e78 <USBD_SetConfig+0x118>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2203      	movs	r2, #3
 8006dac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006db0:	4b31      	ldr	r3, [pc, #196]	; (8006e78 <USBD_SetConfig+0x118>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7ff f9f3 	bl	80061a2 <USBD_SetClassConfig>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d104      	bne.n	8006dcc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f931 	bl	800702c <USBD_CtlError>
            return;
 8006dca:	e052      	b.n	8006e72 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f9f5 	bl	80071bc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006dd2:	e04e      	b.n	8006e72 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f9f1 	bl	80071bc <USBD_CtlSendStatus>
        break;
 8006dda:	e04a      	b.n	8006e72 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006ddc:	4b26      	ldr	r3, [pc, #152]	; (8006e78 <USBD_SetConfig+0x118>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d112      	bne.n	8006e0a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006dec:	4b22      	ldr	r3, [pc, #136]	; (8006e78 <USBD_SetConfig+0x118>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006df6:	4b20      	ldr	r3, [pc, #128]	; (8006e78 <USBD_SetConfig+0x118>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7ff f9ef 	bl	80061e0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f9da 	bl	80071bc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006e08:	e033      	b.n	8006e72 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006e0a:	4b1b      	ldr	r3, [pc, #108]	; (8006e78 <USBD_SetConfig+0x118>)
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d01d      	beq.n	8006e54 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7ff f9dd 	bl	80061e0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006e26:	4b14      	ldr	r3, [pc, #80]	; (8006e78 <USBD_SetConfig+0x118>)
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006e30:	4b11      	ldr	r3, [pc, #68]	; (8006e78 <USBD_SetConfig+0x118>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff f9b3 	bl	80061a2 <USBD_SetClassConfig>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d104      	bne.n	8006e4c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f8f1 	bl	800702c <USBD_CtlError>
            return;
 8006e4a:	e012      	b.n	8006e72 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f9b5 	bl	80071bc <USBD_CtlSendStatus>
        break;
 8006e52:	e00e      	b.n	8006e72 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f9b1 	bl	80071bc <USBD_CtlSendStatus>
        break;
 8006e5a:	e00a      	b.n	8006e72 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f8e4 	bl	800702c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006e64:	4b04      	ldr	r3, [pc, #16]	; (8006e78 <USBD_SetConfig+0x118>)
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff f9b8 	bl	80061e0 <USBD_ClrClassConfig>
        break;
 8006e70:	bf00      	nop
    }
  }
}
 8006e72:	3708      	adds	r7, #8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	20000384 	.word	0x20000384

08006e7c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	88db      	ldrh	r3, [r3, #6]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d004      	beq.n	8006e98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 f8cb 	bl	800702c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006e96:	e021      	b.n	8006edc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	db17      	blt.n	8006ed2 <USBD_GetConfig+0x56>
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	dd02      	ble.n	8006eac <USBD_GetConfig+0x30>
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d00b      	beq.n	8006ec2 <USBD_GetConfig+0x46>
 8006eaa:	e012      	b.n	8006ed2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f920 	bl	8007100 <USBD_CtlSendData>
        break;
 8006ec0:	e00c      	b.n	8006edc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f918 	bl	8007100 <USBD_CtlSendData>
        break;
 8006ed0:	e004      	b.n	8006edc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f8a9 	bl	800702c <USBD_CtlError>
        break;
 8006eda:	bf00      	nop
}
 8006edc:	bf00      	nop
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d81e      	bhi.n	8006f38 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	88db      	ldrh	r3, [r3, #6]
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d004      	beq.n	8006f0c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006f02:	6839      	ldr	r1, [r7, #0]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f891 	bl	800702c <USBD_CtlError>
        break;
 8006f0a:	e01a      	b.n	8006f42 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d005      	beq.n	8006f28 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	f043 0202 	orr.w	r2, r3, #2
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	330c      	adds	r3, #12
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f8e5 	bl	8007100 <USBD_CtlSendData>
      break;
 8006f36:	e004      	b.n	8006f42 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006f38:	6839      	ldr	r1, [r7, #0]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f876 	bl	800702c <USBD_CtlError>
      break;
 8006f40:	bf00      	nop
  }
}
 8006f42:	bf00      	nop
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b082      	sub	sp, #8
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	885b      	ldrh	r3, [r3, #2]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d106      	bne.n	8006f6a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f929 	bl	80071bc <USBD_CtlSendStatus>
  }
}
 8006f6a:	bf00      	nop
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b082      	sub	sp, #8
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f82:	3b01      	subs	r3, #1
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d80b      	bhi.n	8006fa0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	885b      	ldrh	r3, [r3, #2]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d10c      	bne.n	8006faa <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 f90f 	bl	80071bc <USBD_CtlSendStatus>
      }
      break;
 8006f9e:	e004      	b.n	8006faa <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f842 	bl	800702c <USBD_CtlError>
      break;
 8006fa8:	e000      	b.n	8006fac <USBD_ClrFeature+0x3a>
      break;
 8006faa:	bf00      	nop
  }
}
 8006fac:	bf00      	nop
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781a      	ldrb	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	785a      	ldrb	r2, [r3, #1]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	3302      	adds	r3, #2
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	3303      	adds	r3, #3
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	021b      	lsls	r3, r3, #8
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	4413      	add	r3, r2
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	3304      	adds	r3, #4
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	3305      	adds	r3, #5
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	021b      	lsls	r3, r3, #8
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	4413      	add	r3, r2
 8007000:	b29a      	uxth	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	3306      	adds	r3, #6
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	b29a      	uxth	r2, r3
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	3307      	adds	r3, #7
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	b29b      	uxth	r3, r3
 8007016:	021b      	lsls	r3, r3, #8
 8007018:	b29b      	uxth	r3, r3
 800701a:	4413      	add	r3, r2
 800701c:	b29a      	uxth	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	80da      	strh	r2, [r3, #6]

}
 8007022:	bf00      	nop
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	bc80      	pop	{r7}
 800702a:	4770      	bx	lr

0800702c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007036:	2180      	movs	r1, #128	; 0x80
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f003 ffcf 	bl	800afdc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800703e:	2100      	movs	r1, #0
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f003 ffcb 	bl	800afdc <USBD_LL_StallEP>
}
 8007046:	bf00      	nop
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b086      	sub	sp, #24
 8007052:	af00      	add	r7, sp, #0
 8007054:	60f8      	str	r0, [r7, #12]
 8007056:	60b9      	str	r1, [r7, #8]
 8007058:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d032      	beq.n	80070ca <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 f834 	bl	80070d2 <USBD_GetLen>
 800706a:	4603      	mov	r3, r0
 800706c:	3301      	adds	r3, #1
 800706e:	b29b      	uxth	r3, r3
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	b29a      	uxth	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007078:	7dfb      	ldrb	r3, [r7, #23]
 800707a:	1c5a      	adds	r2, r3, #1
 800707c:	75fa      	strb	r2, [r7, #23]
 800707e:	461a      	mov	r2, r3
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	4413      	add	r3, r2
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	7812      	ldrb	r2, [r2, #0]
 8007088:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	1c5a      	adds	r2, r3, #1
 800708e:	75fa      	strb	r2, [r7, #23]
 8007090:	461a      	mov	r2, r3
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	4413      	add	r3, r2
 8007096:	2203      	movs	r2, #3
 8007098:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800709a:	e012      	b.n	80070c2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	60fa      	str	r2, [r7, #12]
 80070a2:	7dfa      	ldrb	r2, [r7, #23]
 80070a4:	1c51      	adds	r1, r2, #1
 80070a6:	75f9      	strb	r1, [r7, #23]
 80070a8:	4611      	mov	r1, r2
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	440a      	add	r2, r1
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	75fa      	strb	r2, [r7, #23]
 80070b8:	461a      	mov	r2, r3
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	4413      	add	r3, r2
 80070be:	2200      	movs	r2, #0
 80070c0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1e8      	bne.n	800709c <USBD_GetString+0x4e>
    }
  }
}
 80070ca:	bf00      	nop
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b085      	sub	sp, #20
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80070de:	e005      	b.n	80070ec <USBD_GetLen+0x1a>
  {
    len++;
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
 80070e2:	3301      	adds	r3, #1
 80070e4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3301      	adds	r3, #1
 80070ea:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1f5      	bne.n	80070e0 <USBD_GetLen+0xe>
  }

  return len;
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3714      	adds	r7, #20
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bc80      	pop	{r7}
 80070fe:	4770      	bx	lr

08007100 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	4613      	mov	r3, r2
 800710c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2202      	movs	r2, #2
 8007112:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007116:	88fa      	ldrh	r2, [r7, #6]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800711c:	88fa      	ldrh	r2, [r7, #6]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007122:	88fb      	ldrh	r3, [r7, #6]
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	2100      	movs	r1, #0
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f003 ffd9 	bl	800b0e0 <USBD_LL_Transmit>

  return USBD_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	4613      	mov	r3, r2
 8007144:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007146:	88fb      	ldrh	r3, [r7, #6]
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	2100      	movs	r1, #0
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f003 ffc7 	bl	800b0e0 <USBD_LL_Transmit>

  return USBD_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	4613      	mov	r3, r2
 8007168:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2203      	movs	r2, #3
 800716e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007172:	88fa      	ldrh	r2, [r7, #6]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800717a:	88fa      	ldrh	r2, [r7, #6]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007182:	88fb      	ldrh	r3, [r7, #6]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	2100      	movs	r1, #0
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f003 ffcc 	bl	800b126 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	4613      	mov	r3, r2
 80071a4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071a6:	88fb      	ldrh	r3, [r7, #6]
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	2100      	movs	r1, #0
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f003 ffba 	bl	800b126 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2204      	movs	r2, #4
 80071c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80071cc:	2300      	movs	r3, #0
 80071ce:	2200      	movs	r2, #0
 80071d0:	2100      	movs	r1, #0
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f003 ff84 	bl	800b0e0 <USBD_LL_Transmit>

  return USBD_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b082      	sub	sp, #8
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2205      	movs	r2, #5
 80071ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071f2:	2300      	movs	r3, #0
 80071f4:	2200      	movs	r2, #0
 80071f6:	2100      	movs	r1, #0
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f003 ff94 	bl	800b126 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007208:	b590      	push	{r4, r7, lr}
 800720a:	b08f      	sub	sp, #60	; 0x3c
 800720c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800720e:	f7f9 fc5b 	bl	8000ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007212:	f000 fa0f 	bl	8007634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007216:	f000 fbb7 	bl	8007988 <MX_GPIO_Init>
  MX_DMA_Init();
 800721a:	f000 fb97 	bl	800794c <MX_DMA_Init>
  MX_SPI2_Init();
 800721e:	f000 fb11 	bl	8007844 <MX_SPI2_Init>
  MX_ADC1_Init();
 8007222:	f000 fa65 	bl	80076f0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8007226:	f000 fadf 	bl	80077e8 <MX_I2C1_Init>
  MX_TIM3_Init();
 800722a:	f000 fb41 	bl	80078b0 <MX_TIM3_Init>
  MX_ADC2_Init();
 800722e:	f000 fa9d 	bl	800776c <MX_ADC2_Init>
  MX_USB_DEVICE_Init();
 8007232:	f003 fc79 	bl	800ab28 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

//SETUP
    //Power INIT
  HAL_Delay(500); //wait .5 sec before power on. prevents false positives
 8007236:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800723a:	f7f9 fca7 	bl	8000b8c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8, GPIO_PIN_SET);//SoftPower ON
 800723e:	2201      	movs	r2, #1
 8007240:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007244:	48bf      	ldr	r0, [pc, #764]	; (8007544 <main+0x33c>)
 8007246:	f7fa fc46 	bl	8001ad6 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8, GPIO_PIN_RESET);//SoftPower OFF

  //REQUIRED to set all the end frame bytes to zero (50uS ws2812 reset)
  for (int x=(NUMLEDS*EXPANDFACTOR); x<(NUMLEDS*EXPANDFACTOR)+SPILOWTIME; x++) myData[x] = 0;
 800724a:	f44f 63bd 	mov.w	r3, #1512	; 0x5e8
 800724e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007250:	e007      	b.n	8007262 <main+0x5a>
 8007252:	4abd      	ldr	r2, [pc, #756]	; (8007548 <main+0x340>)
 8007254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007256:	4413      	add	r3, r2
 8007258:	2200      	movs	r2, #0
 800725a:	701a      	strb	r2, [r3, #0]
 800725c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725e:	3301      	adds	r3, #1
 8007260:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007264:	f240 6205 	movw	r2, #1541	; 0x605
 8007268:	4293      	cmp	r3, r2
 800726a:	ddf2      	ble.n	8007252 <main+0x4a>

  SSD1306_Init();  // initialize (modified ssd1306.c with reset pin code)
 800726c:	f002 fdd4 	bl	8009e18 <SSD1306_Init>

  HAL_ADC_Start(&hadc1); //starts the adc configured in continuous mode (cubeMX)
 8007270:	48b6      	ldr	r0, [pc, #728]	; (800754c <main+0x344>)
 8007272:	f7f9 fd85 	bl	8000d80 <HAL_ADC_Start>

  HAL_ADC_Start(&hadc2); //start adc2 in continuous mode
 8007276:	48b6      	ldr	r0, [pc, #728]	; (8007550 <main+0x348>)
 8007278:	f7f9 fd82 	bl	8000d80 <HAL_ADC_Start>


SSD1306_GotoXY (0,0);
 800727c:	2100      	movs	r1, #0
 800727e:	2000      	movs	r0, #0
 8007280:	f002 ff90 	bl	800a1a4 <SSD1306_GotoXY>
SSD1306_Clear();
 8007284:	f003 f991 	bl	800a5aa <SSD1306_Clear>
SSD1306_DrawBitmap(0,0,Boot, 128, 32, 1);
 8007288:	2301      	movs	r3, #1
 800728a:	9301      	str	r3, [sp, #4]
 800728c:	2320      	movs	r3, #32
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	2380      	movs	r3, #128	; 0x80
 8007292:	4ab0      	ldr	r2, [pc, #704]	; (8007554 <main+0x34c>)
 8007294:	2100      	movs	r1, #0
 8007296:	2000      	movs	r0, #0
 8007298:	f002 fd56 	bl	8009d48 <SSD1306_DrawBitmap>
SSD1306_UpdateScreen(); //display
 800729c:	f002 fede 	bl	800a05c <SSD1306_UpdateScreen>
HAL_Delay (500);
 80072a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80072a4:	f7f9 fc72 	bl	8000b8c <HAL_Delay>
SSD1306_Clear();
 80072a8:	f003 f97f 	bl	800a5aa <SSD1306_Clear>

BlankScreen(BLACK);
 80072ac:	2000      	movs	r0, #0
 80072ae:	f001 fc2d 	bl	8008b0c <BlankScreen>
printStringWithShiftL(" STARIOS GEAR 2020   ", 40); //Send Lscrolling Text (send car array)
 80072b2:	2128      	movs	r1, #40	; 0x28
 80072b4:	48a8      	ldr	r0, [pc, #672]	; (8007558 <main+0x350>)
 80072b6:	f001 fcdb 	bl	8008c70 <printStringWithShiftL>
BlankScreen(BLACK);
 80072ba:	2000      	movs	r0, #0
 80072bc:	f001 fc26 	bl	8008b0c <BlankScreen>


for(int i=0; i<6; i++){//buzzer test.
 80072c0:	2300      	movs	r3, #0
 80072c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80072c4:	e038      	b.n	8007338 <main+0x130>
  for(int x=0; x<tonedelay[i]*40; x++){
 80072c6:	2300      	movs	r3, #0
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
 80072ca:	e01a      	b.n	8007302 <main+0xfa>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0, GPIO_PIN_SET);
 80072cc:	2201      	movs	r2, #1
 80072ce:	2101      	movs	r1, #1
 80072d0:	489c      	ldr	r0, [pc, #624]	; (8007544 <main+0x33c>)
 80072d2:	f7fa fc00 	bl	8001ad6 <HAL_GPIO_WritePin>
    HAL_Delay(tones[i]);
 80072d6:	4aa1      	ldr	r2, [pc, #644]	; (800755c <main+0x354>)
 80072d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072de:	4618      	mov	r0, r3
 80072e0:	f7f9 fc54 	bl	8000b8c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0, GPIO_PIN_RESET);
 80072e4:	2200      	movs	r2, #0
 80072e6:	2101      	movs	r1, #1
 80072e8:	4896      	ldr	r0, [pc, #600]	; (8007544 <main+0x33c>)
 80072ea:	f7fa fbf4 	bl	8001ad6 <HAL_GPIO_WritePin>
    HAL_Delay(tones[i]);
 80072ee:	4a9b      	ldr	r2, [pc, #620]	; (800755c <main+0x354>)
 80072f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7f9 fc48 	bl	8000b8c <HAL_Delay>
  for(int x=0; x<tonedelay[i]*40; x++){
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	3301      	adds	r3, #1
 8007300:	627b      	str	r3, [r7, #36]	; 0x24
 8007302:	4a97      	ldr	r2, [pc, #604]	; (8007560 <main+0x358>)
 8007304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007306:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800730a:	4613      	mov	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	00db      	lsls	r3, r3, #3
 8007312:	461a      	mov	r2, r3
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	4293      	cmp	r3, r2
 8007318:	dbd8      	blt.n	80072cc <main+0xc4>
  }
  HAL_Delay(tonedelay[i]*25);
 800731a:	4a91      	ldr	r2, [pc, #580]	; (8007560 <main+0x358>)
 800731c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007322:	4613      	mov	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	009a      	lsls	r2, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	4618      	mov	r0, r3
 800732e:	f7f9 fc2d 	bl	8000b8c <HAL_Delay>
for(int i=0; i<6; i++){//buzzer test.
 8007332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007334:	3301      	adds	r3, #1
 8007336:	62bb      	str	r3, [r7, #40]	; 0x28
 8007338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733a:	2b05      	cmp	r3, #5
 800733c:	ddc3      	ble.n	80072c6 <main+0xbe>
	}
*/
//END RGB TESTs


HAL_TIM_Base_Start_IT(&htim3); //start Timer 3. used for FFT sampling
 800733e:	4889      	ldr	r0, [pc, #548]	; (8007564 <main+0x35c>)
 8007340:	f7fc ff25 	bl	800418e <HAL_TIM_Base_Start_IT>

for(int x=0; x<10000; x++){ //infinite loop for testing FFT (working pretty will)
 8007344:	2300      	movs	r3, #0
 8007346:	623b      	str	r3, [r7, #32]
 8007348:	e0a7      	b.n	800749a <main+0x292>
	while (!n_done); // empty loop until N ADC's have occured in the TIM3 ISR
 800734a:	bf00      	nop
 800734c:	4b86      	ldr	r3, [pc, #536]	; (8007568 <main+0x360>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d0fa      	beq.n	800734c <main+0x144>
	for (int i = 0; i < mySamples; i++) IMX[i] = 0.0; //zero out complex part
 8007356:	2300      	movs	r3, #0
 8007358:	61fb      	str	r3, [r7, #28]
 800735a:	e00c      	b.n	8007376 <main+0x16e>
 800735c:	4a83      	ldr	r2, [pc, #524]	; (800756c <main+0x364>)
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	441a      	add	r2, r3
 8007364:	f04f 0300 	mov.w	r3, #0
 8007368:	f04f 0400 	mov.w	r4, #0
 800736c:	e9c2 3400 	strd	r3, r4, [r2]
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	3301      	adds	r3, #1
 8007374:	61fb      	str	r3, [r7, #28]
 8007376:	2340      	movs	r3, #64	; 0x40
 8007378:	461a      	mov	r2, r3
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	4293      	cmp	r3, r2
 800737e:	dbed      	blt.n	800735c <main+0x154>
	Windowing(REX, mySamples, FFT_WIN_TYP_HANN, FFT_FORWARD);
 8007380:	2140      	movs	r1, #64	; 0x40
 8007382:	2301      	movs	r3, #1
 8007384:	2202      	movs	r2, #2
 8007386:	487a      	ldr	r0, [pc, #488]	; (8007570 <main+0x368>)
 8007388:	f000 fe0e 	bl	8007fa8 <Windowing>
	ComputeFFT(REX, IMX, mySamples, Exponent(mySamples),FFT_FORWARD); //perform the exponent in setup to optimize
 800738c:	2440      	movs	r4, #64	; 0x40
 800738e:	2340      	movs	r3, #64	; 0x40
 8007390:	4618      	mov	r0, r3
 8007392:	f000 fdd7 	bl	8007f44 <Exponent>
 8007396:	4603      	mov	r3, r0
 8007398:	461a      	mov	r2, r3
 800739a:	2301      	movs	r3, #1
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	4613      	mov	r3, r2
 80073a0:	4622      	mov	r2, r4
 80073a2:	4972      	ldr	r1, [pc, #456]	; (800756c <main+0x364>)
 80073a4:	4872      	ldr	r0, [pc, #456]	; (8007570 <main+0x368>)
 80073a6:	f000 fbd5 	bl	8007b54 <ComputeFFT>
	HAL_TIM_Base_Stop_IT(&htim3); //stop Timer 3
 80073aa:	486e      	ldr	r0, [pc, #440]	; (8007564 <main+0x35c>)
 80073ac:	f7fc ff12 	bl	80041d4 <HAL_TIM_Base_Stop_IT>
	SSD1306_Puti(0, 6, 7-checkbuttons(), 1); //print button press test
 80073b0:	f000 fb82 	bl	8007ab8 <checkbuttons>
 80073b4:	4603      	mov	r3, r0
 80073b6:	f1c3 0207 	rsb	r2, r3, #7
 80073ba:	2301      	movs	r3, #1
 80073bc:	2106      	movs	r1, #6
 80073be:	2000      	movs	r0, #0
 80073c0:	f002 fe00 	bl	8009fc4 <SSD1306_Puti>


	if(x%200==0) batteryLevel = read_bat_adc(); //only update the battery monitor every 1000
 80073c4:	6a3a      	ldr	r2, [r7, #32]
 80073c6:	4b6b      	ldr	r3, [pc, #428]	; (8007574 <main+0x36c>)
 80073c8:	fb83 1302 	smull	r1, r3, r3, r2
 80073cc:	1199      	asrs	r1, r3, #6
 80073ce:	17d3      	asrs	r3, r2, #31
 80073d0:	1acb      	subs	r3, r1, r3
 80073d2:	21c8      	movs	r1, #200	; 0xc8
 80073d4:	fb01 f303 	mul.w	r3, r1, r3
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d105      	bne.n	80073ea <main+0x1e2>
 80073de:	f001 f963 	bl	80086a8 <read_bat_adc>
 80073e2:	4603      	mov	r3, r0
 80073e4:	461a      	mov	r2, r3
 80073e6:	4b64      	ldr	r3, [pc, #400]	; (8007578 <main+0x370>)
 80073e8:	801a      	strh	r2, [r3, #0]
	SSD1306_Puti(20, 6, batteryLevel, 4); //print battery level test
 80073ea:	4b63      	ldr	r3, [pc, #396]	; (8007578 <main+0x370>)
 80073ec:	881b      	ldrh	r3, [r3, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	2304      	movs	r3, #4
 80073f2:	2106      	movs	r1, #6
 80073f4:	2014      	movs	r0, #20
 80073f6:	f002 fde5 	bl	8009fc4 <SSD1306_Puti>
	SSD1306_DrawFilledRectangle(20, 0, (uint16_t) map(batteryLevel,0,4096,0,80) , 2 , 1); //only run this every few minutes or so
 80073fa:	4b5f      	ldr	r3, [pc, #380]	; (8007578 <main+0x370>)
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	4618      	mov	r0, r3
 8007400:	2350      	movs	r3, #80	; 0x50
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	2300      	movs	r3, #0
 8007406:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800740a:	2100      	movs	r1, #0
 800740c:	f001 fcc3 	bl	8008d96 <map>
 8007410:	4603      	mov	r3, r0
 8007412:	b29a      	uxth	r2, r3
 8007414:	2301      	movs	r3, #1
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	2302      	movs	r3, #2
 800741a:	2100      	movs	r1, #0
 800741c:	2014      	movs	r0, #20
 800741e:	f003 f877 	bl	800a510 <SSD1306_DrawFilledRectangle>

	if(checkUSBConnected()){
 8007422:	f000 fb6b 	bl	8007afc <checkUSBConnected>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d026      	beq.n	800747a <main+0x272>
		USBdataEnable(1); //enable USB Data+ (DP)
 800742c:	2001      	movs	r0, #1
 800742e:	f000 fb77 	bl	8007b20 <USBdataEnable>
		SSD1306_GotoXY (100,0);
 8007432:	2100      	movs	r1, #0
 8007434:	2064      	movs	r0, #100	; 0x64
 8007436:	f002 feb5 	bl	800a1a4 <SSD1306_GotoXY>
		SSD1306_Puts ("USB", &Font_7x10, 1);; //1 if USB plugged in, 0 if not plugged in
 800743a:	2201      	movs	r2, #1
 800743c:	494f      	ldr	r1, [pc, #316]	; (800757c <main+0x374>)
 800743e:	4850      	ldr	r0, [pc, #320]	; (8007580 <main+0x378>)
 8007440:	f002 ff46 	bl	800a2d0 <SSD1306_Puts>
		//USB Virtual serial Port send string
		char str[6]; //23 change this based on the string + data + newline+string null, etc
		//sprintf(str, "Battery Level = %04ld \n", batteryLevel); //sprintf is complainging becuase using uint8_t instead of char
		sprintf(str, "%04ld\n", batteryLevel); //sprintf is complainging becuase using uint8_t instead of char
 8007444:	4b4c      	ldr	r3, [pc, #304]	; (8007578 <main+0x370>)
 8007446:	881b      	ldrh	r3, [r3, #0]
 8007448:	461a      	mov	r2, r3
 800744a:	463b      	mov	r3, r7
 800744c:	494d      	ldr	r1, [pc, #308]	; (8007584 <main+0x37c>)
 800744e:	4618      	mov	r0, r3
 8007450:	f004 fcd6 	bl	800be00 <siprintf>
		if(x%200==0) CDC_Transmit_FS(str, sizeof(str)); //prints color value to USB virtual serial port //send a test message
 8007454:	6a3a      	ldr	r2, [r7, #32]
 8007456:	4b47      	ldr	r3, [pc, #284]	; (8007574 <main+0x36c>)
 8007458:	fb83 1302 	smull	r1, r3, r3, r2
 800745c:	1199      	asrs	r1, r3, #6
 800745e:	17d3      	asrs	r3, r2, #31
 8007460:	1acb      	subs	r3, r1, r3
 8007462:	21c8      	movs	r1, #200	; 0xc8
 8007464:	fb01 f303 	mul.w	r3, r1, r3
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d108      	bne.n	8007480 <main+0x278>
 800746e:	463b      	mov	r3, r7
 8007470:	2106      	movs	r1, #6
 8007472:	4618      	mov	r0, r3
 8007474:	f003 fc16 	bl	800aca4 <CDC_Transmit_FS>
 8007478:	e002      	b.n	8007480 <main+0x278>
	}else{
		USBdataEnable(0); //Disable USB Data+ (DP)
 800747a:	2000      	movs	r0, #0
 800747c:	f000 fb50 	bl	8007b20 <USBdataEnable>
	}



	SSD1306_UpdateScreen(); //display
 8007480:	f002 fdec 	bl	800a05c <SSD1306_UpdateScreen>
	graphMAG(); //graph the complex magnitudes on the oled
 8007484:	f001 f92e 	bl	80086e4 <graphMAG>
	HAL_TIM_Base_Start_IT(&htim3); //start Timer 3
 8007488:	4836      	ldr	r0, [pc, #216]	; (8007564 <main+0x35c>)
 800748a:	f7fc fe80 	bl	800418e <HAL_TIM_Base_Start_IT>
	n_done = 0;
 800748e:	4b36      	ldr	r3, [pc, #216]	; (8007568 <main+0x360>)
 8007490:	2200      	movs	r2, #0
 8007492:	701a      	strb	r2, [r3, #0]
for(int x=0; x<10000; x++){ //infinite loop for testing FFT (working pretty will)
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	3301      	adds	r3, #1
 8007498:	623b      	str	r3, [r7, #32]
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	f242 720f 	movw	r2, #9999	; 0x270f
 80074a0:	4293      	cmp	r3, r2
 80074a2:	f77f af52 	ble.w	800734a <main+0x142>
}

HAL_TIM_Base_Stop_IT(&htim3); //stop Timer 3 //needed to prevent weird RGB led shit
 80074a6:	482f      	ldr	r0, [pc, #188]	; (8007564 <main+0x35c>)
 80074a8:	f7fc fe94 	bl	80041d4 <HAL_TIM_Base_Stop_IT>


	cycles = 1000;
 80074ac:	4b36      	ldr	r3, [pc, #216]	; (8007588 <main+0x380>)
 80074ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80074b2:	601a      	str	r2, [r3, #0]
	BlankScreen(BLACK);
 80074b4:	2000      	movs	r0, #0
 80074b6:	f001 fb29 	bl	8008b0c <BlankScreen>
	for(int x=0; x<10; x++){
 80074ba:	2300      	movs	r3, #0
 80074bc:	61bb      	str	r3, [r7, #24]
 80074be:	e00d      	b.n	80074dc <main+0x2d4>
	  waittime = 30;
 80074c0:	4b32      	ldr	r3, [pc, #200]	; (800758c <main+0x384>)
 80074c2:	221e      	movs	r2, #30
 80074c4:	601a      	str	r2, [r3, #0]
	  getrand(0);
 80074c6:	2000      	movs	r0, #0
 80074c8:	f002 fb72 	bl	8009bb0 <getrand>
	  sine1(waittime);
 80074cc:	4b2f      	ldr	r3, [pc, #188]	; (800758c <main+0x384>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f001 fc93 	bl	8008dfc <sine1>
	for(int x=0; x<10; x++){
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	3301      	adds	r3, #1
 80074da:	61bb      	str	r3, [r7, #24]
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	2b09      	cmp	r3, #9
 80074e0:	ddee      	ble.n	80074c0 <main+0x2b8>
	}

	cycles = 1000;
 80074e2:	4b29      	ldr	r3, [pc, #164]	; (8007588 <main+0x380>)
 80074e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80074e8:	601a      	str	r2, [r3, #0]
	waittime = 30;
 80074ea:	4b28      	ldr	r3, [pc, #160]	; (800758c <main+0x384>)
 80074ec:	221e      	movs	r2, #30
 80074ee:	601a      	str	r2, [r3, #0]
	BlankScreen(BLACK);
 80074f0:	2000      	movs	r0, #0
 80074f2:	f001 fb0b 	bl	8008b0c <BlankScreen>
	printStringWithShiftL(" STARIOS GEAR 2020   ", 40); //Send Lscrolling Text (send car array)
 80074f6:	2128      	movs	r1, #40	; 0x28
 80074f8:	4817      	ldr	r0, [pc, #92]	; (8007558 <main+0x350>)
 80074fa:	f001 fbb9 	bl	8008c70 <printStringWithShiftL>
		for(int x=0; x<500; x++){
			rotateCCW(45); //WIP
		}

*/
	cycles = 4;
 80074fe:	4b22      	ldr	r3, [pc, #136]	; (8007588 <main+0x380>)
 8007500:	2204      	movs	r2, #4
 8007502:	601a      	str	r2, [r3, #0]

	BlankScreen(BLACK);
 8007504:	2000      	movs	r0, #0
 8007506:	f001 fb01 	bl	8008b0c <BlankScreen>
	for(int x=0; x<500; x++){
 800750a:	2300      	movs	r3, #0
 800750c:	617b      	str	r3, [r7, #20]
 800750e:	e007      	b.n	8007520 <main+0x318>
		waittime = 10;
 8007510:	4b1e      	ldr	r3, [pc, #120]	; (800758c <main+0x384>)
 8007512:	220a      	movs	r2, #10
 8007514:	601a      	str	r2, [r3, #0]
		nGrid();
 8007516:	f001 fcb7 	bl	8008e88 <nGrid>
	for(int x=0; x<500; x++){
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	3301      	adds	r3, #1
 800751e:	617b      	str	r3, [r7, #20]
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007526:	dbf3      	blt.n	8007510 <main+0x308>
	}


	cycles = 1000;
 8007528:	4b17      	ldr	r3, [pc, #92]	; (8007588 <main+0x380>)
 800752a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800752e:	601a      	str	r2, [r3, #0]
	waittime = 30;
 8007530:	4b16      	ldr	r3, [pc, #88]	; (800758c <main+0x384>)
 8007532:	221e      	movs	r2, #30
 8007534:	601a      	str	r2, [r3, #0]
	BlankScreen(BLACK);
 8007536:	2000      	movs	r0, #0
 8007538:	f001 fae8 	bl	8008b0c <BlankScreen>
	for(int x=0; x<10; x++){
 800753c:	2300      	movs	r3, #0
 800753e:	613b      	str	r3, [r7, #16]
 8007540:	e031      	b.n	80075a6 <main+0x39e>
 8007542:	bf00      	nop
 8007544:	40010c00 	.word	0x40010c00
 8007548:	20001014 	.word	0x20001014
 800754c:	20000fe4 	.word	0x20000fe4
 8007550:	20000d18 	.word	0x20000d18
 8007554:	0800f548 	.word	0x0800f548
 8007558:	0800e7dc 	.word	0x0800e7dc
 800755c:	0800f748 	.word	0x0800f748
 8007560:	0800f760 	.word	0x0800f760
 8007564:	20000d9c 	.word	0x20000d9c
 8007568:	200003af 	.word	0x200003af
 800756c:	20000b10 	.word	0x20000b10
 8007570:	20000de0 	.word	0x20000de0
 8007574:	51eb851f 	.word	0x51eb851f
 8007578:	200003b0 	.word	0x200003b0
 800757c:	20000118 	.word	0x20000118
 8007580:	0800e7f4 	.word	0x0800e7f4
 8007584:	0800e7f8 	.word	0x0800e7f8
 8007588:	20000128 	.word	0x20000128
 800758c:	2000012c 	.word	0x2000012c
		waittime = 30;
 8007590:	4b25      	ldr	r3, [pc, #148]	; (8007628 <main+0x420>)
 8007592:	221e      	movs	r2, #30
 8007594:	601a      	str	r2, [r3, #0]
	  //getrand(0);
	  sine1(waittime);
 8007596:	4b24      	ldr	r3, [pc, #144]	; (8007628 <main+0x420>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4618      	mov	r0, r3
 800759c:	f001 fc2e 	bl	8008dfc <sine1>
	for(int x=0; x<10; x++){
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	3301      	adds	r3, #1
 80075a4:	613b      	str	r3, [r7, #16]
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	2b09      	cmp	r3, #9
 80075aa:	ddf1      	ble.n	8007590 <main+0x388>
	}


	cycles = 500;
 80075ac:	4b1f      	ldr	r3, [pc, #124]	; (800762c <main+0x424>)
 80075ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80075b2:	601a      	str	r2, [r3, #0]
	waittime = 20;
 80075b4:	4b1c      	ldr	r3, [pc, #112]	; (8007628 <main+0x420>)
 80075b6:	2214      	movs	r2, #20
 80075b8:	601a      	str	r2, [r3, #0]
	BlankScreen(BLACK);
 80075ba:	2000      	movs	r0, #0
 80075bc:	f001 faa6 	bl	8008b0c <BlankScreen>
	for(int x=0; x<4; x++){
 80075c0:	2300      	movs	r3, #0
 80075c2:	60fb      	str	r3, [r7, #12]
 80075c4:	e004      	b.n	80075d0 <main+0x3c8>
	  nBalls();
 80075c6:	f001 ff13 	bl	80093f0 <nBalls>
	for(int x=0; x<4; x++){
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3301      	adds	r3, #1
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	ddf7      	ble.n	80075c6 <main+0x3be>
	}



	//test pattern
	BlankScreen(BLACK);
 80075d6:	2000      	movs	r0, #0
 80075d8:	f001 fa98 	bl	8008b0c <BlankScreen>
	getrand(0);
 80075dc:	2000      	movs	r0, #0
 80075de:	f002 fae7 	bl	8009bb0 <getrand>
	setPixelColor(0, Forecolor); //set first pixel a random color
 80075e2:	4b13      	ldr	r3, [pc, #76]	; (8007630 <main+0x428>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4619      	mov	r1, r3
 80075e8:	2000      	movs	r0, #0
 80075ea:	f001 f9c5 	bl	8008978 <setPixelColor>
	show();
 80075ee:	f001 f9b5 	bl	800895c <show>
	HAL_Delay(500);
 80075f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80075f6:	f7f9 fac9 	bl	8000b8c <HAL_Delay>
	for(int x=0; x<NUMLEDS; x++){
 80075fa:	2300      	movs	r3, #0
 80075fc:	60bb      	str	r3, [r7, #8]
 80075fe:	e00f      	b.n	8007620 <main+0x418>
	  setPixelColor(x, getPixelColor(0)); //set first pixel green
 8007600:	2000      	movs	r0, #0
 8007602:	f001 fa0d 	bl	8008a20 <getPixelColor>
 8007606:	4603      	mov	r3, r0
 8007608:	4619      	mov	r1, r3
 800760a:	68b8      	ldr	r0, [r7, #8]
 800760c:	f001 f9b4 	bl	8008978 <setPixelColor>
	  show();
 8007610:	f001 f9a4 	bl	800895c <show>
	  HAL_Delay(20);
 8007614:	2014      	movs	r0, #20
 8007616:	f7f9 fab9 	bl	8000b8c <HAL_Delay>
	for(int x=0; x<NUMLEDS; x++){
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	3301      	adds	r3, #1
 800761e:	60bb      	str	r3, [r7, #8]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2ba7      	cmp	r3, #167	; 0xa7
 8007624:	ddec      	ble.n	8007600 <main+0x3f8>
HAL_TIM_Base_Start_IT(&htim3); //start Timer 3. used for FFT sampling
 8007626:	e68a      	b.n	800733e <main+0x136>
 8007628:	2000012c 	.word	0x2000012c
 800762c:	20000128 	.word	0x20000128
 8007630:	20000120 	.word	0x20000120

08007634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b094      	sub	sp, #80	; 0x50
 8007638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800763a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800763e:	2228      	movs	r2, #40	; 0x28
 8007640:	2100      	movs	r1, #0
 8007642:	4618      	mov	r0, r3
 8007644:	f003 ff50 	bl	800b4e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007648:	f107 0314 	add.w	r3, r7, #20
 800764c:	2200      	movs	r2, #0
 800764e:	601a      	str	r2, [r3, #0]
 8007650:	605a      	str	r2, [r3, #4]
 8007652:	609a      	str	r2, [r3, #8]
 8007654:	60da      	str	r2, [r3, #12]
 8007656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007658:	1d3b      	adds	r3, r7, #4
 800765a:	2200      	movs	r2, #0
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	605a      	str	r2, [r3, #4]
 8007660:	609a      	str	r2, [r3, #8]
 8007662:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007664:	2301      	movs	r3, #1
 8007666:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800766c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800766e:	2300      	movs	r3, #0
 8007670:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007672:	2301      	movs	r3, #1
 8007674:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007676:	2302      	movs	r3, #2
 8007678:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800767a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800767e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007680:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007684:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007686:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800768a:	4618      	mov	r0, r3
 800768c:	f7fb fe62 	bl	8003354 <HAL_RCC_OscConfig>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8007696:	f002 fb51 	bl	8009d3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800769a:	230f      	movs	r3, #15
 800769c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800769e:	2302      	movs	r3, #2
 80076a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80076a2:	2300      	movs	r3, #0
 80076a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80076a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80076ac:	2300      	movs	r3, #0
 80076ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80076b0:	f107 0314 	add.w	r3, r7, #20
 80076b4:	2102      	movs	r1, #2
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fc f8cc 	bl	8003854 <HAL_RCC_ClockConfig>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80076c2:	f002 fb3b 	bl	8009d3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80076c6:	2312      	movs	r3, #18
 80076c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80076ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ce:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80076d0:	2300      	movs	r3, #0
 80076d2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80076d4:	1d3b      	adds	r3, r7, #4
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fc fa44 	bl	8003b64 <HAL_RCCEx_PeriphCLKConfig>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80076e2:	f002 fb2b 	bl	8009d3c <Error_Handler>
  }
}
 80076e6:	bf00      	nop
 80076e8:	3750      	adds	r7, #80	; 0x50
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
	...

080076f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80076f6:	1d3b      	adds	r3, r7, #4
 80076f8:	2200      	movs	r2, #0
 80076fa:	601a      	str	r2, [r3, #0]
 80076fc:	605a      	str	r2, [r3, #4]
 80076fe:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8007700:	4b18      	ldr	r3, [pc, #96]	; (8007764 <MX_ADC1_Init+0x74>)
 8007702:	4a19      	ldr	r2, [pc, #100]	; (8007768 <MX_ADC1_Init+0x78>)
 8007704:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007706:	4b17      	ldr	r3, [pc, #92]	; (8007764 <MX_ADC1_Init+0x74>)
 8007708:	2200      	movs	r2, #0
 800770a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800770c:	4b15      	ldr	r3, [pc, #84]	; (8007764 <MX_ADC1_Init+0x74>)
 800770e:	2201      	movs	r2, #1
 8007710:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007712:	4b14      	ldr	r3, [pc, #80]	; (8007764 <MX_ADC1_Init+0x74>)
 8007714:	2200      	movs	r2, #0
 8007716:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007718:	4b12      	ldr	r3, [pc, #72]	; (8007764 <MX_ADC1_Init+0x74>)
 800771a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800771e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007720:	4b10      	ldr	r3, [pc, #64]	; (8007764 <MX_ADC1_Init+0x74>)
 8007722:	2200      	movs	r2, #0
 8007724:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8007726:	4b0f      	ldr	r3, [pc, #60]	; (8007764 <MX_ADC1_Init+0x74>)
 8007728:	2201      	movs	r2, #1
 800772a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800772c:	480d      	ldr	r0, [pc, #52]	; (8007764 <MX_ADC1_Init+0x74>)
 800772e:	f7f9 fa4f 	bl	8000bd0 <HAL_ADC_Init>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8007738:	f002 fb00 	bl	8009d3c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800773c:	2300      	movs	r3, #0
 800773e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007740:	2301      	movs	r3, #1
 8007742:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007744:	2300      	movs	r3, #0
 8007746:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007748:	1d3b      	adds	r3, r7, #4
 800774a:	4619      	mov	r1, r3
 800774c:	4805      	ldr	r0, [pc, #20]	; (8007764 <MX_ADC1_Init+0x74>)
 800774e:	f7f9 fbd1 	bl	8000ef4 <HAL_ADC_ConfigChannel>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8007758:	f002 faf0 	bl	8009d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800775c:	bf00      	nop
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	20000fe4 	.word	0x20000fe4
 8007768:	40012400 	.word	0x40012400

0800776c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007772:	1d3b      	adds	r3, r7, #4
 8007774:	2200      	movs	r2, #0
 8007776:	601a      	str	r2, [r3, #0]
 8007778:	605a      	str	r2, [r3, #4]
 800777a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 800777c:	4b18      	ldr	r3, [pc, #96]	; (80077e0 <MX_ADC2_Init+0x74>)
 800777e:	4a19      	ldr	r2, [pc, #100]	; (80077e4 <MX_ADC2_Init+0x78>)
 8007780:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007782:	4b17      	ldr	r3, [pc, #92]	; (80077e0 <MX_ADC2_Init+0x74>)
 8007784:	2200      	movs	r2, #0
 8007786:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8007788:	4b15      	ldr	r3, [pc, #84]	; (80077e0 <MX_ADC2_Init+0x74>)
 800778a:	2201      	movs	r2, #1
 800778c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800778e:	4b14      	ldr	r3, [pc, #80]	; (80077e0 <MX_ADC2_Init+0x74>)
 8007790:	2200      	movs	r2, #0
 8007792:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007794:	4b12      	ldr	r3, [pc, #72]	; (80077e0 <MX_ADC2_Init+0x74>)
 8007796:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800779a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800779c:	4b10      	ldr	r3, [pc, #64]	; (80077e0 <MX_ADC2_Init+0x74>)
 800779e:	2200      	movs	r2, #0
 80077a0:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80077a2:	4b0f      	ldr	r3, [pc, #60]	; (80077e0 <MX_ADC2_Init+0x74>)
 80077a4:	2201      	movs	r2, #1
 80077a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80077a8:	480d      	ldr	r0, [pc, #52]	; (80077e0 <MX_ADC2_Init+0x74>)
 80077aa:	f7f9 fa11 	bl	8000bd0 <HAL_ADC_Init>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80077b4:	f002 fac2 	bl	8009d3c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80077b8:	2301      	movs	r3, #1
 80077ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80077bc:	2301      	movs	r3, #1
 80077be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80077c0:	2300      	movs	r3, #0
 80077c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80077c4:	1d3b      	adds	r3, r7, #4
 80077c6:	4619      	mov	r1, r3
 80077c8:	4805      	ldr	r0, [pc, #20]	; (80077e0 <MX_ADC2_Init+0x74>)
 80077ca:	f7f9 fb93 	bl	8000ef4 <HAL_ADC_ConfigChannel>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d001      	beq.n	80077d8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80077d4:	f002 fab2 	bl	8009d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80077d8:	bf00      	nop
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	20000d18 	.word	0x20000d18
 80077e4:	40012800 	.word	0x40012800

080077e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80077ec:	4b12      	ldr	r3, [pc, #72]	; (8007838 <MX_I2C1_Init+0x50>)
 80077ee:	4a13      	ldr	r2, [pc, #76]	; (800783c <MX_I2C1_Init+0x54>)
 80077f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80077f2:	4b11      	ldr	r3, [pc, #68]	; (8007838 <MX_I2C1_Init+0x50>)
 80077f4:	4a12      	ldr	r2, [pc, #72]	; (8007840 <MX_I2C1_Init+0x58>)
 80077f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80077f8:	4b0f      	ldr	r3, [pc, #60]	; (8007838 <MX_I2C1_Init+0x50>)
 80077fa:	2200      	movs	r2, #0
 80077fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80077fe:	4b0e      	ldr	r3, [pc, #56]	; (8007838 <MX_I2C1_Init+0x50>)
 8007800:	2200      	movs	r2, #0
 8007802:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007804:	4b0c      	ldr	r3, [pc, #48]	; (8007838 <MX_I2C1_Init+0x50>)
 8007806:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800780a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800780c:	4b0a      	ldr	r3, [pc, #40]	; (8007838 <MX_I2C1_Init+0x50>)
 800780e:	2200      	movs	r2, #0
 8007810:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007812:	4b09      	ldr	r3, [pc, #36]	; (8007838 <MX_I2C1_Init+0x50>)
 8007814:	2200      	movs	r2, #0
 8007816:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007818:	4b07      	ldr	r3, [pc, #28]	; (8007838 <MX_I2C1_Init+0x50>)
 800781a:	2200      	movs	r2, #0
 800781c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800781e:	4b06      	ldr	r3, [pc, #24]	; (8007838 <MX_I2C1_Init+0x50>)
 8007820:	2200      	movs	r2, #0
 8007822:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007824:	4804      	ldr	r0, [pc, #16]	; (8007838 <MX_I2C1_Init+0x50>)
 8007826:	f7fa f96f 	bl	8001b08 <HAL_I2C_Init>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007830:	f002 fa84 	bl	8009d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007834:	bf00      	nop
 8007836:	bd80      	pop	{r7, pc}
 8007838:	20000d48 	.word	0x20000d48
 800783c:	40005400 	.word	0x40005400
 8007840:	00061a80 	.word	0x00061a80

08007844 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8007848:	4b17      	ldr	r3, [pc, #92]	; (80078a8 <MX_SPI2_Init+0x64>)
 800784a:	4a18      	ldr	r2, [pc, #96]	; (80078ac <MX_SPI2_Init+0x68>)
 800784c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800784e:	4b16      	ldr	r3, [pc, #88]	; (80078a8 <MX_SPI2_Init+0x64>)
 8007850:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007854:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007856:	4b14      	ldr	r3, [pc, #80]	; (80078a8 <MX_SPI2_Init+0x64>)
 8007858:	2200      	movs	r2, #0
 800785a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800785c:	4b12      	ldr	r3, [pc, #72]	; (80078a8 <MX_SPI2_Init+0x64>)
 800785e:	2200      	movs	r2, #0
 8007860:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007862:	4b11      	ldr	r3, [pc, #68]	; (80078a8 <MX_SPI2_Init+0x64>)
 8007864:	2200      	movs	r2, #0
 8007866:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8007868:	4b0f      	ldr	r3, [pc, #60]	; (80078a8 <MX_SPI2_Init+0x64>)
 800786a:	2201      	movs	r2, #1
 800786c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800786e:	4b0e      	ldr	r3, [pc, #56]	; (80078a8 <MX_SPI2_Init+0x64>)
 8007870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007874:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007876:	4b0c      	ldr	r3, [pc, #48]	; (80078a8 <MX_SPI2_Init+0x64>)
 8007878:	2218      	movs	r2, #24
 800787a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800787c:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <MX_SPI2_Init+0x64>)
 800787e:	2200      	movs	r2, #0
 8007880:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007882:	4b09      	ldr	r3, [pc, #36]	; (80078a8 <MX_SPI2_Init+0x64>)
 8007884:	2200      	movs	r2, #0
 8007886:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007888:	4b07      	ldr	r3, [pc, #28]	; (80078a8 <MX_SPI2_Init+0x64>)
 800788a:	2200      	movs	r2, #0
 800788c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800788e:	4b06      	ldr	r3, [pc, #24]	; (80078a8 <MX_SPI2_Init+0x64>)
 8007890:	220a      	movs	r2, #10
 8007892:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007894:	4804      	ldr	r0, [pc, #16]	; (80078a8 <MX_SPI2_Init+0x64>)
 8007896:	f7fc fa1b 	bl	8003cd0 <HAL_SPI_Init>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80078a0:	f002 fa4c 	bl	8009d3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80078a4:	bf00      	nop
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	20000ab4 	.word	0x20000ab4
 80078ac:	40003800 	.word	0x40003800

080078b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80078b6:	f107 0308 	add.w	r3, r7, #8
 80078ba:	2200      	movs	r2, #0
 80078bc:	601a      	str	r2, [r3, #0]
 80078be:	605a      	str	r2, [r3, #4]
 80078c0:	609a      	str	r2, [r3, #8]
 80078c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078c4:	463b      	mov	r3, r7
 80078c6:	2200      	movs	r2, #0
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80078cc:	4b1d      	ldr	r3, [pc, #116]	; (8007944 <MX_TIM3_Init+0x94>)
 80078ce:	4a1e      	ldr	r2, [pc, #120]	; (8007948 <MX_TIM3_Init+0x98>)
 80078d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80078d2:	4b1c      	ldr	r3, [pc, #112]	; (8007944 <MX_TIM3_Init+0x94>)
 80078d4:	2201      	movs	r2, #1
 80078d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078d8:	4b1a      	ldr	r3, [pc, #104]	; (8007944 <MX_TIM3_Init+0x94>)
 80078da:	2200      	movs	r2, #0
 80078dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1656;
 80078de:	4b19      	ldr	r3, [pc, #100]	; (8007944 <MX_TIM3_Init+0x94>)
 80078e0:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80078e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078e6:	4b17      	ldr	r3, [pc, #92]	; (8007944 <MX_TIM3_Init+0x94>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078ec:	4b15      	ldr	r3, [pc, #84]	; (8007944 <MX_TIM3_Init+0x94>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80078f2:	4814      	ldr	r0, [pc, #80]	; (8007944 <MX_TIM3_Init+0x94>)
 80078f4:	f7fc fc20 	bl	8004138 <HAL_TIM_Base_Init>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80078fe:	f002 fa1d 	bl	8009d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007906:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007908:	f107 0308 	add.w	r3, r7, #8
 800790c:	4619      	mov	r1, r3
 800790e:	480d      	ldr	r0, [pc, #52]	; (8007944 <MX_TIM3_Init+0x94>)
 8007910:	f7fc fd92 	bl	8004438 <HAL_TIM_ConfigClockSource>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800791a:	f002 fa0f 	bl	8009d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800791e:	2300      	movs	r3, #0
 8007920:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007922:	2300      	movs	r3, #0
 8007924:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007926:	463b      	mov	r3, r7
 8007928:	4619      	mov	r1, r3
 800792a:	4806      	ldr	r0, [pc, #24]	; (8007944 <MX_TIM3_Init+0x94>)
 800792c:	f7fc ff60 	bl	80047f0 <HAL_TIMEx_MasterConfigSynchronization>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8007936:	f002 fa01 	bl	8009d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800793a:	bf00      	nop
 800793c:	3718      	adds	r7, #24
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	20000d9c 	.word	0x20000d9c
 8007948:	40000400 	.word	0x40000400

0800794c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007952:	4b0c      	ldr	r3, [pc, #48]	; (8007984 <MX_DMA_Init+0x38>)
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	4a0b      	ldr	r2, [pc, #44]	; (8007984 <MX_DMA_Init+0x38>)
 8007958:	f043 0301 	orr.w	r3, r3, #1
 800795c:	6153      	str	r3, [r2, #20]
 800795e:	4b09      	ldr	r3, [pc, #36]	; (8007984 <MX_DMA_Init+0x38>)
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	607b      	str	r3, [r7, #4]
 8007968:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800796a:	2200      	movs	r2, #0
 800796c:	2100      	movs	r1, #0
 800796e:	200f      	movs	r0, #15
 8007970:	f7f9 fd1b 	bl	80013aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8007974:	200f      	movs	r0, #15
 8007976:	f7f9 fd34 	bl	80013e2 <HAL_NVIC_EnableIRQ>

}
 800797a:	bf00      	nop
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	40021000 	.word	0x40021000

08007988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b088      	sub	sp, #32
 800798c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800798e:	f107 0310 	add.w	r3, r7, #16
 8007992:	2200      	movs	r2, #0
 8007994:	601a      	str	r2, [r3, #0]
 8007996:	605a      	str	r2, [r3, #4]
 8007998:	609a      	str	r2, [r3, #8]
 800799a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800799c:	4b43      	ldr	r3, [pc, #268]	; (8007aac <MX_GPIO_Init+0x124>)
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	4a42      	ldr	r2, [pc, #264]	; (8007aac <MX_GPIO_Init+0x124>)
 80079a2:	f043 0320 	orr.w	r3, r3, #32
 80079a6:	6193      	str	r3, [r2, #24]
 80079a8:	4b40      	ldr	r3, [pc, #256]	; (8007aac <MX_GPIO_Init+0x124>)
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	f003 0320 	and.w	r3, r3, #32
 80079b0:	60fb      	str	r3, [r7, #12]
 80079b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80079b4:	4b3d      	ldr	r3, [pc, #244]	; (8007aac <MX_GPIO_Init+0x124>)
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	4a3c      	ldr	r2, [pc, #240]	; (8007aac <MX_GPIO_Init+0x124>)
 80079ba:	f043 0304 	orr.w	r3, r3, #4
 80079be:	6193      	str	r3, [r2, #24]
 80079c0:	4b3a      	ldr	r3, [pc, #232]	; (8007aac <MX_GPIO_Init+0x124>)
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	f003 0304 	and.w	r3, r3, #4
 80079c8:	60bb      	str	r3, [r7, #8]
 80079ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80079cc:	4b37      	ldr	r3, [pc, #220]	; (8007aac <MX_GPIO_Init+0x124>)
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	4a36      	ldr	r2, [pc, #216]	; (8007aac <MX_GPIO_Init+0x124>)
 80079d2:	f043 0308 	orr.w	r3, r3, #8
 80079d6:	6193      	str	r3, [r2, #24]
 80079d8:	4b34      	ldr	r3, [pc, #208]	; (8007aac <MX_GPIO_Init+0x124>)
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	f003 0308 	and.w	r3, r3, #8
 80079e0:	607b      	str	r3, [r7, #4]
 80079e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80079e4:	2200      	movs	r2, #0
 80079e6:	2104      	movs	r1, #4
 80079e8:	4831      	ldr	r0, [pc, #196]	; (8007ab0 <MX_GPIO_Init+0x128>)
 80079ea:	f7fa f874 	bl	8001ad6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80079ee:	2200      	movs	r2, #0
 80079f0:	f240 3101 	movw	r1, #769	; 0x301
 80079f4:	482f      	ldr	r0, [pc, #188]	; (8007ab4 <MX_GPIO_Init+0x12c>)
 80079f6:	f7fa f86e 	bl	8001ad6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80079fa:	2201      	movs	r2, #1
 80079fc:	2102      	movs	r1, #2
 80079fe:	482d      	ldr	r0, [pc, #180]	; (8007ab4 <MX_GPIO_Init+0x12c>)
 8007a00:	f7fa f869 	bl	8001ad6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007a04:	2304      	movs	r3, #4
 8007a06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a10:	2302      	movs	r3, #2
 8007a12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a14:	f107 0310 	add.w	r3, r7, #16
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4825      	ldr	r0, [pc, #148]	; (8007ab0 <MX_GPIO_Init+0x128>)
 8007a1c:	f7f9 feea 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007a20:	2308      	movs	r3, #8
 8007a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a24:	2300      	movs	r3, #0
 8007a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a2c:	f107 0310 	add.w	r3, r7, #16
 8007a30:	4619      	mov	r1, r3
 8007a32:	481f      	ldr	r0, [pc, #124]	; (8007ab0 <MX_GPIO_Init+0x128>)
 8007a34:	f7f9 fede 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_9;
 8007a38:	f240 2303 	movw	r3, #515	; 0x203
 8007a3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a42:	2300      	movs	r3, #0
 8007a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a46:	2302      	movs	r3, #2
 8007a48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a4a:	f107 0310 	add.w	r3, r7, #16
 8007a4e:	4619      	mov	r1, r3
 8007a50:	4818      	ldr	r0, [pc, #96]	; (8007ab4 <MX_GPIO_Init+0x12c>)
 8007a52:	f7f9 fecf 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8007a56:	2318      	movs	r3, #24
 8007a58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a62:	f107 0310 	add.w	r3, r7, #16
 8007a66:	4619      	mov	r1, r3
 8007a68:	4812      	ldr	r0, [pc, #72]	; (8007ab4 <MX_GPIO_Init+0x12c>)
 8007a6a:	f7f9 fec3 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007a6e:	2320      	movs	r3, #32
 8007a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a72:	2300      	movs	r3, #0
 8007a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007a76:	2301      	movs	r3, #1
 8007a78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a7a:	f107 0310 	add.w	r3, r7, #16
 8007a7e:	4619      	mov	r1, r3
 8007a80:	480c      	ldr	r0, [pc, #48]	; (8007ab4 <MX_GPIO_Init+0x12c>)
 8007a82:	f7f9 feb7 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007a90:	2302      	movs	r3, #2
 8007a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a94:	2302      	movs	r3, #2
 8007a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a98:	f107 0310 	add.w	r3, r7, #16
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	4805      	ldr	r0, [pc, #20]	; (8007ab4 <MX_GPIO_Init+0x12c>)
 8007aa0:	f7f9 fea8 	bl	80017f4 <HAL_GPIO_Init>

}
 8007aa4:	bf00      	nop
 8007aa6:	3720      	adds	r7, #32
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	40021000 	.word	0x40021000
 8007ab0:	40010800 	.word	0x40010800
 8007ab4:	40010c00 	.word	0x40010c00

08007ab8 <checkbuttons>:

/* USER CODE BEGIN 4 */
int checkbuttons(void){ // BTN3 = PB5 needs internal Pullups enabled
 8007ab8:	b590      	push	{r4, r7, lr}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
int c = 0;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	607b      	str	r3, [r7, #4]
c |= HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5)<<2 | HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_4)<<1 | HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3);
 8007ac2:	2120      	movs	r1, #32
 8007ac4:	480c      	ldr	r0, [pc, #48]	; (8007af8 <checkbuttons+0x40>)
 8007ac6:	f7f9 ffef 	bl	8001aa8 <HAL_GPIO_ReadPin>
 8007aca:	4603      	mov	r3, r0
 8007acc:	009c      	lsls	r4, r3, #2
 8007ace:	2110      	movs	r1, #16
 8007ad0:	4809      	ldr	r0, [pc, #36]	; (8007af8 <checkbuttons+0x40>)
 8007ad2:	f7f9 ffe9 	bl	8001aa8 <HAL_GPIO_ReadPin>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	431c      	orrs	r4, r3
 8007adc:	2108      	movs	r1, #8
 8007ade:	4806      	ldr	r0, [pc, #24]	; (8007af8 <checkbuttons+0x40>)
 8007ae0:	f7f9 ffe2 	bl	8001aa8 <HAL_GPIO_ReadPin>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	4323      	orrs	r3, r4
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	607b      	str	r3, [r7, #4]
return c;
 8007aee:	687b      	ldr	r3, [r7, #4]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd90      	pop	{r4, r7, pc}
 8007af8:	40010c00 	.word	0x40010c00

08007afc <checkUSBConnected>:

int checkUSBConnected(void){ // Check for USB is plugged in to power
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
	int c = 0;
 8007b02:	2300      	movs	r3, #0
 8007b04:	607b      	str	r3, [r7, #4]
	c=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3);
 8007b06:	2108      	movs	r1, #8
 8007b08:	4804      	ldr	r0, [pc, #16]	; (8007b1c <checkUSBConnected+0x20>)
 8007b0a:	f7f9 ffcd 	bl	8001aa8 <HAL_GPIO_ReadPin>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	607b      	str	r3, [r7, #4]
	return c;
 8007b12:	687b      	ldr	r3, [r7, #4]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	40010800 	.word	0x40010800

08007b20 <USBdataEnable>:

void USBdataEnable(int c){ //this function will enable USB serial device if VBUS is connected
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
	if(c){
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d006      	beq.n	8007b3c <USBdataEnable+0x1c>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9, GPIO_PIN_SET);//pull USB Data+ (DP) High
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b34:	4806      	ldr	r0, [pc, #24]	; (8007b50 <USBdataEnable+0x30>)
 8007b36:	f7f9 ffce 	bl	8001ad6 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9, GPIO_PIN_RESET);//pull USB Data+ (DP) LOW
	}
}
 8007b3a:	e005      	b.n	8007b48 <USBdataEnable+0x28>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9, GPIO_PIN_RESET);//pull USB Data+ (DP) LOW
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b42:	4803      	ldr	r0, [pc, #12]	; (8007b50 <USBdataEnable+0x30>)
 8007b44:	f7f9 ffc7 	bl	8001ad6 <HAL_GPIO_WritePin>
}
 8007b48:	bf00      	nop
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	40010c00 	.word	0x40010c00

08007b54 <ComputeFFT>:

////////////////////////////////////////////////////////////////////////////////START FFt Lib functions
void ComputeFFT(double *vReal, double *vImag, uint16_t samples, uint8_t power, uint8_t dir)
{	// Computes in-place complex-to-complex FFT
 8007b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b56:	b09b      	sub	sp, #108	; 0x6c
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	4611      	mov	r1, r2
 8007b60:	461a      	mov	r2, r3
 8007b62:	460b      	mov	r3, r1
 8007b64:	80fb      	strh	r3, [r7, #6]
 8007b66:	4613      	mov	r3, r2
 8007b68:	717b      	strb	r3, [r7, #5]
	// Reverse bits
	uint16_t j = 0;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	for (uint16_t i = 0; i < (samples - 1); i++) {
 8007b70:	2300      	movs	r3, #0
 8007b72:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007b76:	e046      	b.n	8007c06 <ComputeFFT+0xb2>
		if (i < j) {
 8007b78:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8007b7c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d21d      	bcs.n	8007bc0 <ComputeFFT+0x6c>
			Swap(&vReal[i], &vReal[j]);
 8007b84:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007b88:	00db      	lsls	r3, r3, #3
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	18d0      	adds	r0, r2, r3
 8007b8e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	4413      	add	r3, r2
 8007b98:	4619      	mov	r1, r3
 8007b9a:	f000 f9ec 	bl	8007f76 <Swap>
			if(dir==FFT_REVERSE)
 8007b9e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10c      	bne.n	8007bc0 <ComputeFFT+0x6c>
				Swap(&vImag[i], &vImag[j]);
 8007ba6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	18d0      	adds	r0, r2, r3
 8007bb0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007bb4:	00db      	lsls	r3, r3, #3
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	4413      	add	r3, r2
 8007bba:	4619      	mov	r1, r3
 8007bbc:	f000 f9db 	bl	8007f76 <Swap>
		}
		uint16_t k = (samples >> 1);
 8007bc0:	88fb      	ldrh	r3, [r7, #6]
 8007bc2:	085b      	lsrs	r3, r3, #1
 8007bc4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		while (k <= j) {
 8007bc8:	e00b      	b.n	8007be2 <ComputeFFT+0x8e>
			j -= k;
 8007bca:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8007bce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			k >>= 1;
 8007bd8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007bdc:	085b      	lsrs	r3, r3, #1
 8007bde:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		while (k <= j) {
 8007be2:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8007be6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d9ed      	bls.n	8007bca <ComputeFFT+0x76>
		}
		j += k;
 8007bee:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8007bf2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	for (uint16_t i = 0; i < (samples - 1); i++) {
 8007bfc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007c00:	3301      	adds	r3, #1
 8007c02:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007c06:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8007c0a:	88fb      	ldrh	r3, [r7, #6]
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	dbb2      	blt.n	8007b78 <ComputeFFT+0x24>
	}
	// Compute the FFT
	double c1 = -1.0;
 8007c12:	f04f 0300 	mov.w	r3, #0
 8007c16:	4cab      	ldr	r4, [pc, #684]	; (8007ec4 <ComputeFFT+0x370>)
 8007c18:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	double c2 = 0.0;
 8007c1c:	f04f 0300 	mov.w	r3, #0
 8007c20:	f04f 0400 	mov.w	r4, #0
 8007c24:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	uint16_t l2 = 1;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	for (uint8_t l = 0; (l < power); l++) {
 8007c2e:	2300      	movs	r3, #0
 8007c30:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8007c34:	e138      	b.n	8007ea8 <ComputeFFT+0x354>
		uint16_t l1 = l2;
 8007c36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c3a:	867b      	strh	r3, [r7, #50]	; 0x32
		l2 <<= 1;
 8007c3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		double u1 = 1.0;
 8007c46:	f04f 0300 	mov.w	r3, #0
 8007c4a:	4c9f      	ldr	r4, [pc, #636]	; (8007ec8 <ComputeFFT+0x374>)
 8007c4c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		double u2 = 0.0;
 8007c50:	f04f 0300 	mov.w	r3, #0
 8007c54:	f04f 0400 	mov.w	r4, #0
 8007c58:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		for (j = 0; j < l1; j++) {
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007c62:	e0da      	b.n	8007e1a <ComputeFFT+0x2c6>
			 for (uint16_t i = j; i < samples; i += l2) {
 8007c64:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007c68:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007c6a:	e094      	b.n	8007d96 <ComputeFFT+0x242>
					uint16_t i1 = i + l1;
 8007c6c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007c6e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007c70:	4413      	add	r3, r2
 8007c72:	84fb      	strh	r3, [r7, #38]	; 0x26
					double t1 = u1 * vReal[i1] - u2 * vImag[i1];
 8007c74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c84:	f7f8 fc28 	bl	80004d8 <__aeabi_dmul>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	460c      	mov	r4, r1
 8007c8c:	4625      	mov	r5, r4
 8007c8e:	461c      	mov	r4, r3
 8007c90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c92:	00db      	lsls	r3, r3, #3
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	4413      	add	r3, r2
 8007c98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ca0:	f7f8 fc1a 	bl	80004d8 <__aeabi_dmul>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	4620      	mov	r0, r4
 8007caa:	4629      	mov	r1, r5
 8007cac:	f7f8 fa5c 	bl	8000168 <__aeabi_dsub>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	460c      	mov	r4, r1
 8007cb4:	e9c7 3406 	strd	r3, r4, [r7, #24]
					double t2 = u1 * vImag[i1] + u2 * vReal[i1];
 8007cb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007cba:	00db      	lsls	r3, r3, #3
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cc4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007cc8:	f7f8 fc06 	bl	80004d8 <__aeabi_dmul>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	460c      	mov	r4, r1
 8007cd0:	4625      	mov	r5, r4
 8007cd2:	461c      	mov	r4, r3
 8007cd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	4413      	add	r3, r2
 8007cdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ce0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ce4:	f7f8 fbf8 	bl	80004d8 <__aeabi_dmul>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	460b      	mov	r3, r1
 8007cec:	4620      	mov	r0, r4
 8007cee:	4629      	mov	r1, r5
 8007cf0:	f7f8 fa3c 	bl	800016c <__adddf3>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	460c      	mov	r4, r1
 8007cf8:	e9c7 3404 	strd	r3, r4, [r7, #16]
					vReal[i1] = vReal[i] - t1;
 8007cfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007cfe:	00db      	lsls	r3, r3, #3
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	4413      	add	r3, r2
 8007d04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d0a:	00db      	lsls	r3, r3, #3
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	18d5      	adds	r5, r2, r3
 8007d10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d14:	f7f8 fa28 	bl	8000168 <__aeabi_dsub>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	e9c5 3400 	strd	r3, r4, [r5]
					vImag[i1] = vImag[i] - t2;
 8007d20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d22:	00db      	lsls	r3, r3, #3
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	4413      	add	r3, r2
 8007d28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d2e:	00db      	lsls	r3, r3, #3
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	18d5      	adds	r5, r2, r3
 8007d34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007d38:	f7f8 fa16 	bl	8000168 <__aeabi_dsub>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	460c      	mov	r4, r1
 8007d40:	e9c5 3400 	strd	r3, r4, [r5]
					vReal[i] += t1;
 8007d44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d46:	00db      	lsls	r3, r3, #3
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d52:	00db      	lsls	r3, r3, #3
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	18d5      	adds	r5, r2, r3
 8007d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d5c:	f7f8 fa06 	bl	800016c <__adddf3>
 8007d60:	4603      	mov	r3, r0
 8007d62:	460c      	mov	r4, r1
 8007d64:	e9c5 3400 	strd	r3, r4, [r5]
					vImag[i] += t2;
 8007d68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	4413      	add	r3, r2
 8007d70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d76:	00db      	lsls	r3, r3, #3
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	18d5      	adds	r5, r2, r3
 8007d7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007d80:	f7f8 f9f4 	bl	800016c <__adddf3>
 8007d84:	4603      	mov	r3, r0
 8007d86:	460c      	mov	r4, r1
 8007d88:	e9c5 3400 	strd	r3, r4, [r5]
			 for (uint16_t i = j; i < samples; i += l2) {
 8007d8c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007d8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d92:	4413      	add	r3, r2
 8007d94:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007d96:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007d98:	88fb      	ldrh	r3, [r7, #6]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	f4ff af66 	bcc.w	8007c6c <ComputeFFT+0x118>
			 }
			 double z = ((u1 * c1) - (u2 * c2));
 8007da0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007da4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007da8:	f7f8 fb96 	bl	80004d8 <__aeabi_dmul>
 8007dac:	4603      	mov	r3, r0
 8007dae:	460c      	mov	r4, r1
 8007db0:	4625      	mov	r5, r4
 8007db2:	461c      	mov	r4, r3
 8007db4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007db8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007dbc:	f7f8 fb8c 	bl	80004d8 <__aeabi_dmul>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f7f8 f9ce 	bl	8000168 <__aeabi_dsub>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	460c      	mov	r4, r1
 8007dd0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 u2 = ((u1 * c2) + (u2 * c1));
 8007dd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007dd8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007ddc:	f7f8 fb7c 	bl	80004d8 <__aeabi_dmul>
 8007de0:	4603      	mov	r3, r0
 8007de2:	460c      	mov	r4, r1
 8007de4:	4625      	mov	r5, r4
 8007de6:	461c      	mov	r4, r3
 8007de8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007dec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007df0:	f7f8 fb72 	bl	80004d8 <__aeabi_dmul>
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	4620      	mov	r0, r4
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	f7f8 f9b6 	bl	800016c <__adddf3>
 8007e00:	4603      	mov	r3, r0
 8007e02:	460c      	mov	r4, r1
 8007e04:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
			 u1 = z;
 8007e08:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8007e0c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
		for (j = 0; j < l1; j++) {
 8007e10:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007e14:	3301      	adds	r3, #1
 8007e16:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007e1a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8007e1e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007e20:	429a      	cmp	r2, r3
 8007e22:	f4ff af1f 	bcc.w	8007c64 <ComputeFFT+0x110>
		}
		c2 = sqrt((1.0 - c1) / 2.0);
 8007e26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007e2a:	f04f 0000 	mov.w	r0, #0
 8007e2e:	4926      	ldr	r1, [pc, #152]	; (8007ec8 <ComputeFFT+0x374>)
 8007e30:	f7f8 f99a 	bl	8000168 <__aeabi_dsub>
 8007e34:	4603      	mov	r3, r0
 8007e36:	460c      	mov	r4, r1
 8007e38:	4618      	mov	r0, r3
 8007e3a:	4621      	mov	r1, r4
 8007e3c:	f04f 0200 	mov.w	r2, #0
 8007e40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e44:	f7f8 fc72 	bl	800072c <__aeabi_ddiv>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	4621      	mov	r1, r4
 8007e50:	f005 fbfa 	bl	800d648 <sqrt>
 8007e54:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
		if (dir == FFT_FORWARD) {
 8007e58:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d105      	bne.n	8007e6c <ComputeFFT+0x318>
			c2 = -c2;
 8007e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e62:	653b      	str	r3, [r7, #80]	; 0x50
 8007e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e66:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007e6a:	657b      	str	r3, [r7, #84]	; 0x54
		}
		c1 = sqrt((1.0 + c1) / 2.0);
 8007e6c:	f04f 0200 	mov.w	r2, #0
 8007e70:	4b15      	ldr	r3, [pc, #84]	; (8007ec8 <ComputeFFT+0x374>)
 8007e72:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007e76:	f7f8 f979 	bl	800016c <__adddf3>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	460c      	mov	r4, r1
 8007e7e:	4618      	mov	r0, r3
 8007e80:	4621      	mov	r1, r4
 8007e82:	f04f 0200 	mov.w	r2, #0
 8007e86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e8a:	f7f8 fc4f 	bl	800072c <__aeabi_ddiv>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	460c      	mov	r4, r1
 8007e92:	4618      	mov	r0, r3
 8007e94:	4621      	mov	r1, r4
 8007e96:	f005 fbd7 	bl	800d648 <sqrt>
 8007e9a:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
	for (uint8_t l = 0; (l < power); l++) {
 8007e9e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8007ea8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8007eac:	797b      	ldrb	r3, [r7, #5]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	f4ff aec1 	bcc.w	8007c36 <ComputeFFT+0xe2>
	}
	// Scaling for reverse transform
	if (dir != FFT_FORWARD) {
 8007eb4:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d03e      	beq.n	8007f3a <ComputeFFT+0x3e6>
		for (uint16_t i = 0; i < samples; i++) {
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007ec0:	e037      	b.n	8007f32 <ComputeFFT+0x3de>
 8007ec2:	bf00      	nop
 8007ec4:	bff00000 	.word	0xbff00000
 8007ec8:	3ff00000 	.word	0x3ff00000
			 vReal[i] /= samples;
 8007ecc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007ed8:	88fb      	ldrh	r3, [r7, #6]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7f8 fa92 	bl	8000404 <__aeabi_i2d>
 8007ee0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	18d6      	adds	r6, r2, r3
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	4620      	mov	r0, r4
 8007eee:	4629      	mov	r1, r5
 8007ef0:	f7f8 fc1c 	bl	800072c <__aeabi_ddiv>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	e9c6 3400 	strd	r3, r4, [r6]
			 vImag[i] /= samples;
 8007efc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007efe:	00db      	lsls	r3, r3, #3
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	4413      	add	r3, r2
 8007f04:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007f08:	88fb      	ldrh	r3, [r7, #6]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7f8 fa7a 	bl	8000404 <__aeabi_i2d>
 8007f10:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007f12:	00db      	lsls	r3, r3, #3
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	18d6      	adds	r6, r2, r3
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	4629      	mov	r1, r5
 8007f20:	f7f8 fc04 	bl	800072c <__aeabi_ddiv>
 8007f24:	4603      	mov	r3, r0
 8007f26:	460c      	mov	r4, r1
 8007f28:	e9c6 3400 	strd	r3, r4, [r6]
		for (uint16_t i = 0; i < samples; i++) {
 8007f2c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007f2e:	3301      	adds	r3, #1
 8007f30:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007f32:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007f34:	88fb      	ldrh	r3, [r7, #6]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d3c8      	bcc.n	8007ecc <ComputeFFT+0x378>
		}
	}
}
 8007f3a:	bf00      	nop
 8007f3c:	376c      	adds	r7, #108	; 0x6c
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f42:	bf00      	nop

08007f44 <Exponent>:
		vReal[i] = sqrt(sq(vReal[i]) + sq(vImag[i]));
	}
}


uint8_t Exponent(uint16_t value){
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	80fb      	strh	r3, [r7, #6]
	// Calculates the base 2 logarithm of a value
	uint8_t result = 0;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	73fb      	strb	r3, [r7, #15]
	while (((value >> result) & 1) != 1) result++;
 8007f52:	e002      	b.n	8007f5a <Exponent+0x16>
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
 8007f56:	3301      	adds	r3, #1
 8007f58:	73fb      	strb	r3, [r7, #15]
 8007f5a:	88fa      	ldrh	r2, [r7, #6]
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	fa42 f303 	asr.w	r3, r2, r3
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d0f4      	beq.n	8007f54 <Exponent+0x10>
	return(result);
 8007f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bc80      	pop	{r7}
 8007f74:	4770      	bx	lr

08007f76 <Swap>:

// Private functions

void Swap(double *x, double *y){
 8007f76:	b490      	push	{r4, r7}
 8007f78:	b084      	sub	sp, #16
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	6039      	str	r1, [r7, #0]
	double temp = *x;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	cb18      	ldmia	r3, {r3, r4}
 8007f84:	e9c7 3402 	strd	r3, r4, [r7, #8]
	*x = *y;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	cb18      	ldmia	r3, {r3, r4}
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	e9c2 3400 	strd	r3, r4, [r2]
	*y = temp;
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8007f98:	e9c2 3400 	strd	r3, r4, [r2]
}
 8007f9c:	bf00      	nop
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bc90      	pop	{r4, r7}
 8007fa4:	4770      	bx	lr
	...

08007fa8 <Windowing>:


void Windowing(double *vData, uint16_t samples, uint8_t windowType, uint8_t dir)
{// Weighing factors are computed once before multiple use of FFT
 8007fa8:	b5b0      	push	{r4, r5, r7, lr}
 8007faa:	b08c      	sub	sp, #48	; 0x30
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	4608      	mov	r0, r1
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	807b      	strh	r3, [r7, #2]
 8007fba:	460b      	mov	r3, r1
 8007fbc:	707b      	strb	r3, [r7, #1]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	703b      	strb	r3, [r7, #0]
// The weighing function is symetric; half the weighs are recorded
	double samplesMinusOne = (double)(samples - 1.0);
 8007fc2:	887b      	ldrh	r3, [r7, #2]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7f8 fa1d 	bl	8000404 <__aeabi_i2d>
 8007fca:	f04f 0200 	mov.w	r2, #0
 8007fce:	4bc2      	ldr	r3, [pc, #776]	; (80082d8 <Windowing+0x330>)
 8007fd0:	f7f8 f8ca 	bl	8000168 <__aeabi_dsub>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 8007fdc:	2300      	movs	r3, #0
 8007fde:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007fe0:	e2f9      	b.n	80085d6 <Windowing+0x62e>
		double indexMinusOne = (double) i;
 8007fe2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7f8 f9fd 	bl	80003e4 <__aeabi_ui2d>
 8007fea:	4603      	mov	r3, r0
 8007fec:	460c      	mov	r4, r1
 8007fee:	e9c7 3404 	strd	r3, r4, [r7, #16]
		double ratio = (indexMinusOne / samplesMinusOne);
 8007ff2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ff6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007ffa:	f7f8 fb97 	bl	800072c <__aeabi_ddiv>
 8007ffe:	4603      	mov	r3, r0
 8008000:	460c      	mov	r4, r1
 8008002:	e9c7 3402 	strd	r3, r4, [r7, #8]
		double weighingFactor = 1.0;
 8008006:	f04f 0300 	mov.w	r3, #0
 800800a:	4cb3      	ldr	r4, [pc, #716]	; (80082d8 <Windowing+0x330>)
 800800c:	e9c7 3408 	strd	r3, r4, [r7, #32]
		// Compute and record weighting factor
		switch (windowType) {
 8008010:	787b      	ldrb	r3, [r7, #1]
 8008012:	2b09      	cmp	r3, #9
 8008014:	f200 8284 	bhi.w	8008520 <Windowing+0x578>
 8008018:	a201      	add	r2, pc, #4	; (adr r2, 8008020 <Windowing+0x78>)
 800801a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801e:	bf00      	nop
 8008020:	08008049 	.word	0x08008049
 8008024:	08008055 	.word	0x08008055
 8008028:	08008095 	.word	0x08008095
 800802c:	080080dd 	.word	0x080080dd
 8008030:	0800814b 	.word	0x0800814b
 8008034:	080081fb 	.word	0x080081fb
 8008038:	080082dd 	.word	0x080082dd
 800803c:	0800838d 	.word	0x0800838d
 8008040:	0800843d 	.word	0x0800843d
 8008044:	080084b5 	.word	0x080084b5
		case FFT_WIN_TYP_RECTANGLE: // rectangle (box car)
			weighingFactor = 1.0;
 8008048:	f04f 0300 	mov.w	r3, #0
 800804c:	4ca2      	ldr	r4, [pc, #648]	; (80082d8 <Windowing+0x330>)
 800804e:	e9c7 3408 	strd	r3, r4, [r7, #32]
			break;
 8008052:	e265      	b.n	8008520 <Windowing+0x578>
		case FFT_WIN_TYP_HAMMING: // hamming
			weighingFactor = 0.54 - (0.46 * cos(twoPi * ratio));
 8008054:	a388      	add	r3, pc, #544	; (adr r3, 8008278 <Windowing+0x2d0>)
 8008056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800805e:	f7f8 fa3b 	bl	80004d8 <__aeabi_dmul>
 8008062:	4603      	mov	r3, r0
 8008064:	460c      	mov	r4, r1
 8008066:	4618      	mov	r0, r3
 8008068:	4621      	mov	r1, r4
 800806a:	f005 fab7 	bl	800d5dc <cos>
 800806e:	a384      	add	r3, pc, #528	; (adr r3, 8008280 <Windowing+0x2d8>)
 8008070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008074:	f7f8 fa30 	bl	80004d8 <__aeabi_dmul>
 8008078:	4603      	mov	r3, r0
 800807a:	460c      	mov	r4, r1
 800807c:	461a      	mov	r2, r3
 800807e:	4623      	mov	r3, r4
 8008080:	a181      	add	r1, pc, #516	; (adr r1, 8008288 <Windowing+0x2e0>)
 8008082:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008086:	f7f8 f86f 	bl	8000168 <__aeabi_dsub>
 800808a:	4603      	mov	r3, r0
 800808c:	460c      	mov	r4, r1
 800808e:	e9c7 3408 	strd	r3, r4, [r7, #32]
			break;
 8008092:	e245      	b.n	8008520 <Windowing+0x578>
		case FFT_WIN_TYP_HANN: // hann
			weighingFactor = 0.54 * (1.0 - cos(twoPi * ratio));
 8008094:	a378      	add	r3, pc, #480	; (adr r3, 8008278 <Windowing+0x2d0>)
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800809e:	f7f8 fa1b 	bl	80004d8 <__aeabi_dmul>
 80080a2:	4603      	mov	r3, r0
 80080a4:	460c      	mov	r4, r1
 80080a6:	4618      	mov	r0, r3
 80080a8:	4621      	mov	r1, r4
 80080aa:	f005 fa97 	bl	800d5dc <cos>
 80080ae:	4603      	mov	r3, r0
 80080b0:	460c      	mov	r4, r1
 80080b2:	461a      	mov	r2, r3
 80080b4:	4623      	mov	r3, r4
 80080b6:	f04f 0000 	mov.w	r0, #0
 80080ba:	4987      	ldr	r1, [pc, #540]	; (80082d8 <Windowing+0x330>)
 80080bc:	f7f8 f854 	bl	8000168 <__aeabi_dsub>
 80080c0:	4603      	mov	r3, r0
 80080c2:	460c      	mov	r4, r1
 80080c4:	4618      	mov	r0, r3
 80080c6:	4621      	mov	r1, r4
 80080c8:	a36f      	add	r3, pc, #444	; (adr r3, 8008288 <Windowing+0x2e0>)
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	f7f8 fa03 	bl	80004d8 <__aeabi_dmul>
 80080d2:	4603      	mov	r3, r0
 80080d4:	460c      	mov	r4, r1
 80080d6:	e9c7 3408 	strd	r3, r4, [r7, #32]
			break;
 80080da:	e221      	b.n	8008520 <Windowing+0x578>
		case FFT_WIN_TYP_TRIANGLE: // triangle (Bartlett)
			weighingFactor = 1.0 - ((2.0 * abs(indexMinusOne - (samplesMinusOne / 2.0))) / samplesMinusOne);
 80080dc:	f04f 0200 	mov.w	r2, #0
 80080e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80080e8:	f7f8 fb20 	bl	800072c <__aeabi_ddiv>
 80080ec:	4603      	mov	r3, r0
 80080ee:	460c      	mov	r4, r1
 80080f0:	461a      	mov	r2, r3
 80080f2:	4623      	mov	r3, r4
 80080f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80080f8:	f7f8 f836 	bl	8000168 <__aeabi_dsub>
 80080fc:	4603      	mov	r3, r0
 80080fe:	460c      	mov	r4, r1
 8008100:	4618      	mov	r0, r3
 8008102:	4621      	mov	r1, r4
 8008104:	f7f8 fc98 	bl	8000a38 <__aeabi_d2iz>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	bfb8      	it	lt
 800810e:	425b      	neglt	r3, r3
 8008110:	4618      	mov	r0, r3
 8008112:	f7f8 f977 	bl	8000404 <__aeabi_i2d>
 8008116:	4602      	mov	r2, r0
 8008118:	460b      	mov	r3, r1
 800811a:	f7f8 f827 	bl	800016c <__adddf3>
 800811e:	4603      	mov	r3, r0
 8008120:	460c      	mov	r4, r1
 8008122:	4618      	mov	r0, r3
 8008124:	4621      	mov	r1, r4
 8008126:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800812a:	f7f8 faff 	bl	800072c <__aeabi_ddiv>
 800812e:	4603      	mov	r3, r0
 8008130:	460c      	mov	r4, r1
 8008132:	461a      	mov	r2, r3
 8008134:	4623      	mov	r3, r4
 8008136:	f04f 0000 	mov.w	r0, #0
 800813a:	4967      	ldr	r1, [pc, #412]	; (80082d8 <Windowing+0x330>)
 800813c:	f7f8 f814 	bl	8000168 <__aeabi_dsub>
 8008140:	4603      	mov	r3, r0
 8008142:	460c      	mov	r4, r1
 8008144:	e9c7 3408 	strd	r3, r4, [r7, #32]
			break;
 8008148:	e1ea      	b.n	8008520 <Windowing+0x578>
		case FFT_WIN_TYP_NUTTALL: // nuttall
			weighingFactor = 0.355768 - (0.487396 * (cos(twoPi * ratio))) + (0.144232 * (cos(fourPi * ratio))) - (0.012604 * (cos(sixPi * ratio)));
 800814a:	a34b      	add	r3, pc, #300	; (adr r3, 8008278 <Windowing+0x2d0>)
 800814c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008150:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008154:	f7f8 f9c0 	bl	80004d8 <__aeabi_dmul>
 8008158:	4603      	mov	r3, r0
 800815a:	460c      	mov	r4, r1
 800815c:	4618      	mov	r0, r3
 800815e:	4621      	mov	r1, r4
 8008160:	f005 fa3c 	bl	800d5dc <cos>
 8008164:	a34a      	add	r3, pc, #296	; (adr r3, 8008290 <Windowing+0x2e8>)
 8008166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816a:	f7f8 f9b5 	bl	80004d8 <__aeabi_dmul>
 800816e:	4603      	mov	r3, r0
 8008170:	460c      	mov	r4, r1
 8008172:	461a      	mov	r2, r3
 8008174:	4623      	mov	r3, r4
 8008176:	a148      	add	r1, pc, #288	; (adr r1, 8008298 <Windowing+0x2f0>)
 8008178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800817c:	f7f7 fff4 	bl	8000168 <__aeabi_dsub>
 8008180:	4603      	mov	r3, r0
 8008182:	460c      	mov	r4, r1
 8008184:	4625      	mov	r5, r4
 8008186:	461c      	mov	r4, r3
 8008188:	a345      	add	r3, pc, #276	; (adr r3, 80082a0 <Windowing+0x2f8>)
 800818a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008192:	f7f8 f9a1 	bl	80004d8 <__aeabi_dmul>
 8008196:	4602      	mov	r2, r0
 8008198:	460b      	mov	r3, r1
 800819a:	4610      	mov	r0, r2
 800819c:	4619      	mov	r1, r3
 800819e:	f005 fa1d 	bl	800d5dc <cos>
 80081a2:	a341      	add	r3, pc, #260	; (adr r3, 80082a8 <Windowing+0x300>)
 80081a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a8:	f7f8 f996 	bl	80004d8 <__aeabi_dmul>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	4620      	mov	r0, r4
 80081b2:	4629      	mov	r1, r5
 80081b4:	f7f7 ffda 	bl	800016c <__adddf3>
 80081b8:	4603      	mov	r3, r0
 80081ba:	460c      	mov	r4, r1
 80081bc:	4625      	mov	r5, r4
 80081be:	461c      	mov	r4, r3
 80081c0:	a33b      	add	r3, pc, #236	; (adr r3, 80082b0 <Windowing+0x308>)
 80081c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081ca:	f7f8 f985 	bl	80004d8 <__aeabi_dmul>
 80081ce:	4602      	mov	r2, r0
 80081d0:	460b      	mov	r3, r1
 80081d2:	4610      	mov	r0, r2
 80081d4:	4619      	mov	r1, r3
 80081d6:	f005 fa01 	bl	800d5dc <cos>
 80081da:	a337      	add	r3, pc, #220	; (adr r3, 80082b8 <Windowing+0x310>)
 80081dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e0:	f7f8 f97a 	bl	80004d8 <__aeabi_dmul>
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	4620      	mov	r0, r4
 80081ea:	4629      	mov	r1, r5
 80081ec:	f7f7 ffbc 	bl	8000168 <__aeabi_dsub>
 80081f0:	4603      	mov	r3, r0
 80081f2:	460c      	mov	r4, r1
 80081f4:	e9c7 3408 	strd	r3, r4, [r7, #32]
			break;
 80081f8:	e192      	b.n	8008520 <Windowing+0x578>
		case FFT_WIN_TYP_BLACKMAN: // blackman
			weighingFactor = 0.42323 - (0.49755 * (cos(twoPi * ratio))) + (0.07922 * (cos(fourPi * ratio)));
 80081fa:	a31f      	add	r3, pc, #124	; (adr r3, 8008278 <Windowing+0x2d0>)
 80081fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008200:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008204:	f7f8 f968 	bl	80004d8 <__aeabi_dmul>
 8008208:	4603      	mov	r3, r0
 800820a:	460c      	mov	r4, r1
 800820c:	4618      	mov	r0, r3
 800820e:	4621      	mov	r1, r4
 8008210:	f005 f9e4 	bl	800d5dc <cos>
 8008214:	a32a      	add	r3, pc, #168	; (adr r3, 80082c0 <Windowing+0x318>)
 8008216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821a:	f7f8 f95d 	bl	80004d8 <__aeabi_dmul>
 800821e:	4603      	mov	r3, r0
 8008220:	460c      	mov	r4, r1
 8008222:	461a      	mov	r2, r3
 8008224:	4623      	mov	r3, r4
 8008226:	a128      	add	r1, pc, #160	; (adr r1, 80082c8 <Windowing+0x320>)
 8008228:	e9d1 0100 	ldrd	r0, r1, [r1]
 800822c:	f7f7 ff9c 	bl	8000168 <__aeabi_dsub>
 8008230:	4603      	mov	r3, r0
 8008232:	460c      	mov	r4, r1
 8008234:	4625      	mov	r5, r4
 8008236:	461c      	mov	r4, r3
 8008238:	a319      	add	r3, pc, #100	; (adr r3, 80082a0 <Windowing+0x2f8>)
 800823a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008242:	f7f8 f949 	bl	80004d8 <__aeabi_dmul>
 8008246:	4602      	mov	r2, r0
 8008248:	460b      	mov	r3, r1
 800824a:	4610      	mov	r0, r2
 800824c:	4619      	mov	r1, r3
 800824e:	f005 f9c5 	bl	800d5dc <cos>
 8008252:	a31f      	add	r3, pc, #124	; (adr r3, 80082d0 <Windowing+0x328>)
 8008254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008258:	f7f8 f93e 	bl	80004d8 <__aeabi_dmul>
 800825c:	4602      	mov	r2, r0
 800825e:	460b      	mov	r3, r1
 8008260:	4620      	mov	r0, r4
 8008262:	4629      	mov	r1, r5
 8008264:	f7f7 ff82 	bl	800016c <__adddf3>
 8008268:	4603      	mov	r3, r0
 800826a:	460c      	mov	r4, r1
 800826c:	e9c7 3408 	strd	r3, r4, [r7, #32]
			break;
 8008270:	e156      	b.n	8008520 <Windowing+0x578>
 8008272:	bf00      	nop
 8008274:	f3af 8000 	nop.w
 8008278:	5474a168 	.word	0x5474a168
 800827c:	401921fb 	.word	0x401921fb
 8008280:	d70a3d71 	.word	0xd70a3d71
 8008284:	3fdd70a3 	.word	0x3fdd70a3
 8008288:	147ae148 	.word	0x147ae148
 800828c:	3fe147ae 	.word	0x3fe147ae
 8008290:	fe0ce0b9 	.word	0xfe0ce0b9
 8008294:	3fdf317e 	.word	0x3fdf317e
 8008298:	253da72a 	.word	0x253da72a
 800829c:	3fd6c4e7 	.word	0x3fd6c4e7
 80082a0:	541ebb2c 	.word	0x541ebb2c
 80082a4:	402921fb 	.word	0x402921fb
 80082a8:	b584b1ab 	.word	0xb584b1ab
 80082ac:	3fc27631 	.word	0x3fc27631
 80082b0:	7f57790e 	.word	0x7f57790e
 80082b4:	4032d97c 	.word	0x4032d97c
 80082b8:	3e63e8de 	.word	0x3e63e8de
 80082bc:	3f89d020 	.word	0x3f89d020
 80082c0:	f487fcb9 	.word	0xf487fcb9
 80082c4:	3fdfd7db 	.word	0x3fdfd7db
 80082c8:	482be8bc 	.word	0x482be8bc
 80082cc:	3fdb1633 	.word	0x3fdb1633
 80082d0:	0d306a2b 	.word	0x0d306a2b
 80082d4:	3fb447c3 	.word	0x3fb447c3
 80082d8:	3ff00000 	.word	0x3ff00000
		case FFT_WIN_TYP_BLACKMAN_NUTTALL: // blackman nuttall
			weighingFactor = 0.3635819 - (0.4891775 * (cos(twoPi * ratio))) + (0.1365995 * (cos(fourPi * ratio))) - (0.0106411 * (cos(sixPi * ratio)));
 80082dc:	a3c4      	add	r3, pc, #784	; (adr r3, 80085f0 <Windowing+0x648>)
 80082de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082e6:	f7f8 f8f7 	bl	80004d8 <__aeabi_dmul>
 80082ea:	4603      	mov	r3, r0
 80082ec:	460c      	mov	r4, r1
 80082ee:	4618      	mov	r0, r3
 80082f0:	4621      	mov	r1, r4
 80082f2:	f005 f973 	bl	800d5dc <cos>
 80082f6:	a3c0      	add	r3, pc, #768	; (adr r3, 80085f8 <Windowing+0x650>)
 80082f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fc:	f7f8 f8ec 	bl	80004d8 <__aeabi_dmul>
 8008300:	4603      	mov	r3, r0
 8008302:	460c      	mov	r4, r1
 8008304:	461a      	mov	r2, r3
 8008306:	4623      	mov	r3, r4
 8008308:	a1bd      	add	r1, pc, #756	; (adr r1, 8008600 <Windowing+0x658>)
 800830a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800830e:	f7f7 ff2b 	bl	8000168 <__aeabi_dsub>
 8008312:	4603      	mov	r3, r0
 8008314:	460c      	mov	r4, r1
 8008316:	4625      	mov	r5, r4
 8008318:	461c      	mov	r4, r3
 800831a:	a3bb      	add	r3, pc, #748	; (adr r3, 8008608 <Windowing+0x660>)
 800831c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008320:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008324:	f7f8 f8d8 	bl	80004d8 <__aeabi_dmul>
 8008328:	4602      	mov	r2, r0
 800832a:	460b      	mov	r3, r1
 800832c:	4610      	mov	r0, r2
 800832e:	4619      	mov	r1, r3
 8008330:	f005 f954 	bl	800d5dc <cos>
 8008334:	a3b6      	add	r3, pc, #728	; (adr r3, 8008610 <Windowing+0x668>)
 8008336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833a:	f7f8 f8cd 	bl	80004d8 <__aeabi_dmul>
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	4620      	mov	r0, r4
 8008344:	4629      	mov	r1, r5
 8008346:	f7f7 ff11 	bl	800016c <__adddf3>
 800834a:	4603      	mov	r3, r0
 800834c:	460c      	mov	r4, r1
 800834e:	4625      	mov	r5, r4
 8008350:	461c      	mov	r4, r3
 8008352:	a3b1      	add	r3, pc, #708	; (adr r3, 8008618 <Windowing+0x670>)
 8008354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008358:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800835c:	f7f8 f8bc 	bl	80004d8 <__aeabi_dmul>
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4610      	mov	r0, r2
 8008366:	4619      	mov	r1, r3
 8008368:	f005 f938 	bl	800d5dc <cos>
 800836c:	a3ac      	add	r3, pc, #688	; (adr r3, 8008620 <Windowing+0x678>)
 800836e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008372:	f7f8 f8b1 	bl	80004d8 <__aeabi_dmul>
 8008376:	4602      	mov	r2, r0
 8008378:	460b      	mov	r3, r1
 800837a:	4620      	mov	r0, r4
 800837c:	4629      	mov	r1, r5
 800837e:	f7f7 fef3 	bl	8000168 <__aeabi_dsub>
 8008382:	4603      	mov	r3, r0
 8008384:	460c      	mov	r4, r1
 8008386:	e9c7 3408 	strd	r3, r4, [r7, #32]
			break;
 800838a:	e0c9      	b.n	8008520 <Windowing+0x578>
		case FFT_WIN_TYP_BLACKMAN_HARRIS: // blackman harris
			weighingFactor = 0.35875 - (0.48829 * (cos(twoPi * ratio))) + (0.14128 * (cos(fourPi * ratio))) - (0.01168 * (cos(sixPi * ratio)));
 800838c:	a398      	add	r3, pc, #608	; (adr r3, 80085f0 <Windowing+0x648>)
 800838e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008392:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008396:	f7f8 f89f 	bl	80004d8 <__aeabi_dmul>
 800839a:	4603      	mov	r3, r0
 800839c:	460c      	mov	r4, r1
 800839e:	4618      	mov	r0, r3
 80083a0:	4621      	mov	r1, r4
 80083a2:	f005 f91b 	bl	800d5dc <cos>
 80083a6:	a3a0      	add	r3, pc, #640	; (adr r3, 8008628 <Windowing+0x680>)
 80083a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ac:	f7f8 f894 	bl	80004d8 <__aeabi_dmul>
 80083b0:	4603      	mov	r3, r0
 80083b2:	460c      	mov	r4, r1
 80083b4:	461a      	mov	r2, r3
 80083b6:	4623      	mov	r3, r4
 80083b8:	a19d      	add	r1, pc, #628	; (adr r1, 8008630 <Windowing+0x688>)
 80083ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083be:	f7f7 fed3 	bl	8000168 <__aeabi_dsub>
 80083c2:	4603      	mov	r3, r0
 80083c4:	460c      	mov	r4, r1
 80083c6:	4625      	mov	r5, r4
 80083c8:	461c      	mov	r4, r3
 80083ca:	a38f      	add	r3, pc, #572	; (adr r3, 8008608 <Windowing+0x660>)
 80083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083d4:	f7f8 f880 	bl	80004d8 <__aeabi_dmul>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	4610      	mov	r0, r2
 80083de:	4619      	mov	r1, r3
 80083e0:	f005 f8fc 	bl	800d5dc <cos>
 80083e4:	a394      	add	r3, pc, #592	; (adr r3, 8008638 <Windowing+0x690>)
 80083e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ea:	f7f8 f875 	bl	80004d8 <__aeabi_dmul>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	4620      	mov	r0, r4
 80083f4:	4629      	mov	r1, r5
 80083f6:	f7f7 feb9 	bl	800016c <__adddf3>
 80083fa:	4603      	mov	r3, r0
 80083fc:	460c      	mov	r4, r1
 80083fe:	4625      	mov	r5, r4
 8008400:	461c      	mov	r4, r3
 8008402:	a385      	add	r3, pc, #532	; (adr r3, 8008618 <Windowing+0x670>)
 8008404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008408:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800840c:	f7f8 f864 	bl	80004d8 <__aeabi_dmul>
 8008410:	4602      	mov	r2, r0
 8008412:	460b      	mov	r3, r1
 8008414:	4610      	mov	r0, r2
 8008416:	4619      	mov	r1, r3
 8008418:	f005 f8e0 	bl	800d5dc <cos>
 800841c:	a388      	add	r3, pc, #544	; (adr r3, 8008640 <Windowing+0x698>)
 800841e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008422:	f7f8 f859 	bl	80004d8 <__aeabi_dmul>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	4620      	mov	r0, r4
 800842c:	4629      	mov	r1, r5
 800842e:	f7f7 fe9b 	bl	8000168 <__aeabi_dsub>
 8008432:	4603      	mov	r3, r0
 8008434:	460c      	mov	r4, r1
 8008436:	e9c7 3408 	strd	r3, r4, [r7, #32]
			break;
 800843a:	e071      	b.n	8008520 <Windowing+0x578>
		case FFT_WIN_TYP_FLT_TOP: // flat top
			weighingFactor = 0.2810639 - (0.5208972 * cos(twoPi * ratio)) + (0.1980399 * cos(fourPi * ratio));
 800843c:	a36c      	add	r3, pc, #432	; (adr r3, 80085f0 <Windowing+0x648>)
 800843e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008442:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008446:	f7f8 f847 	bl	80004d8 <__aeabi_dmul>
 800844a:	4603      	mov	r3, r0
 800844c:	460c      	mov	r4, r1
 800844e:	4618      	mov	r0, r3
 8008450:	4621      	mov	r1, r4
 8008452:	f005 f8c3 	bl	800d5dc <cos>
 8008456:	a37c      	add	r3, pc, #496	; (adr r3, 8008648 <Windowing+0x6a0>)
 8008458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845c:	f7f8 f83c 	bl	80004d8 <__aeabi_dmul>
 8008460:	4603      	mov	r3, r0
 8008462:	460c      	mov	r4, r1
 8008464:	461a      	mov	r2, r3
 8008466:	4623      	mov	r3, r4
 8008468:	a179      	add	r1, pc, #484	; (adr r1, 8008650 <Windowing+0x6a8>)
 800846a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800846e:	f7f7 fe7b 	bl	8000168 <__aeabi_dsub>
 8008472:	4603      	mov	r3, r0
 8008474:	460c      	mov	r4, r1
 8008476:	4625      	mov	r5, r4
 8008478:	461c      	mov	r4, r3
 800847a:	a363      	add	r3, pc, #396	; (adr r3, 8008608 <Windowing+0x660>)
 800847c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008480:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008484:	f7f8 f828 	bl	80004d8 <__aeabi_dmul>
 8008488:	4602      	mov	r2, r0
 800848a:	460b      	mov	r3, r1
 800848c:	4610      	mov	r0, r2
 800848e:	4619      	mov	r1, r3
 8008490:	f005 f8a4 	bl	800d5dc <cos>
 8008494:	a370      	add	r3, pc, #448	; (adr r3, 8008658 <Windowing+0x6b0>)
 8008496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849a:	f7f8 f81d 	bl	80004d8 <__aeabi_dmul>
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	4620      	mov	r0, r4
 80084a4:	4629      	mov	r1, r5
 80084a6:	f7f7 fe61 	bl	800016c <__adddf3>
 80084aa:	4603      	mov	r3, r0
 80084ac:	460c      	mov	r4, r1
 80084ae:	e9c7 3408 	strd	r3, r4, [r7, #32]
			break;
 80084b2:	e035      	b.n	8008520 <Windowing+0x578>
		case FFT_WIN_TYP_WELCH: // welch
			weighingFactor = 1.0 - sq((indexMinusOne - samplesMinusOne / 2.0) / (samplesMinusOne / 2.0));
 80084b4:	f04f 0200 	mov.w	r2, #0
 80084b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80084bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80084c0:	f7f8 f934 	bl	800072c <__aeabi_ddiv>
 80084c4:	4603      	mov	r3, r0
 80084c6:	460c      	mov	r4, r1
 80084c8:	461a      	mov	r2, r3
 80084ca:	4623      	mov	r3, r4
 80084cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80084d0:	f7f7 fe4a 	bl	8000168 <__aeabi_dsub>
 80084d4:	4603      	mov	r3, r0
 80084d6:	460c      	mov	r4, r1
 80084d8:	4625      	mov	r5, r4
 80084da:	461c      	mov	r4, r3
 80084dc:	f04f 0200 	mov.w	r2, #0
 80084e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80084e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80084e8:	f7f8 f920 	bl	800072c <__aeabi_ddiv>
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	4620      	mov	r0, r4
 80084f2:	4629      	mov	r1, r5
 80084f4:	f7f8 f91a 	bl	800072c <__aeabi_ddiv>
 80084f8:	4603      	mov	r3, r0
 80084fa:	460c      	mov	r4, r1
 80084fc:	4618      	mov	r0, r3
 80084fe:	4621      	mov	r1, r4
 8008500:	f000 f8b0 	bl	8008664 <sq>
 8008504:	4603      	mov	r3, r0
 8008506:	460c      	mov	r4, r1
 8008508:	461a      	mov	r2, r3
 800850a:	4623      	mov	r3, r4
 800850c:	f04f 0000 	mov.w	r0, #0
 8008510:	4953      	ldr	r1, [pc, #332]	; (8008660 <Windowing+0x6b8>)
 8008512:	f7f7 fe29 	bl	8000168 <__aeabi_dsub>
 8008516:	4603      	mov	r3, r0
 8008518:	460c      	mov	r4, r1
 800851a:	e9c7 3408 	strd	r3, r4, [r7, #32]
			break;
 800851e:	bf00      	nop
		}
		if (dir == FFT_FORWARD) {
 8008520:	783b      	ldrb	r3, [r7, #0]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d12a      	bne.n	800857c <Windowing+0x5d4>
			vData[i] *= weighingFactor;
 8008526:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008528:	00db      	lsls	r3, r3, #3
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	4413      	add	r3, r2
 800852e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008532:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008534:	00db      	lsls	r3, r3, #3
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	18d5      	adds	r5, r2, r3
 800853a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800853e:	f7f7 ffcb 	bl	80004d8 <__aeabi_dmul>
 8008542:	4603      	mov	r3, r0
 8008544:	460c      	mov	r4, r1
 8008546:	e9c5 3400 	strd	r3, r4, [r5]
			vData[samples - (i + 1)] *= weighingFactor;
 800854a:	887a      	ldrh	r2, [r7, #2]
 800854c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800854e:	3301      	adds	r3, #1
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	00db      	lsls	r3, r3, #3
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	4413      	add	r3, r2
 8008558:	e9d3 0100 	ldrd	r0, r1, [r3]
 800855c:	887a      	ldrh	r2, [r7, #2]
 800855e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008560:	3301      	adds	r3, #1
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	00db      	lsls	r3, r3, #3
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	18d5      	adds	r5, r2, r3
 800856a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800856e:	f7f7 ffb3 	bl	80004d8 <__aeabi_dmul>
 8008572:	4603      	mov	r3, r0
 8008574:	460c      	mov	r4, r1
 8008576:	e9c5 3400 	strd	r3, r4, [r5]
 800857a:	e029      	b.n	80085d0 <Windowing+0x628>
		}
		else {
			vData[i] /= weighingFactor;
 800857c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800857e:	00db      	lsls	r3, r3, #3
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	4413      	add	r3, r2
 8008584:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008588:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800858a:	00db      	lsls	r3, r3, #3
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	18d5      	adds	r5, r2, r3
 8008590:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008594:	f7f8 f8ca 	bl	800072c <__aeabi_ddiv>
 8008598:	4603      	mov	r3, r0
 800859a:	460c      	mov	r4, r1
 800859c:	e9c5 3400 	strd	r3, r4, [r5]
			vData[samples - (i + 1)] /= weighingFactor;
 80085a0:	887a      	ldrh	r2, [r7, #2]
 80085a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80085a4:	3301      	adds	r3, #1
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	00db      	lsls	r3, r3, #3
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	4413      	add	r3, r2
 80085ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80085b2:	887a      	ldrh	r2, [r7, #2]
 80085b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80085b6:	3301      	adds	r3, #1
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	00db      	lsls	r3, r3, #3
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	18d5      	adds	r5, r2, r3
 80085c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085c4:	f7f8 f8b2 	bl	800072c <__aeabi_ddiv>
 80085c8:	4603      	mov	r3, r0
 80085ca:	460c      	mov	r4, r1
 80085cc:	e9c5 3400 	strd	r3, r4, [r5]
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 80085d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80085d2:	3301      	adds	r3, #1
 80085d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80085d6:	887b      	ldrh	r3, [r7, #2]
 80085d8:	085b      	lsrs	r3, r3, #1
 80085da:	b29b      	uxth	r3, r3
 80085dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80085de:	429a      	cmp	r2, r3
 80085e0:	f4ff acff 	bcc.w	8007fe2 <Windowing+0x3a>
		}
	}
}
 80085e4:	bf00      	nop
 80085e6:	3730      	adds	r7, #48	; 0x30
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bdb0      	pop	{r4, r5, r7, pc}
 80085ec:	f3af 8000 	nop.w
 80085f0:	5474a168 	.word	0x5474a168
 80085f4:	401921fb 	.word	0x401921fb
 80085f8:	251c193b 	.word	0x251c193b
 80085fc:	3fdf4eaf 	.word	0x3fdf4eaf
 8008600:	047ab904 	.word	0x047ab904
 8008604:	3fd744ed 	.word	0x3fd744ed
 8008608:	541ebb2c 	.word	0x541ebb2c
 800860c:	402921fb 	.word	0x402921fb
 8008610:	a89331a1 	.word	0xa89331a1
 8008614:	3fc17c17 	.word	0x3fc17c17
 8008618:	7f57790e 	.word	0x7f57790e
 800861c:	4032d97c 	.word	0x4032d97c
 8008620:	43f29e18 	.word	0x43f29e18
 8008624:	3f85cb00 	.word	0x3f85cb00
 8008628:	b33daf8e 	.word	0xb33daf8e
 800862c:	3fdf4024 	.word	0x3fdf4024
 8008630:	8f5c28f6 	.word	0x8f5c28f6
 8008634:	3fd6f5c2 	.word	0x3fd6f5c2
 8008638:	89ca18bd 	.word	0x89ca18bd
 800863c:	3fc21576 	.word	0x3fc21576
 8008640:	102363b2 	.word	0x102363b2
 8008644:	3f87ebaf 	.word	0x3f87ebaf
 8008648:	9ad27ebd 	.word	0x9ad27ebd
 800864c:	3fe0ab30 	.word	0x3fe0ab30
 8008650:	70a58489 	.word	0x70a58489
 8008654:	3fd1fcf3 	.word	0x3fd1fcf3
 8008658:	16e6cc52 	.word	0x16e6cc52
 800865c:	3fc9595f 	.word	0x3fc9595f
 8008660:	3ff00000 	.word	0x3ff00000

08008664 <sq>:



double sq(double x){ //math squaring function
 8008664:	b590      	push	{r4, r7, lr}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	e9c7 0100 	strd	r0, r1, [r7]
return 	x*x;
 800866e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008672:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008676:	f7f7 ff2f 	bl	80004d8 <__aeabi_dmul>
 800867a:	4603      	mov	r3, r0
 800867c:	460c      	mov	r4, r1
}
 800867e:	4618      	mov	r0, r3
 8008680:	4621      	mov	r1, r4
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	bd90      	pop	{r4, r7, pc}

08008688 <read_adc>:



uint16_t read_adc(){ //reads ADC0 into adcVAL (12-bit?)
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
    //HAL_ADC_Start(&hadc1);
    uint16_t adcVal = HAL_ADC_GetValue(&hadc1);
 800868e:	4805      	ldr	r0, [pc, #20]	; (80086a4 <read_adc+0x1c>)
 8008690:	f7f8 fc24 	bl	8000edc <HAL_ADC_GetValue>
 8008694:	4603      	mov	r3, r0
 8008696:	80fb      	strh	r3, [r7, #6]
	//HAL_ADC_Stop(&hadc1);
	return adcVal;
 8008698:	88fb      	ldrh	r3, [r7, #6]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	20000fe4 	.word	0x20000fe4

080086a8 <read_bat_adc>:
////////////////////////////////////////////////////////////////////////////////END FFt Lib functions

uint16_t read_bat_adc(){ //reads ADC0 into adcVAL (12-bit?)
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2, GPIO_PIN_SET);//Battery Check Enabled
 80086ae:	2201      	movs	r2, #1
 80086b0:	2104      	movs	r1, #4
 80086b2:	480a      	ldr	r0, [pc, #40]	; (80086dc <read_bat_adc+0x34>)
 80086b4:	f7f9 fa0f 	bl	8001ad6 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80086b8:	200a      	movs	r0, #10
 80086ba:	f7f8 fa67 	bl	8000b8c <HAL_Delay>
  //HAL_ADC_Start(&hadc2);
  uint16_t adcBatVal = HAL_ADC_GetValue(&hadc2);
 80086be:	4808      	ldr	r0, [pc, #32]	; (80086e0 <read_bat_adc+0x38>)
 80086c0:	f7f8 fc0c 	bl	8000edc <HAL_ADC_GetValue>
 80086c4:	4603      	mov	r3, r0
 80086c6:	80fb      	strh	r3, [r7, #6]
 // HAL_ADC_Stop(&hadc2);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2, GPIO_PIN_RESET);//Battery Check Disabled
 80086c8:	2200      	movs	r2, #0
 80086ca:	2104      	movs	r1, #4
 80086cc:	4803      	ldr	r0, [pc, #12]	; (80086dc <read_bat_adc+0x34>)
 80086ce:	f7f9 fa02 	bl	8001ad6 <HAL_GPIO_WritePin>
return adcBatVal;
 80086d2:	88fb      	ldrh	r3, [r7, #6]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	40010800 	.word	0x40010800
 80086e0:	20000d18 	.word	0x20000d18

080086e4 <graphMAG>:


void graphMAG() { //draws FFT magnitudes on OLED and RGB Matrix
 80086e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086e6:	b091      	sub	sp, #68	; 0x44
 80086e8:	af02      	add	r7, sp, #8
  uint8_t i;
  uint8_t Sc = 2;
 80086ea:	2302      	movs	r3, #2
 80086ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint16_t freqScale[16]={1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024}; //these set the upper limit (10Bit)
 80086f0:	4b93      	ldr	r3, [pc, #588]	; (8008940 <graphMAG+0x25c>)
 80086f2:	463c      	mov	r4, r7
 80086f4:	461d      	mov	r5, r3
 80086f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80086f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80086fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  // Loop for each magnitude and find the magnitiude. not really needed to sqrt
  for (i = 0; i < N; i++){
 8008702:	2300      	movs	r3, #0
 8008704:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008708:	e054      	b.n	80087b4 <graphMAG+0xd0>
	  MAG[i] = sqrt(REX[i]*REX[i] + IMX[i]*IMX[i]);
 800870a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800870e:	4a8d      	ldr	r2, [pc, #564]	; (8008944 <graphMAG+0x260>)
 8008710:	00db      	lsls	r3, r3, #3
 8008712:	4413      	add	r3, r2
 8008714:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008718:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800871c:	4a89      	ldr	r2, [pc, #548]	; (8008944 <graphMAG+0x260>)
 800871e:	00db      	lsls	r3, r3, #3
 8008720:	4413      	add	r3, r2
 8008722:	cb18      	ldmia	r3, {r3, r4}
 8008724:	461a      	mov	r2, r3
 8008726:	4623      	mov	r3, r4
 8008728:	f7f7 fed6 	bl	80004d8 <__aeabi_dmul>
 800872c:	4603      	mov	r3, r0
 800872e:	460c      	mov	r4, r1
 8008730:	461d      	mov	r5, r3
 8008732:	4626      	mov	r6, r4
 8008734:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008738:	4a83      	ldr	r2, [pc, #524]	; (8008948 <graphMAG+0x264>)
 800873a:	00db      	lsls	r3, r3, #3
 800873c:	4413      	add	r3, r2
 800873e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008742:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008746:	4a80      	ldr	r2, [pc, #512]	; (8008948 <graphMAG+0x264>)
 8008748:	00db      	lsls	r3, r3, #3
 800874a:	4413      	add	r3, r2
 800874c:	cb18      	ldmia	r3, {r3, r4}
 800874e:	461a      	mov	r2, r3
 8008750:	4623      	mov	r3, r4
 8008752:	f7f7 fec1 	bl	80004d8 <__aeabi_dmul>
 8008756:	4603      	mov	r3, r0
 8008758:	460c      	mov	r4, r1
 800875a:	461a      	mov	r2, r3
 800875c:	4623      	mov	r3, r4
 800875e:	4628      	mov	r0, r5
 8008760:	4631      	mov	r1, r6
 8008762:	f7f7 fd03 	bl	800016c <__adddf3>
 8008766:	4603      	mov	r3, r0
 8008768:	460c      	mov	r4, r1
 800876a:	4618      	mov	r0, r3
 800876c:	4621      	mov	r1, r4
 800876e:	f004 ff6b 	bl	800d648 <sqrt>
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800877a:	4610      	mov	r0, r2
 800877c:	4619      	mov	r1, r3
 800877e:	f7f8 f983 	bl	8000a88 <__aeabi_d2uiz>
 8008782:	4603      	mov	r3, r0
 8008784:	b29a      	uxth	r2, r3
 8008786:	4b71      	ldr	r3, [pc, #452]	; (800894c <graphMAG+0x268>)
 8008788:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	  if(MAG[i]>1024) MAG[i] = 1024; //might not be needed
 800878c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008790:	4a6e      	ldr	r2, [pc, #440]	; (800894c <graphMAG+0x268>)
 8008792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800879a:	d906      	bls.n	80087aa <graphMAG+0xc6>
 800879c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087a0:	4a6a      	ldr	r2, [pc, #424]	; (800894c <graphMAG+0x268>)
 80087a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80087a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (i = 0; i < N; i++){
 80087aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087ae:	3301      	adds	r3, #1
 80087b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80087b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087b8:	2b3f      	cmp	r3, #63	; 0x3f
 80087ba:	d9a6      	bls.n	800870a <graphMAG+0x26>
    SSD1306_DrawBitmap(0,0,explo, 128, 64, 1);
  }
  */


  for(int k=0; k<16; k++) SSD1306_DrawFilledRectangle(8*k, (SSD1306_HEIGHT-1)-(uint16_t) map(MAG[(k*Sc)+2],0,freqScale[k],0,(SSD1306_HEIGHT-1)), 6, (uint16_t) map(MAG[(k*Sc)+2],0,freqScale[k],0,(SSD1306_HEIGHT-1)), 1); //draw 16 bars abs(x[k]) on (0 to k/2)
 80087bc:	2300      	movs	r3, #0
 80087be:	633b      	str	r3, [r7, #48]	; 0x30
 80087c0:	e045      	b.n	800884e <graphMAG+0x16a>
 80087c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	b29c      	uxth	r4, r3
 80087ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087d0:	fb02 f303 	mul.w	r3, r2, r3
 80087d4:	3302      	adds	r3, #2
 80087d6:	4a5d      	ldr	r2, [pc, #372]	; (800894c <graphMAG+0x268>)
 80087d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087dc:	4618      	mov	r0, r3
 80087de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80087e6:	4413      	add	r3, r2
 80087e8:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 80087ec:	461a      	mov	r2, r3
 80087ee:	231f      	movs	r3, #31
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	2300      	movs	r3, #0
 80087f4:	2100      	movs	r1, #0
 80087f6:	f000 face 	bl	8008d96 <map>
 80087fa:	4603      	mov	r3, r0
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	f1c3 031f 	rsb	r3, r3, #31
 8008802:	b29d      	uxth	r5, r3
 8008804:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800880a:	fb02 f303 	mul.w	r3, r2, r3
 800880e:	3302      	adds	r3, #2
 8008810:	4a4e      	ldr	r2, [pc, #312]	; (800894c <graphMAG+0x268>)
 8008812:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008816:	4618      	mov	r0, r3
 8008818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881a:	005b      	lsls	r3, r3, #1
 800881c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008820:	4413      	add	r3, r2
 8008822:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 8008826:	461a      	mov	r2, r3
 8008828:	231f      	movs	r3, #31
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	2300      	movs	r3, #0
 800882e:	2100      	movs	r1, #0
 8008830:	f000 fab1 	bl	8008d96 <map>
 8008834:	4603      	mov	r3, r0
 8008836:	b29a      	uxth	r2, r3
 8008838:	2301      	movs	r3, #1
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	4613      	mov	r3, r2
 800883e:	2206      	movs	r2, #6
 8008840:	4629      	mov	r1, r5
 8008842:	4620      	mov	r0, r4
 8008844:	f001 fe64 	bl	800a510 <SSD1306_DrawFilledRectangle>
 8008848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884a:	3301      	adds	r3, #1
 800884c:	633b      	str	r3, [r7, #48]	; 0x30
 800884e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008850:	2b0f      	cmp	r3, #15
 8008852:	ddb6      	ble.n	80087c2 <graphMAG+0xde>
  //SSD1306_DrawFilledRectangle(0,0,6,63,1);
  SSD1306_UpdateScreen(); //display
 8008854:	f001 fc02 	bl	800a05c <SSD1306_UpdateScreen>
  SSD1306_Clear();
 8008858:	f001 fea7 	bl	800a5aa <SSD1306_Clear>
  BlankScreen(BLACK);
 800885c:	2000      	movs	r0, #0
 800885e:	f000 f955 	bl	8008b0c <BlankScreen>
  for(int x=0; x<8; x++){ //graph on rgb glasses
 8008862:	2300      	movs	r3, #0
 8008864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008866:	e061      	b.n	800892c <graphMAG+0x248>
	  getrand(randSelect);
 8008868:	4b39      	ldr	r3, [pc, #228]	; (8008950 <graphMAG+0x26c>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4618      	mov	r0, r3
 800886e:	f001 f99f 	bl	8009bb0 <getrand>
	  for(int y=0; y<(uint16_t) map(MAG[(x*Sc)+2],0,1024,0,numRows); y++) setPixelColor(ColumnArray[x][y], Forecolor);   //I changed this to work with the 168 led display(21 cols) and 32 (64/2 usable) Bins
 8008872:	2300      	movs	r3, #0
 8008874:	62bb      	str	r3, [r7, #40]	; 0x28
 8008876:	e010      	b.n	800889a <graphMAG+0x1b6>
 8008878:	4a36      	ldr	r2, [pc, #216]	; (8008954 <graphMAG+0x270>)
 800887a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887c:	00db      	lsls	r3, r3, #3
 800887e:	441a      	add	r2, r3
 8008880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008882:	4413      	add	r3, r2
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	4b33      	ldr	r3, [pc, #204]	; (8008958 <graphMAG+0x274>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4619      	mov	r1, r3
 800888e:	4610      	mov	r0, r2
 8008890:	f000 f872 	bl	8008978 <setPixelColor>
 8008894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008896:	3301      	adds	r3, #1
 8008898:	62bb      	str	r3, [r7, #40]	; 0x28
 800889a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800889e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088a0:	fb02 f303 	mul.w	r3, r2, r3
 80088a4:	3302      	adds	r3, #2
 80088a6:	4a29      	ldr	r2, [pc, #164]	; (800894c <graphMAG+0x268>)
 80088a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088ac:	4618      	mov	r0, r3
 80088ae:	2308      	movs	r3, #8
 80088b0:	9300      	str	r3, [sp, #0]
 80088b2:	2300      	movs	r3, #0
 80088b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80088b8:	2100      	movs	r1, #0
 80088ba:	f000 fa6c 	bl	8008d96 <map>
 80088be:	4603      	mov	r3, r0
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	461a      	mov	r2, r3
 80088c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c6:	4293      	cmp	r3, r2
 80088c8:	dbd6      	blt.n	8008878 <graphMAG+0x194>
	  for(int y=0; y<(uint16_t) map(MAG[((x+8)*Sc)+2],0,1024,0,numRows); y++) setPixelColor(ColumnArray[x+13][y], Forecolor);
 80088ca:	2300      	movs	r3, #0
 80088cc:	627b      	str	r3, [r7, #36]	; 0x24
 80088ce:	e011      	b.n	80088f4 <graphMAG+0x210>
 80088d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d2:	330d      	adds	r3, #13
 80088d4:	4a1f      	ldr	r2, [pc, #124]	; (8008954 <graphMAG+0x270>)
 80088d6:	00db      	lsls	r3, r3, #3
 80088d8:	441a      	add	r2, r3
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	4413      	add	r3, r2
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	461a      	mov	r2, r3
 80088e2:	4b1d      	ldr	r3, [pc, #116]	; (8008958 <graphMAG+0x274>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4619      	mov	r1, r3
 80088e8:	4610      	mov	r0, r2
 80088ea:	f000 f845 	bl	8008978 <setPixelColor>
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	3301      	adds	r3, #1
 80088f2:	627b      	str	r3, [r7, #36]	; 0x24
 80088f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f6:	3308      	adds	r3, #8
 80088f8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80088fc:	fb02 f303 	mul.w	r3, r2, r3
 8008900:	3302      	adds	r3, #2
 8008902:	4a12      	ldr	r2, [pc, #72]	; (800894c <graphMAG+0x268>)
 8008904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008908:	4618      	mov	r0, r3
 800890a:	2308      	movs	r3, #8
 800890c:	9300      	str	r3, [sp, #0]
 800890e:	2300      	movs	r3, #0
 8008910:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008914:	2100      	movs	r1, #0
 8008916:	f000 fa3e 	bl	8008d96 <map>
 800891a:	4603      	mov	r3, r0
 800891c:	b29b      	uxth	r3, r3
 800891e:	461a      	mov	r2, r3
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	4293      	cmp	r3, r2
 8008924:	dbd4      	blt.n	80088d0 <graphMAG+0x1ec>
  for(int x=0; x<8; x++){ //graph on rgb glasses
 8008926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008928:	3301      	adds	r3, #1
 800892a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800892c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800892e:	2b07      	cmp	r3, #7
 8008930:	dd9a      	ble.n	8008868 <graphMAG+0x184>
  }
  show();
 8008932:	f000 f813 	bl	800895c <show>

}
 8008936:	bf00      	nop
 8008938:	373c      	adds	r7, #60	; 0x3c
 800893a:	46bd      	mov	sp, r7
 800893c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800893e:	bf00      	nop
 8008940:	0800e800 	.word	0x0800e800
 8008944:	20000de0 	.word	0x20000de0
 8008948:	20000b10 	.word	0x20000b10
 800894c:	2000161c 	.word	0x2000161c
 8008950:	200003a8 	.word	0x200003a8
 8008954:	0800f4a0 	.word	0x0800f4a0
 8008958:	20000120 	.word	0x20000120

0800895c <show>:
}
show();
}


void show(void){
 800895c:	b580      	push	{r7, lr}
 800895e:	af00      	add	r7, sp, #0
HAL_SPI_Transmit_DMA(&hspi2, myData, (NUMLEDS*EXPANDFACTOR)+SPILOWTIME); //Begin SPI - SPI DMA data burst to LEDS
 8008960:	f240 6206 	movw	r2, #1542	; 0x606
 8008964:	4902      	ldr	r1, [pc, #8]	; (8008970 <show+0x14>)
 8008966:	4803      	ldr	r0, [pc, #12]	; (8008974 <show+0x18>)
 8008968:	f7fb fa14 	bl	8003d94 <HAL_SPI_Transmit_DMA>
//HAL_Delay(2); //(50 LEDs) 2ms delay to prevent sending data modified after DMA call  - will add if needed
//HAL_Delay(4); //(128 LEDSs) 2ms delay to prevent sending data modified after DMA call
}
 800896c:	bf00      	nop
 800896e:	bd80      	pop	{r7, pc}
 8008970:	20001014 	.word	0x20001014
 8008974:	20000ab4 	.word	0x20000ab4

08008978 <setPixelColor>:

void setPixelColor(int pixelNum, uint32_t c){ //pass in a Pixel Number and 32bit Color and map to 9 bytes
 8008978:	b480      	push	{r7}
 800897a:	b087      	sub	sp, #28
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
	  uint8_t myGRB[3]; //create an array to hold the GRB bytes for one 23bit color
	  for(int x=0; x<3; x++) myGRB[x] = (c >> ((2-x) * 8)) & 0xFF; //extract the green,red,blue from the 32bit and write the 8bit values into myGRB array
 8008982:	2300      	movs	r3, #0
 8008984:	617b      	str	r3, [r7, #20]
 8008986:	e010      	b.n	80089aa <setPixelColor+0x32>
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	f1c3 0302 	rsb	r3, r3, #2
 800898e:	00db      	lsls	r3, r3, #3
 8008990:	683a      	ldr	r2, [r7, #0]
 8008992:	fa22 f303 	lsr.w	r3, r2, r3
 8008996:	b2d9      	uxtb	r1, r3
 8008998:	f107 0208 	add.w	r2, r7, #8
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	4413      	add	r3, r2
 80089a0:	460a      	mov	r2, r1
 80089a2:	701a      	strb	r2, [r3, #0]
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	3301      	adds	r3, #1
 80089a8:	617b      	str	r3, [r7, #20]
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	ddeb      	ble.n	8008988 <setPixelColor+0x10>
	  for(int y=0; y<3; y++){ //this is to index the G,R,B bytes
 80089b0:	2300      	movs	r3, #0
 80089b2:	613b      	str	r3, [r7, #16]
 80089b4:	e028      	b.n	8008a08 <setPixelColor+0x90>
	    for(int x=0; x<3; x++)  myData[(y*3)+(pixelNum*9)+x] = (bitExpand[myGRB[y]] >> ((2-x) * 8)) & 0xFF; //expand green, red, blue. from 1 byte into 3 bytes each (9 bytes total)
 80089b6:	2300      	movs	r3, #0
 80089b8:	60fb      	str	r3, [r7, #12]
 80089ba:	e01f      	b.n	80089fc <setPixelColor+0x84>
 80089bc:	f107 0208 	add.w	r2, r7, #8
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	4413      	add	r3, r2
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	461a      	mov	r2, r3
 80089c8:	4b13      	ldr	r3, [pc, #76]	; (8008a18 <setPixelColor+0xa0>)
 80089ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f1c3 0302 	rsb	r3, r3, #2
 80089d4:	00db      	lsls	r3, r3, #3
 80089d6:	fa22 f003 	lsr.w	r0, r2, r3
 80089da:	693a      	ldr	r2, [r7, #16]
 80089dc:	4613      	mov	r3, r2
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	1899      	adds	r1, r3, r2
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	4613      	mov	r3, r2
 80089e6:	00db      	lsls	r3, r3, #3
 80089e8:	4413      	add	r3, r2
 80089ea:	18ca      	adds	r2, r1, r3
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	4413      	add	r3, r2
 80089f0:	b2c1      	uxtb	r1, r0
 80089f2:	4a0a      	ldr	r2, [pc, #40]	; (8008a1c <setPixelColor+0xa4>)
 80089f4:	54d1      	strb	r1, [r2, r3]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3301      	adds	r3, #1
 80089fa:	60fb      	str	r3, [r7, #12]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	dddc      	ble.n	80089bc <setPixelColor+0x44>
	  for(int y=0; y<3; y++){ //this is to index the G,R,B bytes
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	3301      	adds	r3, #1
 8008a06:	613b      	str	r3, [r7, #16]
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	ddd3      	ble.n	80089b6 <setPixelColor+0x3e>
	  }
}
 8008a0e:	bf00      	nop
 8008a10:	371c      	adds	r7, #28
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bc80      	pop	{r7}
 8008a16:	4770      	bx	lr
 8008a18:	0800efec 	.word	0x0800efec
 8008a1c:	20001014 	.word	0x20001014

08008a20 <getPixelColor>:

uint32_t getPixelColor(int c){ //receives a Led Number and returns its 32 bit value
 8008a20:	b480      	push	{r7}
 8008a22:	b08b      	sub	sp, #44	; 0x2c
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
	uint8_t myGRB[3];
	uint32_t myExpanedByte[3]; //
	uint8_t i=0; //used to index the bittable
 8008a28:	2300      	movs	r3, #0
 8008a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(int x=0; x<3; x++) myExpanedByte[x] =  ((uint32_t)myData[(c*9)+(3*x)] << 16) | ((uint32_t)myData[(c*9)+(3*x)+1] <<  8) | (uint32_t) myData[(c*9)+(3*x)+2]; //extract values from myData Array
 8008a2e:	2300      	movs	r3, #0
 8008a30:	623b      	str	r3, [r7, #32]
 8008a32:	e031      	b.n	8008a98 <getPixelColor+0x78>
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	4613      	mov	r3, r2
 8008a38:	00db      	lsls	r3, r3, #3
 8008a3a:	1899      	adds	r1, r3, r2
 8008a3c:	6a3a      	ldr	r2, [r7, #32]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	005b      	lsls	r3, r3, #1
 8008a42:	4413      	add	r3, r2
 8008a44:	440b      	add	r3, r1
 8008a46:	4a2f      	ldr	r2, [pc, #188]	; (8008b04 <getPixelColor+0xe4>)
 8008a48:	5cd3      	ldrb	r3, [r2, r3]
 8008a4a:	0419      	lsls	r1, r3, #16
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	00db      	lsls	r3, r3, #3
 8008a52:	1898      	adds	r0, r3, r2
 8008a54:	6a3a      	ldr	r2, [r7, #32]
 8008a56:	4613      	mov	r3, r2
 8008a58:	005b      	lsls	r3, r3, #1
 8008a5a:	4413      	add	r3, r2
 8008a5c:	4403      	add	r3, r0
 8008a5e:	3301      	adds	r3, #1
 8008a60:	4a28      	ldr	r2, [pc, #160]	; (8008b04 <getPixelColor+0xe4>)
 8008a62:	5cd3      	ldrb	r3, [r2, r3]
 8008a64:	021b      	lsls	r3, r3, #8
 8008a66:	4319      	orrs	r1, r3
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	00db      	lsls	r3, r3, #3
 8008a6e:	1898      	adds	r0, r3, r2
 8008a70:	6a3a      	ldr	r2, [r7, #32]
 8008a72:	4613      	mov	r3, r2
 8008a74:	005b      	lsls	r3, r3, #1
 8008a76:	4413      	add	r3, r2
 8008a78:	4403      	add	r3, r0
 8008a7a:	3302      	adds	r3, #2
 8008a7c:	4a21      	ldr	r2, [pc, #132]	; (8008b04 <getPixelColor+0xe4>)
 8008a7e:	5cd3      	ldrb	r3, [r2, r3]
 8008a80:	ea41 0203 	orr.w	r2, r1, r3
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008a8c:	440b      	add	r3, r1
 8008a8e:	f843 2c1c 	str.w	r2, [r3, #-28]
 8008a92:	6a3b      	ldr	r3, [r7, #32]
 8008a94:	3301      	adds	r3, #1
 8008a96:	623b      	str	r3, [r7, #32]
 8008a98:	6a3b      	ldr	r3, [r7, #32]
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	ddca      	ble.n	8008a34 <getPixelColor+0x14>
    for(int x=0; x<3; x++){
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	61fb      	str	r3, [r7, #28]
 8008aa2:	e01f      	b.n	8008ae4 <getPixelColor+0xc4>
	  while(myExpanedByte[x] != bitExpand[i]) i++; //loop until match occurs
 8008aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8008abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ac0:	4911      	ldr	r1, [pc, #68]	; (8008b08 <getPixelColor+0xe8>)
 8008ac2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d1ec      	bne.n	8008aa4 <getPixelColor+0x84>
	  myGRB[x] = i; //store the index into 3 bytes sized values
 8008aca:	f107 0218 	add.w	r2, r7, #24
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008ad6:	701a      	strb	r2, [r3, #0]
	  i=0;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(int x=0; x<3; x++){
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	61fb      	str	r3, [r7, #28]
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	dde1      	ble.n	8008aae <getPixelColor+0x8e>
     }
	return ((uint32_t)myGRB[0] << 16) | ((uint32_t)myGRB[1] <<  8 | (uint32_t) myGRB[2]); //return a uint32_t value for the color stored on the led
 8008aea:	7e3b      	ldrb	r3, [r7, #24]
 8008aec:	041a      	lsls	r2, r3, #16
 8008aee:	7e7b      	ldrb	r3, [r7, #25]
 8008af0:	021b      	lsls	r3, r3, #8
 8008af2:	7eb9      	ldrb	r1, [r7, #26]
 8008af4:	430b      	orrs	r3, r1
 8008af6:	4313      	orrs	r3, r2
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	372c      	adds	r7, #44	; 0x2c
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bc80      	pop	{r7}
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	20001014 	.word	0x20001014
 8008b08:	0800efec 	.word	0x0800efec

08008b0c <BlankScreen>:



void BlankScreen(uint32_t c) { //quickly set the entire screen one color
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < NUMLEDS; i++) {
 8008b14:	2300      	movs	r3, #0
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	e006      	b.n	8008b28 <BlankScreen+0x1c>
    setPixelColor(i, c);
 8008b1a:	6879      	ldr	r1, [r7, #4]
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f7ff ff2b 	bl	8008978 <setPixelColor>
  for (int i = 0; i < NUMLEDS; i++) {
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3301      	adds	r3, #1
 8008b26:	60fb      	str	r3, [r7, #12]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2ba7      	cmp	r3, #167	; 0xa7
 8008b2c:	ddf5      	ble.n	8008b1a <BlankScreen+0xe>
  }
  show();
 8008b2e:	f7ff ff15 	bl	800895c <show>
}
 8008b32:	bf00      	nop
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
	...

08008b3c <HorizShiftR>:
	myY = myYT;
	}
}

//shift right function
void HorizShiftR () {   //Shift columns right 1 palce
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
  for ( int s = numCols-2; s >= 0; s--) { //read one hind. index COLUMNS
 8008b42:	2313      	movs	r3, #19
 8008b44:	607b      	str	r3, [r7, #4]
 8008b46:	e02a      	b.n	8008b9e <HorizShiftR+0x62>
    for (int b = 0; b <= numRows-1; b++) { //read each Led value.  inded the ROWS
 8008b48:	2300      	movs	r3, #0
 8008b4a:	603b      	str	r3, [r7, #0]
 8008b4c:	e021      	b.n	8008b92 <HorizShiftR+0x56>
      ArrayBuffer[b] = getPixelColor(ColumnArray[s][b]); //store 5 int32s into bufferarray
 8008b4e:	4a18      	ldr	r2, [pc, #96]	; (8008bb0 <HorizShiftR+0x74>)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	00db      	lsls	r3, r3, #3
 8008b54:	441a      	add	r2, r3
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	4413      	add	r3, r2
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7ff ff5f 	bl	8008a20 <getPixelColor>
 8008b62:	4601      	mov	r1, r0
 8008b64:	4a13      	ldr	r2, [pc, #76]	; (8008bb4 <HorizShiftR+0x78>)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      setPixelColor(ColumnArray[s + 1][b], ArrayBuffer[b]); //put those stored vals in place one to the right
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	4a0f      	ldr	r2, [pc, #60]	; (8008bb0 <HorizShiftR+0x74>)
 8008b72:	00db      	lsls	r3, r3, #3
 8008b74:	441a      	add	r2, r3
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	4413      	add	r3, r2
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	4a0d      	ldr	r2, [pc, #52]	; (8008bb4 <HorizShiftR+0x78>)
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b86:	4619      	mov	r1, r3
 8008b88:	f7ff fef6 	bl	8008978 <setPixelColor>
    for (int b = 0; b <= numRows-1; b++) { //read each Led value.  inded the ROWS
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	603b      	str	r3, [r7, #0]
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	2b07      	cmp	r3, #7
 8008b96:	ddda      	ble.n	8008b4e <HorizShiftR+0x12>
  for ( int s = numCols-2; s >= 0; s--) { //read one hind. index COLUMNS
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	607b      	str	r3, [r7, #4]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	dad1      	bge.n	8008b48 <HorizShiftR+0xc>
    }
  }
  show();
 8008ba4:	f7ff feda 	bl	800895c <show>
}
 8008ba8:	bf00      	nop
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	0800f4a0 	.word	0x0800f4a0
 8008bb4:	20000388 	.word	0x20000388

08008bb8 <HorizShiftL>:

//shift Left function
void HorizShiftL () {   //Shift columns right 1 palce
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
  for ( int s = 1; s <= numCols-1; s++) { //read one behind left
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	607b      	str	r3, [r7, #4]
 8008bc2:	e02a      	b.n	8008c1a <HorizShiftL+0x62>
    for (int b = 0; b <= numRows-1; b++) { //read each Led value
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	603b      	str	r3, [r7, #0]
 8008bc8:	e021      	b.n	8008c0e <HorizShiftL+0x56>
      ArrayBuffer[b] = getPixelColor(ColumnArray[s][b]); //store 5 int32s into bufferarray
 8008bca:	4a18      	ldr	r2, [pc, #96]	; (8008c2c <HorizShiftL+0x74>)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	00db      	lsls	r3, r3, #3
 8008bd0:	441a      	add	r2, r3
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7ff ff21 	bl	8008a20 <getPixelColor>
 8008bde:	4601      	mov	r1, r0
 8008be0:	4a13      	ldr	r2, [pc, #76]	; (8008c30 <HorizShiftL+0x78>)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      setPixelColor(ColumnArray[s - 1][b], ArrayBuffer[b]); //put those stored vals in place one to the left
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	3b01      	subs	r3, #1
 8008bec:	4a0f      	ldr	r2, [pc, #60]	; (8008c2c <HorizShiftL+0x74>)
 8008bee:	00db      	lsls	r3, r3, #3
 8008bf0:	441a      	add	r2, r3
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	4a0d      	ldr	r2, [pc, #52]	; (8008c30 <HorizShiftL+0x78>)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c02:	4619      	mov	r1, r3
 8008c04:	f7ff feb8 	bl	8008978 <setPixelColor>
    for (int b = 0; b <= numRows-1; b++) { //read each Led value
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	603b      	str	r3, [r7, #0]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	2b07      	cmp	r3, #7
 8008c12:	ddda      	ble.n	8008bca <HorizShiftL+0x12>
  for ( int s = 1; s <= numCols-1; s++) { //read one behind left
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	3301      	adds	r3, #1
 8008c18:	607b      	str	r3, [r7, #4]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b14      	cmp	r3, #20
 8008c1e:	ddd1      	ble.n	8008bc4 <HorizShiftL+0xc>
    }
  }
  show();
 8008c20:	f7ff fe9c 	bl	800895c <show>
}
 8008c24:	bf00      	nop
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	0800f4a0 	.word	0x0800f4a0
 8008c30:	20000388 	.word	0x20000388

08008c34 <BlankColumn>:

void BlankColumn(int c) {    //wipes the coulmn 0 to clear out jjunk, to get ready for shifting
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  for (int w = 0; w <= numRows-1; w++) {
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	60fb      	str	r3, [r7, #12]
 8008c40:	e00d      	b.n	8008c5e <BlankColumn+0x2a>
   setPixelColor(ColumnArray[c][w], 0x000000);
 8008c42:	4a0a      	ldr	r2, [pc, #40]	; (8008c6c <BlankColumn+0x38>)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	00db      	lsls	r3, r3, #3
 8008c48:	441a      	add	r2, r3
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	2100      	movs	r1, #0
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7ff fe90 	bl	8008978 <setPixelColor>
  for (int w = 0; w <= numRows-1; w++) {
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	60fb      	str	r3, [r7, #12]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2b07      	cmp	r3, #7
 8008c62:	ddee      	ble.n	8008c42 <BlankColumn+0xe>
  }
}
 8008c64:	bf00      	nop
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	0800f4a0 	.word	0x0800f4a0

08008c70 <printStringWithShiftL>:



//Extract characters for Scrolling text
void printStringWithShiftL(char* s, int shift_speed) { //Add Color??
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
	while (*s != 0) {
 8008c7a:	e008      	b.n	8008c8e <printStringWithShiftL+0x1e>
		printCharWithShiftL(*s, shift_speed);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 f80c 	bl	8008ca0 <printCharWithShiftL>
		s++;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	607b      	str	r3, [r7, #4]
	while (*s != 0) {
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1f2      	bne.n	8008c7c <printStringWithShiftL+0xc>
	}
}
 8008c96:	bf00      	nop
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
	...

08008ca0 <printCharWithShiftL>:

// Put extracted character on Display     // this works very well
void printCharWithShiftL(char c, int shift_speed) {
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	6039      	str	r1, [r7, #0]
 8008caa:	71fb      	strb	r3, [r7, #7]
	enum {TEXTPOS = 1};
	if (c < 32) return; //error check for ascii values less than ASCII  < ' ' (space) = 32 >
 8008cac:	79fb      	ldrb	r3, [r7, #7]
 8008cae:	2b1f      	cmp	r3, #31
 8008cb0:	d94e      	bls.n	8008d50 <printCharWithShiftL+0xb0>
	c -= 32; //align the char ascii with the CharTable
 8008cb2:	79fb      	ldrb	r3, [r7, #7]
 8008cb4:	3b20      	subs	r3, #32
 8008cb6:	71fb      	strb	r3, [r7, #7]
	memcpy(mbuffer, &CH[3 * c], 3); //CH + 3*c is same as &CH[3*c] //copy 3 items
 8008cb8:	79fa      	ldrb	r2, [r7, #7]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	005b      	lsls	r3, r3, #1
 8008cbe:	4413      	add	r3, r2
 8008cc0:	4a25      	ldr	r2, [pc, #148]	; (8008d58 <printCharWithShiftL+0xb8>)
 8008cc2:	441a      	add	r2, r3
 8008cc4:	4b25      	ldr	r3, [pc, #148]	; (8008d5c <printCharWithShiftL+0xbc>)
 8008cc6:	8811      	ldrh	r1, [r2, #0]
 8008cc8:	7892      	ldrb	r2, [r2, #2]
 8008cca:	8019      	strh	r1, [r3, #0]
 8008ccc:	709a      	strb	r2, [r3, #2]
	//mBuffer
	getrand(randSelect);
 8008cce:	4b24      	ldr	r3, [pc, #144]	; (8008d60 <printCharWithShiftL+0xc0>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 ff6c 	bl	8009bb0 <getrand>
	for (int j = 0; j <= 2; j++) {
 8008cd8:	2300      	movs	r3, #0
 8008cda:	617b      	str	r3, [r7, #20]
 8008cdc:	e032      	b.n	8008d44 <printCharWithShiftL+0xa4>
		uint8_t b = 0b00000001;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	74fb      	strb	r3, [r7, #19]
		for (int k = TEXTPOS; k < TEXTPOS+5; k++) {
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	60fb      	str	r3, [r7, #12]
 8008ce6:	e01c      	b.n	8008d22 <printCharWithShiftL+0x82>
			if (mbuffer[j]&b) setPixelColor(ColumnArray[numCols-1][(numRows-1)-k], Forecolor);
 8008ce8:	4a1c      	ldr	r2, [pc, #112]	; (8008d5c <printCharWithShiftL+0xbc>)
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	4413      	add	r3, r2
 8008cee:	781a      	ldrb	r2, [r3, #0]
 8008cf0:	7cfb      	ldrb	r3, [r7, #19]
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00d      	beq.n	8008d16 <printCharWithShiftL+0x76>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f1c3 0307 	rsb	r3, r3, #7
 8008d00:	4a18      	ldr	r2, [pc, #96]	; (8008d64 <printCharWithShiftL+0xc4>)
 8008d02:	4413      	add	r3, r2
 8008d04:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008d08:	461a      	mov	r2, r3
 8008d0a:	4b17      	ldr	r3, [pc, #92]	; (8008d68 <printCharWithShiftL+0xc8>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	4610      	mov	r0, r2
 8008d12:	f7ff fe31 	bl	8008978 <setPixelColor>
			b = b << 1;
 8008d16:	7cfb      	ldrb	r3, [r7, #19]
 8008d18:	005b      	lsls	r3, r3, #1
 8008d1a:	74fb      	strb	r3, [r7, #19]
		for (int k = TEXTPOS; k < TEXTPOS+5; k++) {
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	60fb      	str	r3, [r7, #12]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2b05      	cmp	r3, #5
 8008d26:	dddf      	ble.n	8008ce8 <printCharWithShiftL+0x48>
		}
		show();
 8008d28:	f7ff fe18 	bl	800895c <show>
		HorizShiftL(); //shift every column one column left (one space between letters)
 8008d2c:	f7ff ff44 	bl	8008bb8 <HorizShiftL>
		BlankColumn(numCols-1);
 8008d30:	2014      	movs	r0, #20
 8008d32:	f7ff ff7f 	bl	8008c34 <BlankColumn>
		HAL_Delay(shift_speed);
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7f7 ff27 	bl	8000b8c <HAL_Delay>
	for (int j = 0; j <= 2; j++) {
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	3301      	adds	r3, #1
 8008d42:	617b      	str	r3, [r7, #20]
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	ddc9      	ble.n	8008cde <printCharWithShiftL+0x3e>
	}
	HorizShiftL(); // (one space after word)
 8008d4a:	f7ff ff35 	bl	8008bb8 <HorizShiftL>
 8008d4e:	e000      	b.n	8008d52 <printCharWithShiftL+0xb2>
	if (c < 32) return; //error check for ascii values less than ASCII  < ' ' (space) = 32 >
 8008d50:	bf00      	nop

}
 8008d52:	3718      	adds	r7, #24
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	0800f3ec 	.word	0x0800f3ec
 8008d5c:	20000d14 	.word	0x20000d14
 8008d60:	200003a8 	.word	0x200003a8
 8008d64:	0800f4a0 	.word	0x0800f4a0
 8008d68:	20000120 	.word	0x20000120

08008d6c <Color>:


uint32_t Color(uint8_t g,uint8_t r,uint8_t b){ //receives a G,R, amd B byte then Returns a 32bit int
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	4603      	mov	r3, r0
 8008d74:	71fb      	strb	r3, [r7, #7]
 8008d76:	460b      	mov	r3, r1
 8008d78:	71bb      	strb	r3, [r7, #6]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	717b      	strb	r3, [r7, #5]
return ((uint32_t)g << 16) | ((uint32_t)r <<  8 | (uint32_t) b);
 8008d7e:	79fb      	ldrb	r3, [r7, #7]
 8008d80:	041a      	lsls	r2, r3, #16
 8008d82:	79bb      	ldrb	r3, [r7, #6]
 8008d84:	0219      	lsls	r1, r3, #8
 8008d86:	797b      	ldrb	r3, [r7, #5]
 8008d88:	430b      	orrs	r3, r1
 8008d8a:	4313      	orrs	r3, r2
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bc80      	pop	{r7}
 8008d94:	4770      	bx	lr

08008d96 <map>:


long map(long x, long in_min, long in_max, long out_min, long out_max) { //Map function
 8008d96:	b480      	push	{r7}
 8008d98:	b085      	sub	sp, #20
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	60f8      	str	r0, [r7, #12]
 8008d9e:	60b9      	str	r1, [r7, #8]
 8008da0:	607a      	str	r2, [r7, #4]
 8008da2:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	69b9      	ldr	r1, [r7, #24]
 8008dac:	683a      	ldr	r2, [r7, #0]
 8008dae:	1a8a      	subs	r2, r1, r2
 8008db0:	fb02 f203 	mul.w	r2, r2, r3
 8008db4:	6879      	ldr	r1, [r7, #4]
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	1acb      	subs	r3, r1, r3
 8008dba:	fb92 f2f3 	sdiv	r2, r2, r3
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	4413      	add	r3, r2
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bc80      	pop	{r7}
 8008dca:	4770      	bx	lr

08008dcc <randomNum>:

int randomNum(int myLow, int myHigh){  //return random integer for low to high range
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
	return  (rand() % (myHigh - myLow + 1)) + myLow;
 8008dd6:	f002 ffdf 	bl	800bd98 <rand>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	6839      	ldr	r1, [r7, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	1acb      	subs	r3, r1, r3
 8008de2:	3301      	adds	r3, #1
 8008de4:	fb92 f1f3 	sdiv	r1, r2, r3
 8008de8:	fb03 f301 	mul.w	r3, r3, r1
 8008dec:	1ad2      	subs	r2, r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4413      	add	r3, r2
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
	...

08008dfc <sine1>:




void sine1 (uint32_t delayTime) { //single wave  //Shift columns right 1 palce
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < numRows; i++) { //number here determins "density"
 8008e04:	2300      	movs	r3, #0
 8008e06:	60fb      	str	r3, [r7, #12]
 8008e08:	e015      	b.n	8008e36 <sine1+0x3a>
			BlankColumn(0);
 8008e0a:	2000      	movs	r0, #0
 8008e0c:	f7ff ff12 	bl	8008c34 <BlankColumn>
			setPixelColor(ColumnArray[0][i], Forecolor);
 8008e10:	4a1b      	ldr	r2, [pc, #108]	; (8008e80 <sine1+0x84>)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	4413      	add	r3, r2
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	461a      	mov	r2, r3
 8008e1a:	4b1a      	ldr	r3, [pc, #104]	; (8008e84 <sine1+0x88>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4619      	mov	r1, r3
 8008e20:	4610      	mov	r0, r2
 8008e22:	f7ff fda9 	bl	8008978 <setPixelColor>
			HorizShiftR();
 8008e26:	f7ff fe89 	bl	8008b3c <HorizShiftR>
			HAL_Delay(delayTime);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f7f7 feae 	bl	8000b8c <HAL_Delay>
  for (int i = 0; i < numRows; i++) { //number here determins "density"
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	3301      	adds	r3, #1
 8008e34:	60fb      	str	r3, [r7, #12]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2b07      	cmp	r3, #7
 8008e3a:	dde6      	ble.n	8008e0a <sine1+0xe>
  }
  for (int i = 0; i < numRows; i++) { //number here determins "density"
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	60bb      	str	r3, [r7, #8]
 8008e40:	e016      	b.n	8008e70 <sine1+0x74>
			BlankColumn(0);
 8008e42:	2000      	movs	r0, #0
 8008e44:	f7ff fef6 	bl	8008c34 <BlankColumn>
			setPixelColor(ColumnArray[0][(numRows-1) - i], Forecolor);
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	f1c3 0307 	rsb	r3, r3, #7
 8008e4e:	4a0c      	ldr	r2, [pc, #48]	; (8008e80 <sine1+0x84>)
 8008e50:	5cd3      	ldrb	r3, [r2, r3]
 8008e52:	461a      	mov	r2, r3
 8008e54:	4b0b      	ldr	r3, [pc, #44]	; (8008e84 <sine1+0x88>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	4610      	mov	r0, r2
 8008e5c:	f7ff fd8c 	bl	8008978 <setPixelColor>
			HorizShiftR();
 8008e60:	f7ff fe6c 	bl	8008b3c <HorizShiftR>
			HAL_Delay(delayTime);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7f7 fe91 	bl	8000b8c <HAL_Delay>
  for (int i = 0; i < numRows; i++) { //number here determins "density"
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	60bb      	str	r3, [r7, #8]
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	2b07      	cmp	r3, #7
 8008e74:	dde5      	ble.n	8008e42 <sine1+0x46>
  }
}
 8008e76:	bf00      	nop
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	0800f4a0 	.word	0x0800f4a0
 8008e84:	20000120 	.word	0x20000120

08008e88 <nGrid>:


void nGrid(){ //make a snake head pop upin a random spot and move it arround the screen randomly
 8008e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e8a:	b099      	sub	sp, #100	; 0x64
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	466b      	mov	r3, sp
 8008e90:	461d      	mov	r5, r3
	//BlankScreen(0);
	int numBalls = randomNum(4,7); //number of balls
 8008e92:	2107      	movs	r1, #7
 8008e94:	2004      	movs	r0, #4
 8008e96:	f7ff ff99 	bl	8008dcc <randomNum>
 8008e9a:	63f8      	str	r0, [r7, #60]	; 0x3c
	int Limitx = numCols-1; //width
 8008e9c:	2314      	movs	r3, #20
 8008e9e:	643b      	str	r3, [r7, #64]	; 0x40
	int Limity = numRows-1;//height
 8008ea0:	2307      	movs	r3, #7
 8008ea2:	647b      	str	r3, [r7, #68]	; 0x44
	int Headx[numBalls]; //head postion holder
 8008ea4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008ea6:	1e43      	subs	r3, r0, #1
 8008ea8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008eaa:	4603      	mov	r3, r0
 8008eac:	4619      	mov	r1, r3
 8008eae:	f04f 0200 	mov.w	r2, #0
 8008eb2:	f04f 0300 	mov.w	r3, #0
 8008eb6:	f04f 0400 	mov.w	r4, #0
 8008eba:	0154      	lsls	r4, r2, #5
 8008ebc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008ec0:	014b      	lsls	r3, r1, #5
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	f04f 0200 	mov.w	r2, #0
 8008eca:	f04f 0300 	mov.w	r3, #0
 8008ece:	f04f 0400 	mov.w	r4, #0
 8008ed2:	0154      	lsls	r4, r2, #5
 8008ed4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008ed8:	014b      	lsls	r3, r1, #5
 8008eda:	4603      	mov	r3, r0
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	3303      	adds	r3, #3
 8008ee0:	3307      	adds	r3, #7
 8008ee2:	08db      	lsrs	r3, r3, #3
 8008ee4:	00db      	lsls	r3, r3, #3
 8008ee6:	ebad 0d03 	sub.w	sp, sp, r3
 8008eea:	466b      	mov	r3, sp
 8008eec:	3303      	adds	r3, #3
 8008eee:	089b      	lsrs	r3, r3, #2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
	int Heady[numBalls]; //head postion holder
 8008ef4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008ef6:	1e43      	subs	r3, r0, #1
 8008ef8:	653b      	str	r3, [r7, #80]	; 0x50
 8008efa:	4603      	mov	r3, r0
 8008efc:	4619      	mov	r1, r3
 8008efe:	f04f 0200 	mov.w	r2, #0
 8008f02:	f04f 0300 	mov.w	r3, #0
 8008f06:	f04f 0400 	mov.w	r4, #0
 8008f0a:	0154      	lsls	r4, r2, #5
 8008f0c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008f10:	014b      	lsls	r3, r1, #5
 8008f12:	4603      	mov	r3, r0
 8008f14:	4619      	mov	r1, r3
 8008f16:	f04f 0200 	mov.w	r2, #0
 8008f1a:	f04f 0300 	mov.w	r3, #0
 8008f1e:	f04f 0400 	mov.w	r4, #0
 8008f22:	0154      	lsls	r4, r2, #5
 8008f24:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008f28:	014b      	lsls	r3, r1, #5
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	3303      	adds	r3, #3
 8008f30:	3307      	adds	r3, #7
 8008f32:	08db      	lsrs	r3, r3, #3
 8008f34:	00db      	lsls	r3, r3, #3
 8008f36:	ebad 0d03 	sub.w	sp, sp, r3
 8008f3a:	466b      	mov	r3, sp
 8008f3c:	3303      	adds	r3, #3
 8008f3e:	089b      	lsrs	r3, r3, #2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	657b      	str	r3, [r7, #84]	; 0x54
	int Dirx[numBalls]; //-1 or 1
 8008f44:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008f46:	1e43      	subs	r3, r0, #1
 8008f48:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	f04f 0200 	mov.w	r2, #0
 8008f52:	f04f 0300 	mov.w	r3, #0
 8008f56:	f04f 0400 	mov.w	r4, #0
 8008f5a:	0154      	lsls	r4, r2, #5
 8008f5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008f60:	014b      	lsls	r3, r1, #5
 8008f62:	4603      	mov	r3, r0
 8008f64:	4619      	mov	r1, r3
 8008f66:	f04f 0200 	mov.w	r2, #0
 8008f6a:	f04f 0300 	mov.w	r3, #0
 8008f6e:	f04f 0400 	mov.w	r4, #0
 8008f72:	0154      	lsls	r4, r2, #5
 8008f74:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008f78:	014b      	lsls	r3, r1, #5
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	3303      	adds	r3, #3
 8008f80:	3307      	adds	r3, #7
 8008f82:	08db      	lsrs	r3, r3, #3
 8008f84:	00db      	lsls	r3, r3, #3
 8008f86:	ebad 0d03 	sub.w	sp, sp, r3
 8008f8a:	466b      	mov	r3, sp
 8008f8c:	3303      	adds	r3, #3
 8008f8e:	089b      	lsrs	r3, r3, #2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	65fb      	str	r3, [r7, #92]	; 0x5c
	int Diry[numBalls]; //-1 or 1
 8008f94:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008f96:	1e43      	subs	r3, r0, #1
 8008f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	f04f 0200 	mov.w	r2, #0
 8008fa2:	f04f 0300 	mov.w	r3, #0
 8008fa6:	f04f 0400 	mov.w	r4, #0
 8008faa:	0154      	lsls	r4, r2, #5
 8008fac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008fb0:	014b      	lsls	r3, r1, #5
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	f04f 0200 	mov.w	r2, #0
 8008fba:	f04f 0300 	mov.w	r3, #0
 8008fbe:	f04f 0400 	mov.w	r4, #0
 8008fc2:	0154      	lsls	r4, r2, #5
 8008fc4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008fc8:	014b      	lsls	r3, r1, #5
 8008fca:	4603      	mov	r3, r0
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	3303      	adds	r3, #3
 8008fd0:	3307      	adds	r3, #7
 8008fd2:	08db      	lsrs	r3, r3, #3
 8008fd4:	00db      	lsls	r3, r3, #3
 8008fd6:	ebad 0d03 	sub.w	sp, sp, r3
 8008fda:	466b      	mov	r3, sp
 8008fdc:	3303      	adds	r3, #3
 8008fde:	089b      	lsrs	r3, r3, #2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	62bb      	str	r3, [r7, #40]	; 0x28
	int Tailx[numBalls]; //tailx psotion. is not really 'seen'. exists to reduce "flickering"
 8008fe4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008fe6:	1e43      	subs	r3, r0, #1
 8008fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8008fea:	4603      	mov	r3, r0
 8008fec:	4619      	mov	r1, r3
 8008fee:	f04f 0200 	mov.w	r2, #0
 8008ff2:	f04f 0300 	mov.w	r3, #0
 8008ff6:	f04f 0400 	mov.w	r4, #0
 8008ffa:	0154      	lsls	r4, r2, #5
 8008ffc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009000:	014b      	lsls	r3, r1, #5
 8009002:	4603      	mov	r3, r0
 8009004:	4619      	mov	r1, r3
 8009006:	f04f 0200 	mov.w	r2, #0
 800900a:	f04f 0300 	mov.w	r3, #0
 800900e:	f04f 0400 	mov.w	r4, #0
 8009012:	0154      	lsls	r4, r2, #5
 8009014:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009018:	014b      	lsls	r3, r1, #5
 800901a:	4603      	mov	r3, r0
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	3303      	adds	r3, #3
 8009020:	3307      	adds	r3, #7
 8009022:	08db      	lsrs	r3, r3, #3
 8009024:	00db      	lsls	r3, r3, #3
 8009026:	ebad 0d03 	sub.w	sp, sp, r3
 800902a:	466b      	mov	r3, sp
 800902c:	3303      	adds	r3, #3
 800902e:	089b      	lsrs	r3, r3, #2
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	623b      	str	r3, [r7, #32]
	int Taily[numBalls]; //taily position
 8009034:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009036:	1e43      	subs	r3, r0, #1
 8009038:	61fb      	str	r3, [r7, #28]
 800903a:	4603      	mov	r3, r0
 800903c:	4619      	mov	r1, r3
 800903e:	f04f 0200 	mov.w	r2, #0
 8009042:	f04f 0300 	mov.w	r3, #0
 8009046:	f04f 0400 	mov.w	r4, #0
 800904a:	0154      	lsls	r4, r2, #5
 800904c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009050:	014b      	lsls	r3, r1, #5
 8009052:	4603      	mov	r3, r0
 8009054:	4619      	mov	r1, r3
 8009056:	f04f 0200 	mov.w	r2, #0
 800905a:	f04f 0300 	mov.w	r3, #0
 800905e:	f04f 0400 	mov.w	r4, #0
 8009062:	0154      	lsls	r4, r2, #5
 8009064:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009068:	014b      	lsls	r3, r1, #5
 800906a:	4603      	mov	r3, r0
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	3303      	adds	r3, #3
 8009070:	3307      	adds	r3, #7
 8009072:	08db      	lsrs	r3, r3, #3
 8009074:	00db      	lsls	r3, r3, #3
 8009076:	ebad 0d03 	sub.w	sp, sp, r3
 800907a:	466b      	mov	r3, sp
 800907c:	3303      	adds	r3, #3
 800907e:	089b      	lsrs	r3, r3, #2
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	61bb      	str	r3, [r7, #24]
	int myGreen[numBalls];
 8009084:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009086:	1e43      	subs	r3, r0, #1
 8009088:	617b      	str	r3, [r7, #20]
 800908a:	4603      	mov	r3, r0
 800908c:	4619      	mov	r1, r3
 800908e:	f04f 0200 	mov.w	r2, #0
 8009092:	f04f 0300 	mov.w	r3, #0
 8009096:	f04f 0400 	mov.w	r4, #0
 800909a:	0154      	lsls	r4, r2, #5
 800909c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80090a0:	014b      	lsls	r3, r1, #5
 80090a2:	4603      	mov	r3, r0
 80090a4:	4619      	mov	r1, r3
 80090a6:	f04f 0200 	mov.w	r2, #0
 80090aa:	f04f 0300 	mov.w	r3, #0
 80090ae:	f04f 0400 	mov.w	r4, #0
 80090b2:	0154      	lsls	r4, r2, #5
 80090b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80090b8:	014b      	lsls	r3, r1, #5
 80090ba:	4603      	mov	r3, r0
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	3303      	adds	r3, #3
 80090c0:	3307      	adds	r3, #7
 80090c2:	08db      	lsrs	r3, r3, #3
 80090c4:	00db      	lsls	r3, r3, #3
 80090c6:	ebad 0d03 	sub.w	sp, sp, r3
 80090ca:	466b      	mov	r3, sp
 80090cc:	3303      	adds	r3, #3
 80090ce:	089b      	lsrs	r3, r3, #2
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	613b      	str	r3, [r7, #16]
	int myRed[numBalls];
 80090d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80090d6:	1e43      	subs	r3, r0, #1
 80090d8:	60fb      	str	r3, [r7, #12]
 80090da:	4603      	mov	r3, r0
 80090dc:	4619      	mov	r1, r3
 80090de:	f04f 0200 	mov.w	r2, #0
 80090e2:	f04f 0300 	mov.w	r3, #0
 80090e6:	f04f 0400 	mov.w	r4, #0
 80090ea:	0154      	lsls	r4, r2, #5
 80090ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80090f0:	014b      	lsls	r3, r1, #5
 80090f2:	4603      	mov	r3, r0
 80090f4:	4619      	mov	r1, r3
 80090f6:	f04f 0200 	mov.w	r2, #0
 80090fa:	f04f 0300 	mov.w	r3, #0
 80090fe:	f04f 0400 	mov.w	r4, #0
 8009102:	0154      	lsls	r4, r2, #5
 8009104:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009108:	014b      	lsls	r3, r1, #5
 800910a:	4603      	mov	r3, r0
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	3303      	adds	r3, #3
 8009110:	3307      	adds	r3, #7
 8009112:	08db      	lsrs	r3, r3, #3
 8009114:	00db      	lsls	r3, r3, #3
 8009116:	ebad 0d03 	sub.w	sp, sp, r3
 800911a:	466b      	mov	r3, sp
 800911c:	3303      	adds	r3, #3
 800911e:	089b      	lsrs	r3, r3, #2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	60bb      	str	r3, [r7, #8]
	int myBlue[numBalls];
 8009124:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009126:	1e43      	subs	r3, r0, #1
 8009128:	607b      	str	r3, [r7, #4]
 800912a:	4603      	mov	r3, r0
 800912c:	4619      	mov	r1, r3
 800912e:	f04f 0200 	mov.w	r2, #0
 8009132:	f04f 0300 	mov.w	r3, #0
 8009136:	f04f 0400 	mov.w	r4, #0
 800913a:	0154      	lsls	r4, r2, #5
 800913c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009140:	014b      	lsls	r3, r1, #5
 8009142:	4603      	mov	r3, r0
 8009144:	4619      	mov	r1, r3
 8009146:	f04f 0200 	mov.w	r2, #0
 800914a:	f04f 0300 	mov.w	r3, #0
 800914e:	f04f 0400 	mov.w	r4, #0
 8009152:	0154      	lsls	r4, r2, #5
 8009154:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009158:	014b      	lsls	r3, r1, #5
 800915a:	4603      	mov	r3, r0
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	3303      	adds	r3, #3
 8009160:	3307      	adds	r3, #7
 8009162:	08db      	lsrs	r3, r3, #3
 8009164:	00db      	lsls	r3, r3, #3
 8009166:	ebad 0d03 	sub.w	sp, sp, r3
 800916a:	466b      	mov	r3, sp
 800916c:	3303      	adds	r3, #3
 800916e:	089b      	lsrs	r3, r3, #2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	603b      	str	r3, [r7, #0]
	for(int c=0; c<numBalls; c++){ //loop through all arrays to set intials
 8009174:	2300      	movs	r3, #0
 8009176:	633b      	str	r3, [r7, #48]	; 0x30
 8009178:	e050      	b.n	800921c <nGrid+0x394>
	  getrand(randSelect);
 800917a:	4b95      	ldr	r3, [pc, #596]	; (80093d0 <nGrid+0x548>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4618      	mov	r0, r3
 8009180:	f000 fd16 	bl	8009bb0 <getrand>
	  myGreen[c] = green; //n number if random colors
 8009184:	4b93      	ldr	r3, [pc, #588]	; (80093d4 <nGrid+0x54c>)
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	4619      	mov	r1, r3
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800918e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  myRed[c] = red;
 8009192:	4b91      	ldr	r3, [pc, #580]	; (80093d8 <nGrid+0x550>)
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	4619      	mov	r1, r3
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800919c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  myBlue[c] = blue;
 80091a0:	4b8e      	ldr	r3, [pc, #568]	; (80093dc <nGrid+0x554>)
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	4619      	mov	r1, r3
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  Headx[c] = randomNum(0,Limitx+1); //pick n number of random x start points
 80091ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091b0:	3301      	adds	r3, #1
 80091b2:	4619      	mov	r1, r3
 80091b4:	2000      	movs	r0, #0
 80091b6:	f7ff fe09 	bl	8008dcc <randomNum>
 80091ba:	4601      	mov	r1, r0
 80091bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  Heady[c] = randomNum(0,Limity+1); //pick n number of random y start points
 80091c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091c6:	3301      	adds	r3, #1
 80091c8:	4619      	mov	r1, r3
 80091ca:	2000      	movs	r0, #0
 80091cc:	f7ff fdfe 	bl	8008dcc <randomNum>
 80091d0:	4601      	mov	r1, r0
 80091d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  if(randomNum(0,2)){
 80091da:	2102      	movs	r1, #2
 80091dc:	2000      	movs	r0, #0
 80091de:	f7ff fdf5 	bl	8008dcc <randomNum>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00a      	beq.n	80091fe <nGrid+0x376>
	  Dirx[c] = 1;//pow(-1,random(1,2));
 80091e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ec:	2101      	movs	r1, #1
 80091ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  Diry[c] = 1;//pow(-1,random(1,2));
 80091f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091f6:	2101      	movs	r1, #1
 80091f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80091fc:	e00b      	b.n	8009216 <nGrid+0x38e>
	  }else{
	  Dirx[c] = -1;//pow(-1,random(1,2));
 80091fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009202:	f04f 31ff 	mov.w	r1, #4294967295
 8009206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  Diry[c] = -1;//pow(-1,random(1,2));
 800920a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800920e:	f04f 31ff 	mov.w	r1, #4294967295
 8009212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int c=0; c<numBalls; c++){ //loop through all arrays to set intials
 8009216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009218:	3301      	adds	r3, #1
 800921a:	633b      	str	r3, [r7, #48]	; 0x30
 800921c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800921e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009220:	429a      	cmp	r2, r3
 8009222:	dbaa      	blt.n	800917a <nGrid+0x2f2>
	  }
	}
    for(int i=0; i<=cycles; i++){
 8009224:	2300      	movs	r3, #0
 8009226:	637b      	str	r3, [r7, #52]	; 0x34
 8009228:	e0ba      	b.n	80093a0 <nGrid+0x518>
		 //checkbtn3();
		  for(int c=0; c<numBalls; c++){
 800922a:	2300      	movs	r3, #0
 800922c:	63bb      	str	r3, [r7, #56]	; 0x38
 800922e:	e0a8      	b.n	8009382 <nGrid+0x4fa>
			   if(Headx[c]==0) Dirx[c]=1;
 8009230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009232:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d104      	bne.n	8009246 <nGrid+0x3be>
 800923c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800923e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009240:	2101      	movs	r1, #1
 8009242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			   if(Headx[c]==Limitx) Dirx[c]=-1;
 8009246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800924a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800924e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009250:	429a      	cmp	r2, r3
 8009252:	d105      	bne.n	8009260 <nGrid+0x3d8>
 8009254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009256:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009258:	f04f 31ff 	mov.w	r1, #4294967295
 800925c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			   if(Heady[c]==0) Diry[c]=1;
 8009260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009262:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d104      	bne.n	8009276 <nGrid+0x3ee>
 800926c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009270:	2101      	movs	r1, #1
 8009272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			   if(Heady[c]==Limity) Diry[c]=-1;
 8009276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800927a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800927e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009280:	429a      	cmp	r2, r3
 8009282:	d105      	bne.n	8009290 <nGrid+0x408>
 8009284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009286:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009288:	f04f 31ff 	mov.w	r1, #4294967295
 800928c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			  Tailx[c] = Headx[c];
 8009290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009294:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009298:	6a3b      	ldr	r3, [r7, #32]
 800929a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800929c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  Taily[c] = Heady[c];
 80092a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  if(c%2==0){
 80092b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10d      	bne.n	80092d6 <nGrid+0x44e>
			  Headx[c]+=Dirx[c];
 80092ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80092c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80092ca:	18d1      	adds	r1, r2, r3
 80092cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80092d4:	e00c      	b.n	80092f0 <nGrid+0x468>
			  }else{
			  Heady[c]+=Diry[c];
 80092d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80092de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80092e6:	18d1      	adds	r1, r2, r3
 80092e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  }
			  setPixelColor(ColumnArray[Headx[c]][Heady[c]],Color(myGreen[c]/(numBalls-c),myRed[c]/(numBalls-c),myBlue[c]/(numBalls-c))); //set the pixel
 80092f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80092f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009300:	4937      	ldr	r1, [pc, #220]	; (80093e0 <nGrid+0x558>)
 8009302:	00d2      	lsls	r2, r2, #3
 8009304:	440a      	add	r2, r1
 8009306:	4413      	add	r3, r2
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	461e      	mov	r6, r3
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009310:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009314:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009318:	1acb      	subs	r3, r1, r3
 800931a:	fb92 f3f3 	sdiv	r3, r2, r3
 800931e:	b2d8      	uxtb	r0, r3
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009324:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009328:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800932a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932c:	1acb      	subs	r3, r1, r3
 800932e:	fb92 f3f3 	sdiv	r3, r2, r3
 8009332:	b2dc      	uxtb	r4, r3
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009338:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800933c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800933e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009340:	1acb      	subs	r3, r1, r3
 8009342:	fb92 f3f3 	sdiv	r3, r2, r3
 8009346:	b2db      	uxtb	r3, r3
 8009348:	461a      	mov	r2, r3
 800934a:	4621      	mov	r1, r4
 800934c:	f7ff fd0e 	bl	8008d6c <Color>
 8009350:	4603      	mov	r3, r0
 8009352:	4619      	mov	r1, r3
 8009354:	4630      	mov	r0, r6
 8009356:	f7ff fb0f 	bl	8008978 <setPixelColor>
			  setPixelColor(ColumnArray[Tailx[c]][Taily[c]],0); //clear the pixel (causing flashing?
 800935a:	6a3b      	ldr	r3, [r7, #32]
 800935c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800935e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009366:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800936a:	491d      	ldr	r1, [pc, #116]	; (80093e0 <nGrid+0x558>)
 800936c:	00d2      	lsls	r2, r2, #3
 800936e:	440a      	add	r2, r1
 8009370:	4413      	add	r3, r2
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	2100      	movs	r1, #0
 8009376:	4618      	mov	r0, r3
 8009378:	f7ff fafe 	bl	8008978 <setPixelColor>
		  for(int c=0; c<numBalls; c++){
 800937c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937e:	3301      	adds	r3, #1
 8009380:	63bb      	str	r3, [r7, #56]	; 0x38
 8009382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009386:	429a      	cmp	r2, r3
 8009388:	f6ff af52 	blt.w	8009230 <nGrid+0x3a8>
		}
		    show();
 800938c:	f7ff fae6 	bl	800895c <show>
		 	HAL_Delay(waittime);
 8009390:	4b14      	ldr	r3, [pc, #80]	; (80093e4 <nGrid+0x55c>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4618      	mov	r0, r3
 8009396:	f7f7 fbf9 	bl	8000b8c <HAL_Delay>
    for(int i=0; i<=cycles; i++){
 800939a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800939c:	3301      	adds	r3, #1
 800939e:	637b      	str	r3, [r7, #52]	; 0x34
 80093a0:	4b11      	ldr	r3, [pc, #68]	; (80093e8 <nGrid+0x560>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093a6:	429a      	cmp	r2, r3
 80093a8:	f77f af3f 	ble.w	800922a <nGrid+0x3a2>
	}
	if(randomNum(0,1000)==500){
 80093ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80093b0:	2000      	movs	r0, #0
 80093b2:	f7ff fd0b 	bl	8008dcc <randomNum>
 80093b6:	4603      	mov	r3, r0
 80093b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80093bc:	d103      	bne.n	80093c6 <nGrid+0x53e>
	printStringWithShiftL(" STARIOS", 40); //Send Lscrolling Text (send car array)
 80093be:	2128      	movs	r1, #40	; 0x28
 80093c0:	480a      	ldr	r0, [pc, #40]	; (80093ec <nGrid+0x564>)
 80093c2:	f7ff fc55 	bl	8008c70 <printStringWithShiftL>
 80093c6:	46ad      	mov	sp, r5
	}

}
 80093c8:	bf00      	nop
 80093ca:	3764      	adds	r7, #100	; 0x64
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093d0:	200003a8 	.word	0x200003a8
 80093d4:	20000ddc 	.word	0x20000ddc
 80093d8:	20000fe0 	.word	0x20000fe0
 80093dc:	20000d10 	.word	0x20000d10
 80093e0:	0800f4a0 	.word	0x0800f4a0
 80093e4:	2000012c 	.word	0x2000012c
 80093e8:	20000128 	.word	0x20000128
 80093ec:	0800e820 	.word	0x0800e820

080093f0 <nBalls>:



void nBalls(){ //make a snake head pop upin a random spot and move it around the screen randomly
 80093f0:	b5b0      	push	{r4, r5, r7, lr}
 80093f2:	b09a      	sub	sp, #104	; 0x68
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	466b      	mov	r3, sp
 80093f8:	461d      	mov	r5, r3
	//rand usage: int myRandomnumber = (rand() % (MAX - MIN + 1)) + MIN;
#define MAXBALLS 20
#define MINBALLS 8
	int numBalls = (rand() % (MAXBALLS - MINBALLS + 1)) + MINBALLS; //number of balls
 80093fa:	f002 fccd 	bl	800bd98 <rand>
 80093fe:	4601      	mov	r1, r0
 8009400:	4bbc      	ldr	r3, [pc, #752]	; (80096f4 <nBalls+0x304>)
 8009402:	fb83 2301 	smull	r2, r3, r3, r1
 8009406:	109a      	asrs	r2, r3, #2
 8009408:	17cb      	asrs	r3, r1, #31
 800940a:	1ad2      	subs	r2, r2, r3
 800940c:	4613      	mov	r3, r2
 800940e:	005b      	lsls	r3, r3, #1
 8009410:	4413      	add	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	4413      	add	r3, r2
 8009416:	1aca      	subs	r2, r1, r3
 8009418:	f102 0308 	add.w	r3, r2, #8
 800941c:	657b      	str	r3, [r7, #84]	; 0x54
	//int Limitx = (numCols-1); //width
	//int Limity = (numRows-1);//height
	int Headx[numBalls]; //head potion holder
 800941e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009420:	1e43      	subs	r3, r0, #1
 8009422:	65bb      	str	r3, [r7, #88]	; 0x58
 8009424:	4603      	mov	r3, r0
 8009426:	4619      	mov	r1, r3
 8009428:	f04f 0200 	mov.w	r2, #0
 800942c:	f04f 0300 	mov.w	r3, #0
 8009430:	f04f 0400 	mov.w	r4, #0
 8009434:	0154      	lsls	r4, r2, #5
 8009436:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800943a:	014b      	lsls	r3, r1, #5
 800943c:	4603      	mov	r3, r0
 800943e:	4619      	mov	r1, r3
 8009440:	f04f 0200 	mov.w	r2, #0
 8009444:	f04f 0300 	mov.w	r3, #0
 8009448:	f04f 0400 	mov.w	r4, #0
 800944c:	0154      	lsls	r4, r2, #5
 800944e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009452:	014b      	lsls	r3, r1, #5
 8009454:	4603      	mov	r3, r0
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	3303      	adds	r3, #3
 800945a:	3307      	adds	r3, #7
 800945c:	08db      	lsrs	r3, r3, #3
 800945e:	00db      	lsls	r3, r3, #3
 8009460:	ebad 0d03 	sub.w	sp, sp, r3
 8009464:	466b      	mov	r3, sp
 8009466:	3303      	adds	r3, #3
 8009468:	089b      	lsrs	r3, r3, #2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	65fb      	str	r3, [r7, #92]	; 0x5c
	int Heady[numBalls]; //head postion holder
 800946e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009470:	1e43      	subs	r3, r0, #1
 8009472:	663b      	str	r3, [r7, #96]	; 0x60
 8009474:	4603      	mov	r3, r0
 8009476:	4619      	mov	r1, r3
 8009478:	f04f 0200 	mov.w	r2, #0
 800947c:	f04f 0300 	mov.w	r3, #0
 8009480:	f04f 0400 	mov.w	r4, #0
 8009484:	0154      	lsls	r4, r2, #5
 8009486:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800948a:	014b      	lsls	r3, r1, #5
 800948c:	4603      	mov	r3, r0
 800948e:	4619      	mov	r1, r3
 8009490:	f04f 0200 	mov.w	r2, #0
 8009494:	f04f 0300 	mov.w	r3, #0
 8009498:	f04f 0400 	mov.w	r4, #0
 800949c:	0154      	lsls	r4, r2, #5
 800949e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80094a2:	014b      	lsls	r3, r1, #5
 80094a4:	4603      	mov	r3, r0
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	3303      	adds	r3, #3
 80094aa:	3307      	adds	r3, #7
 80094ac:	08db      	lsrs	r3, r3, #3
 80094ae:	00db      	lsls	r3, r3, #3
 80094b0:	ebad 0d03 	sub.w	sp, sp, r3
 80094b4:	466b      	mov	r3, sp
 80094b6:	3303      	adds	r3, #3
 80094b8:	089b      	lsrs	r3, r3, #2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	667b      	str	r3, [r7, #100]	; 0x64
	int Dirx[numBalls]; //-1 or 1
 80094be:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80094c0:	1e43      	subs	r3, r0, #1
 80094c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80094c4:	4603      	mov	r3, r0
 80094c6:	4619      	mov	r1, r3
 80094c8:	f04f 0200 	mov.w	r2, #0
 80094cc:	f04f 0300 	mov.w	r3, #0
 80094d0:	f04f 0400 	mov.w	r4, #0
 80094d4:	0154      	lsls	r4, r2, #5
 80094d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80094da:	014b      	lsls	r3, r1, #5
 80094dc:	4603      	mov	r3, r0
 80094de:	4619      	mov	r1, r3
 80094e0:	f04f 0200 	mov.w	r2, #0
 80094e4:	f04f 0300 	mov.w	r3, #0
 80094e8:	f04f 0400 	mov.w	r4, #0
 80094ec:	0154      	lsls	r4, r2, #5
 80094ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80094f2:	014b      	lsls	r3, r1, #5
 80094f4:	4603      	mov	r3, r0
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	3303      	adds	r3, #3
 80094fa:	3307      	adds	r3, #7
 80094fc:	08db      	lsrs	r3, r3, #3
 80094fe:	00db      	lsls	r3, r3, #3
 8009500:	ebad 0d03 	sub.w	sp, sp, r3
 8009504:	466b      	mov	r3, sp
 8009506:	3303      	adds	r3, #3
 8009508:	089b      	lsrs	r3, r3, #2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	637b      	str	r3, [r7, #52]	; 0x34
	int Diry[numBalls]; //-1 or 1
 800950e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009510:	1e43      	subs	r3, r0, #1
 8009512:	633b      	str	r3, [r7, #48]	; 0x30
 8009514:	4603      	mov	r3, r0
 8009516:	4619      	mov	r1, r3
 8009518:	f04f 0200 	mov.w	r2, #0
 800951c:	f04f 0300 	mov.w	r3, #0
 8009520:	f04f 0400 	mov.w	r4, #0
 8009524:	0154      	lsls	r4, r2, #5
 8009526:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800952a:	014b      	lsls	r3, r1, #5
 800952c:	4603      	mov	r3, r0
 800952e:	4619      	mov	r1, r3
 8009530:	f04f 0200 	mov.w	r2, #0
 8009534:	f04f 0300 	mov.w	r3, #0
 8009538:	f04f 0400 	mov.w	r4, #0
 800953c:	0154      	lsls	r4, r2, #5
 800953e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009542:	014b      	lsls	r3, r1, #5
 8009544:	4603      	mov	r3, r0
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	3303      	adds	r3, #3
 800954a:	3307      	adds	r3, #7
 800954c:	08db      	lsrs	r3, r3, #3
 800954e:	00db      	lsls	r3, r3, #3
 8009550:	ebad 0d03 	sub.w	sp, sp, r3
 8009554:	466b      	mov	r3, sp
 8009556:	3303      	adds	r3, #3
 8009558:	089b      	lsrs	r3, r3, #2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int Tailx[numBalls]; //tailx position. is not really 'seen'. exists to reduce "flickering"
 800955e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009560:	1e43      	subs	r3, r0, #1
 8009562:	62bb      	str	r3, [r7, #40]	; 0x28
 8009564:	4603      	mov	r3, r0
 8009566:	4619      	mov	r1, r3
 8009568:	f04f 0200 	mov.w	r2, #0
 800956c:	f04f 0300 	mov.w	r3, #0
 8009570:	f04f 0400 	mov.w	r4, #0
 8009574:	0154      	lsls	r4, r2, #5
 8009576:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800957a:	014b      	lsls	r3, r1, #5
 800957c:	4603      	mov	r3, r0
 800957e:	4619      	mov	r1, r3
 8009580:	f04f 0200 	mov.w	r2, #0
 8009584:	f04f 0300 	mov.w	r3, #0
 8009588:	f04f 0400 	mov.w	r4, #0
 800958c:	0154      	lsls	r4, r2, #5
 800958e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009592:	014b      	lsls	r3, r1, #5
 8009594:	4603      	mov	r3, r0
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	3303      	adds	r3, #3
 800959a:	3307      	adds	r3, #7
 800959c:	08db      	lsrs	r3, r3, #3
 800959e:	00db      	lsls	r3, r3, #3
 80095a0:	ebad 0d03 	sub.w	sp, sp, r3
 80095a4:	466b      	mov	r3, sp
 80095a6:	3303      	adds	r3, #3
 80095a8:	089b      	lsrs	r3, r3, #2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	627b      	str	r3, [r7, #36]	; 0x24
	int Taily[numBalls]; //taily position
 80095ae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80095b0:	1e43      	subs	r3, r0, #1
 80095b2:	623b      	str	r3, [r7, #32]
 80095b4:	4603      	mov	r3, r0
 80095b6:	4619      	mov	r1, r3
 80095b8:	f04f 0200 	mov.w	r2, #0
 80095bc:	f04f 0300 	mov.w	r3, #0
 80095c0:	f04f 0400 	mov.w	r4, #0
 80095c4:	0154      	lsls	r4, r2, #5
 80095c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80095ca:	014b      	lsls	r3, r1, #5
 80095cc:	4603      	mov	r3, r0
 80095ce:	4619      	mov	r1, r3
 80095d0:	f04f 0200 	mov.w	r2, #0
 80095d4:	f04f 0300 	mov.w	r3, #0
 80095d8:	f04f 0400 	mov.w	r4, #0
 80095dc:	0154      	lsls	r4, r2, #5
 80095de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80095e2:	014b      	lsls	r3, r1, #5
 80095e4:	4603      	mov	r3, r0
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	3303      	adds	r3, #3
 80095ea:	3307      	adds	r3, #7
 80095ec:	08db      	lsrs	r3, r3, #3
 80095ee:	00db      	lsls	r3, r3, #3
 80095f0:	ebad 0d03 	sub.w	sp, sp, r3
 80095f4:	466b      	mov	r3, sp
 80095f6:	3303      	adds	r3, #3
 80095f8:	089b      	lsrs	r3, r3, #2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	61fb      	str	r3, [r7, #28]
	int myGreen[numBalls];
 80095fe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009600:	1e43      	subs	r3, r0, #1
 8009602:	61bb      	str	r3, [r7, #24]
 8009604:	4603      	mov	r3, r0
 8009606:	4619      	mov	r1, r3
 8009608:	f04f 0200 	mov.w	r2, #0
 800960c:	f04f 0300 	mov.w	r3, #0
 8009610:	f04f 0400 	mov.w	r4, #0
 8009614:	0154      	lsls	r4, r2, #5
 8009616:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800961a:	014b      	lsls	r3, r1, #5
 800961c:	4603      	mov	r3, r0
 800961e:	4619      	mov	r1, r3
 8009620:	f04f 0200 	mov.w	r2, #0
 8009624:	f04f 0300 	mov.w	r3, #0
 8009628:	f04f 0400 	mov.w	r4, #0
 800962c:	0154      	lsls	r4, r2, #5
 800962e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009632:	014b      	lsls	r3, r1, #5
 8009634:	4603      	mov	r3, r0
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	3303      	adds	r3, #3
 800963a:	3307      	adds	r3, #7
 800963c:	08db      	lsrs	r3, r3, #3
 800963e:	00db      	lsls	r3, r3, #3
 8009640:	ebad 0d03 	sub.w	sp, sp, r3
 8009644:	466b      	mov	r3, sp
 8009646:	3303      	adds	r3, #3
 8009648:	089b      	lsrs	r3, r3, #2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	617b      	str	r3, [r7, #20]
	int myRed[numBalls];
 800964e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009650:	1e43      	subs	r3, r0, #1
 8009652:	613b      	str	r3, [r7, #16]
 8009654:	4603      	mov	r3, r0
 8009656:	4619      	mov	r1, r3
 8009658:	f04f 0200 	mov.w	r2, #0
 800965c:	f04f 0300 	mov.w	r3, #0
 8009660:	f04f 0400 	mov.w	r4, #0
 8009664:	0154      	lsls	r4, r2, #5
 8009666:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800966a:	014b      	lsls	r3, r1, #5
 800966c:	4603      	mov	r3, r0
 800966e:	4619      	mov	r1, r3
 8009670:	f04f 0200 	mov.w	r2, #0
 8009674:	f04f 0300 	mov.w	r3, #0
 8009678:	f04f 0400 	mov.w	r4, #0
 800967c:	0154      	lsls	r4, r2, #5
 800967e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009682:	014b      	lsls	r3, r1, #5
 8009684:	4603      	mov	r3, r0
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	3303      	adds	r3, #3
 800968a:	3307      	adds	r3, #7
 800968c:	08db      	lsrs	r3, r3, #3
 800968e:	00db      	lsls	r3, r3, #3
 8009690:	ebad 0d03 	sub.w	sp, sp, r3
 8009694:	466b      	mov	r3, sp
 8009696:	3303      	adds	r3, #3
 8009698:	089b      	lsrs	r3, r3, #2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	60fb      	str	r3, [r7, #12]
	int myBlue[numBalls];
 800969e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80096a0:	1e43      	subs	r3, r0, #1
 80096a2:	60bb      	str	r3, [r7, #8]
 80096a4:	4603      	mov	r3, r0
 80096a6:	4619      	mov	r1, r3
 80096a8:	f04f 0200 	mov.w	r2, #0
 80096ac:	f04f 0300 	mov.w	r3, #0
 80096b0:	f04f 0400 	mov.w	r4, #0
 80096b4:	0154      	lsls	r4, r2, #5
 80096b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80096ba:	014b      	lsls	r3, r1, #5
 80096bc:	4603      	mov	r3, r0
 80096be:	4619      	mov	r1, r3
 80096c0:	f04f 0200 	mov.w	r2, #0
 80096c4:	f04f 0300 	mov.w	r3, #0
 80096c8:	f04f 0400 	mov.w	r4, #0
 80096cc:	0154      	lsls	r4, r2, #5
 80096ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80096d2:	014b      	lsls	r3, r1, #5
 80096d4:	4603      	mov	r3, r0
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	3303      	adds	r3, #3
 80096da:	3307      	adds	r3, #7
 80096dc:	08db      	lsrs	r3, r3, #3
 80096de:	00db      	lsls	r3, r3, #3
 80096e0:	ebad 0d03 	sub.w	sp, sp, r3
 80096e4:	466b      	mov	r3, sp
 80096e6:	3303      	adds	r3, #3
 80096e8:	089b      	lsrs	r3, r3, #2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	607b      	str	r3, [r7, #4]
	for(int c=0; c<numBalls; c++){ //loop through all arrays to set intials
 80096ee:	2300      	movs	r3, #0
 80096f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096f2:	e049      	b.n	8009788 <nBalls+0x398>
 80096f4:	4ec4ec4f 	.word	0x4ec4ec4f
	  getrand(randSelect);
 80096f8:	4bb1      	ldr	r3, [pc, #708]	; (80099c0 <nBalls+0x5d0>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 fa57 	bl	8009bb0 <getrand>
	  myGreen[c] = green; //n number if random colors
 8009702:	4bb0      	ldr	r3, [pc, #704]	; (80099c4 <nBalls+0x5d4>)
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	4619      	mov	r1, r3
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800970c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  myRed[c] = red;
 8009710:	4bad      	ldr	r3, [pc, #692]	; (80099c8 <nBalls+0x5d8>)
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	4619      	mov	r1, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800971a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  myBlue[c] = blue;
 800971e:	4bab      	ldr	r3, [pc, #684]	; (80099cc <nBalls+0x5dc>)
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	4619      	mov	r1, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  Headx[c] = (rand() % ((numCols-1) - 0 + 1)) + 0; //pick n number of random x start points //could be replaced using my randomNum function
 800972c:	f002 fb34 	bl	800bd98 <rand>
 8009730:	4601      	mov	r1, r0
 8009732:	4ba7      	ldr	r3, [pc, #668]	; (80099d0 <nBalls+0x5e0>)
 8009734:	fb83 2301 	smull	r2, r3, r3, r1
 8009738:	109a      	asrs	r2, r3, #2
 800973a:	17cb      	asrs	r3, r1, #31
 800973c:	1ad2      	subs	r2, r2, r3
 800973e:	4613      	mov	r3, r2
 8009740:	005b      	lsls	r3, r3, #1
 8009742:	4413      	add	r3, r2
 8009744:	00da      	lsls	r2, r3, #3
 8009746:	1ad2      	subs	r2, r2, r3
 8009748:	1a8a      	subs	r2, r1, r2
 800974a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800974c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800974e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	  Heady[c] = (rand() % ((numRows-1) - 0 + 1)) + 0; //pick n number of random y start points
 8009752:	f002 fb21 	bl	800bd98 <rand>
 8009756:	4603      	mov	r3, r0
 8009758:	425a      	negs	r2, r3
 800975a:	f003 0307 	and.w	r3, r3, #7
 800975e:	f002 0207 	and.w	r2, r2, #7
 8009762:	bf58      	it	pl
 8009764:	4253      	negpl	r3, r2
 8009766:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009768:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800976a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  Dirx[c] = 1;//pow(-1,random(1,2));
 800976e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009770:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009772:	2101      	movs	r1, #1
 8009774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  Diry[c] = 1;//pow(-1,random(1,2));
 8009778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800977c:	2101      	movs	r1, #1
 800977e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int c=0; c<numBalls; c++){ //loop through all arrays to set intials
 8009782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009784:	3301      	adds	r3, #1
 8009786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009788:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800978a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800978c:	429a      	cmp	r2, r3
 800978e:	dbb3      	blt.n	80096f8 <nBalls+0x308>
	}
    for(int i=0; i<=cycles; i++){
 8009790:	2300      	movs	r3, #0
 8009792:	643b      	str	r3, [r7, #64]	; 0x40
 8009794:	e142      	b.n	8009a1c <nBalls+0x62c>
		 //checkbtn3();
		  for(int c=0; c<numBalls; c++){
 8009796:	2300      	movs	r3, #0
 8009798:	647b      	str	r3, [r7, #68]	; 0x44
 800979a:	e090      	b.n	80098be <nBalls+0x4ce>
			  if(Headx[c]==0) Dirx[c]=1;
 800979c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800979e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d104      	bne.n	80097b2 <nBalls+0x3c2>
 80097a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097ac:	2101      	movs	r1, #1
 80097ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  if(Headx[c]==(numCols-1)) Dirx[c]=-1;
 80097b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ba:	2b14      	cmp	r3, #20
 80097bc:	d105      	bne.n	80097ca <nBalls+0x3da>
 80097be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097c2:	f04f 31ff 	mov.w	r1, #4294967295
 80097c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  if(Heady[c]==0) Diry[c]=1;
 80097ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d104      	bne.n	80097e0 <nBalls+0x3f0>
 80097d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097da:	2101      	movs	r1, #1
 80097dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  if(Heady[c]==(numRows-1)) Diry[c]=-1;
 80097e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e8:	2b07      	cmp	r3, #7
 80097ea:	d105      	bne.n	80097f8 <nBalls+0x408>
 80097ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097f0:	f04f 31ff 	mov.w	r1, #4294967295
 80097f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			  Tailx[c] = Headx[c];
 80097f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009802:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  Taily[c] = Heady[c];
 8009808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800980a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800980c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  Headx[c]+=Dirx[c];
 8009818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800981a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800981c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009822:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009824:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009828:	18d1      	adds	r1, r2, r3
 800982a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800982c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800982e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  Heady[c]+=Diry[c];
 8009832:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009834:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009836:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800983a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800983e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009842:	18d1      	adds	r1, r2, r3
 8009844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009846:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  setPixelColor(ColumnArray[Headx[c]][Heady[c]],Color(myGreen[c],myRed[c],myBlue[c])); //set the pixel
 800984c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800984e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009850:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009856:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009858:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800985c:	495d      	ldr	r1, [pc, #372]	; (80099d4 <nBalls+0x5e4>)
 800985e:	00d2      	lsls	r2, r2, #3
 8009860:	440a      	add	r2, r1
 8009862:	4413      	add	r3, r2
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	461c      	mov	r4, r3
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800986c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009870:	b2d8      	uxtb	r0, r3
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800987a:	b2d9      	uxtb	r1, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009884:	b2db      	uxtb	r3, r3
 8009886:	461a      	mov	r2, r3
 8009888:	f7ff fa70 	bl	8008d6c <Color>
 800988c:	4603      	mov	r3, r0
 800988e:	4619      	mov	r1, r3
 8009890:	4620      	mov	r0, r4
 8009892:	f7ff f871 	bl	8008978 <setPixelColor>
			  setPixelColor(ColumnArray[Tailx[c]][Taily[c]],0); //clear the pixel (causing flashing?
 8009896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009898:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800989a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80098a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80098a6:	494b      	ldr	r1, [pc, #300]	; (80099d4 <nBalls+0x5e4>)
 80098a8:	00d2      	lsls	r2, r2, #3
 80098aa:	440a      	add	r2, r1
 80098ac:	4413      	add	r3, r2
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	2100      	movs	r1, #0
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7ff f860 	bl	8008978 <setPixelColor>
		  for(int c=0; c<numBalls; c++){
 80098b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098ba:	3301      	adds	r3, #1
 80098bc:	647b      	str	r3, [r7, #68]	; 0x44
 80098be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098c2:	429a      	cmp	r2, r3
 80098c4:	f6ff af6a 	blt.w	800979c <nBalls+0x3ac>
		  }
		  show();
 80098c8:	f7ff f848 	bl	800895c <show>
		  HAL_Delay(waittime);
 80098cc:	4b42      	ldr	r3, [pc, #264]	; (80099d8 <nBalls+0x5e8>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7f7 f95b 	bl	8000b8c <HAL_Delay>
		   if((rand() % (30 - 0 + 1)) + 0 == 15){ //get a random number after all the balls have been updated
 80098d6:	f002 fa5f 	bl	800bd98 <rand>
 80098da:	4601      	mov	r1, r0
 80098dc:	4b3f      	ldr	r3, [pc, #252]	; (80099dc <nBalls+0x5ec>)
 80098de:	fb83 2301 	smull	r2, r3, r3, r1
 80098e2:	440b      	add	r3, r1
 80098e4:	111a      	asrs	r2, r3, #4
 80098e6:	17cb      	asrs	r3, r1, #31
 80098e8:	1ad2      	subs	r2, r2, r3
 80098ea:	4613      	mov	r3, r2
 80098ec:	015b      	lsls	r3, r3, #5
 80098ee:	1a9b      	subs	r3, r3, r2
 80098f0:	1aca      	subs	r2, r1, r3
 80098f2:	2a0f      	cmp	r2, #15
 80098f4:	f040 808f 	bne.w	8009a16 <nBalls+0x626>
			 for(int x=0; x<numBalls; x++){ //loop through each ball
 80098f8:	2300      	movs	r3, #0
 80098fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80098fc:	e086      	b.n	8009a0c <nBalls+0x61c>
			  getrand(randSelect);
 80098fe:	4b30      	ldr	r3, [pc, #192]	; (80099c0 <nBalls+0x5d0>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4618      	mov	r0, r3
 8009904:	f000 f954 	bl	8009bb0 <getrand>
			  myGreen[x] = green; //n number if random colors
 8009908:	4b2e      	ldr	r3, [pc, #184]	; (80099c4 <nBalls+0x5d4>)
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	4619      	mov	r1, r3
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  myRed[x] = red;
 8009916:	4b2c      	ldr	r3, [pc, #176]	; (80099c8 <nBalls+0x5d8>)
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	4619      	mov	r1, r3
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  myBlue[x] = blue;
 8009924:	4b29      	ldr	r3, [pc, #164]	; (80099cc <nBalls+0x5dc>)
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	4619      	mov	r1, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800992e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  if(Headx[x]<numCols-2 && Headx[x]>=2){
 8009932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009934:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800993a:	2b12      	cmp	r3, #18
 800993c:	dc63      	bgt.n	8009a06 <nBalls+0x616>
 800993e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009946:	2b01      	cmp	r3, #1
 8009948:	dd5d      	ble.n	8009a06 <nBalls+0x616>
				 for(int z=0; z<numBalls; z++) setPixelColor(ColumnArray[Headx[x]][Heady[x]],0); //needed to clear the stuck balls
 800994a:	2300      	movs	r3, #0
 800994c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800994e:	e013      	b.n	8009978 <nBalls+0x588>
 8009950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009954:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800995a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800995c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009960:	491c      	ldr	r1, [pc, #112]	; (80099d4 <nBalls+0x5e4>)
 8009962:	00d2      	lsls	r2, r2, #3
 8009964:	440a      	add	r2, r1
 8009966:	4413      	add	r3, r2
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	2100      	movs	r1, #0
 800996c:	4618      	mov	r0, r3
 800996e:	f7ff f803 	bl	8008978 <setPixelColor>
 8009972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009974:	3301      	adds	r3, #1
 8009976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009978:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800997a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800997c:	429a      	cmp	r2, r3
 800997e:	dbe7      	blt.n	8009950 <nBalls+0x560>
				 if((rand() % (2 - 0 + 1)) + 0){ //add a shift to keep things from repeating too much
 8009980:	f002 fa0a 	bl	800bd98 <rand>
 8009984:	4601      	mov	r1, r0
 8009986:	4b16      	ldr	r3, [pc, #88]	; (80099e0 <nBalls+0x5f0>)
 8009988:	fb83 3201 	smull	r3, r2, r3, r1
 800998c:	17cb      	asrs	r3, r1, #31
 800998e:	1ad2      	subs	r2, r2, r3
 8009990:	4613      	mov	r3, r2
 8009992:	005b      	lsls	r3, r3, #1
 8009994:	4413      	add	r3, r2
 8009996:	1aca      	subs	r2, r1, r3
 8009998:	2a00      	cmp	r2, #0
 800999a:	d023      	beq.n	80099e4 <nBalls+0x5f4>
					 Tailx[x] = Headx[x];
 800999c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800999e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					 Headx[x]++;
 80099ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b4:	1c59      	adds	r1, r3, #1
 80099b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80099be:	e022      	b.n	8009a06 <nBalls+0x616>
 80099c0:	200003a8 	.word	0x200003a8
 80099c4:	20000ddc 	.word	0x20000ddc
 80099c8:	20000fe0 	.word	0x20000fe0
 80099cc:	20000d10 	.word	0x20000d10
 80099d0:	30c30c31 	.word	0x30c30c31
 80099d4:	0800f4a0 	.word	0x0800f4a0
 80099d8:	2000012c 	.word	0x2000012c
 80099dc:	84210843 	.word	0x84210843
 80099e0:	55555556 	.word	0x55555556
				 }else{
					 Tailx[x] = Headx[x];
 80099e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					 Headx[x]--;
 80099f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099fc:	1e59      	subs	r1, r3, #1
 80099fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			 for(int x=0; x<numBalls; x++){ //loop through each ball
 8009a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a08:	3301      	adds	r3, #1
 8009a0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a10:	429a      	cmp	r2, r3
 8009a12:	f6ff af74 	blt.w	80098fe <nBalls+0x50e>
    for(int i=0; i<=cycles; i++){
 8009a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a18:	3301      	adds	r3, #1
 8009a1a:	643b      	str	r3, [r7, #64]	; 0x40
 8009a1c:	4b5f      	ldr	r3, [pc, #380]	; (8009b9c <nBalls+0x7ac>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a22:	429a      	cmp	r2, r3
 8009a24:	f77f aeb7 	ble.w	8009796 <nBalls+0x3a6>
				 }
			  }
			 }
		}
	}
	for(uint8_t k=0; k<16; k++){ //picked 5 times as random amount should be enough to get all to zero
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8009a2e:	e08f      	b.n	8009b50 <nBalls+0x760>
	//instead of setting the color to 0, fade it to 0. need to get the rgb for each color in the array. int32 to 3 byte
	int decayRate = 4; //used to set the speed of the dimming effect
 8009a30:	2304      	movs	r3, #4
 8009a32:	603b      	str	r3, [r7, #0]
	for(uint8_t j=0; j<numBalls; j++){
 8009a34:	2300      	movs	r3, #0
 8009a36:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8009a3a:	e07e      	b.n	8009b3a <nBalls+0x74a>
	    myRed[j]-=decayRate;
 8009a3c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a46:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	1ac9      	subs	r1, r1, r3
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		myGreen[j]-=decayRate;
 8009a54:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a5e:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	1ac9      	subs	r1, r1, r3
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		myBlue[j]-=decayRate;
 8009a6c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a76:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	1ac9      	subs	r1, r1, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if(myRed[j]<decayRate)myRed[j]=0;
 8009a84:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a8e:	683a      	ldr	r2, [r7, #0]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	dd05      	ble.n	8009aa0 <nBalls+0x6b0>
 8009a94:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if(myGreen[j]<decayRate)myGreen[j]=0;
 8009aa0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aaa:	683a      	ldr	r2, [r7, #0]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	dd05      	ble.n	8009abc <nBalls+0x6cc>
 8009ab0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if(myBlue[j]<decayRate)myBlue[j]=0;
 8009abc:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	dd05      	ble.n	8009ad8 <nBalls+0x6e8>
 8009acc:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		setPixelColor(ColumnArray[Headx[j]][Heady[j]],Color(myRed[j],myGreen[j],myBlue[j])); //clear the pixels this way insteadof BlankScreen
 8009ad8:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8009adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ade:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009ae2:	f897 1053 	ldrb.w	r1, [r7, #83]	; 0x53
 8009ae6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ae8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009aec:	492c      	ldr	r1, [pc, #176]	; (8009ba0 <nBalls+0x7b0>)
 8009aee:	00d2      	lsls	r2, r2, #3
 8009af0:	440a      	add	r2, r1
 8009af2:	4413      	add	r3, r2
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	461c      	mov	r4, r3
 8009af8:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b02:	b2d8      	uxtb	r0, r3
 8009b04:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b0e:	b2d9      	uxtb	r1, r3
 8009b10:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	f7ff f925 	bl	8008d6c <Color>
 8009b22:	4603      	mov	r3, r0
 8009b24:	4619      	mov	r1, r3
 8009b26:	4620      	mov	r0, r4
 8009b28:	f7fe ff26 	bl	8008978 <setPixelColor>
		show();
 8009b2c:	f7fe ff16 	bl	800895c <show>
	for(uint8_t j=0; j<numBalls; j++){
 8009b30:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009b34:	3301      	adds	r3, #1
 8009b36:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8009b3a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009b3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009b40:	429a      	cmp	r2, r3
 8009b42:	f73f af7b 	bgt.w	8009a3c <nBalls+0x64c>
	for(uint8_t k=0; k<16; k++){ //picked 5 times as random amount should be enough to get all to zero
 8009b46:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8009b50:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8009b54:	2b0f      	cmp	r3, #15
 8009b56:	f67f af6b 	bls.w	8009a30 <nBalls+0x640>
		//HAL_Delay(1);
	 }


	}
	if(rand() % (10 - 0 + 1) + 0==5){
 8009b5a:	f002 f91d 	bl	800bd98 <rand>
 8009b5e:	4601      	mov	r1, r0
 8009b60:	4b10      	ldr	r3, [pc, #64]	; (8009ba4 <nBalls+0x7b4>)
 8009b62:	fb83 2301 	smull	r2, r3, r3, r1
 8009b66:	105a      	asrs	r2, r3, #1
 8009b68:	17cb      	asrs	r3, r1, #31
 8009b6a:	1ad2      	subs	r2, r2, r3
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	005b      	lsls	r3, r3, #1
 8009b74:	4413      	add	r3, r2
 8009b76:	1aca      	subs	r2, r1, r3
 8009b78:	2a05      	cmp	r2, #5
 8009b7a:	d109      	bne.n	8009b90 <nBalls+0x7a0>
	getrand(randSelect);
 8009b7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ba8 <nBalls+0x7b8>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f000 f815 	bl	8009bb0 <getrand>
	BlankScreen(Forecolor);
 8009b86:	4b09      	ldr	r3, [pc, #36]	; (8009bac <nBalls+0x7bc>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fe ffbe 	bl	8008b0c <BlankScreen>
 8009b90:	46ad      	mov	sp, r5
	}

}
 8009b92:	bf00      	nop
 8009b94:	3768      	adds	r7, #104	; 0x68
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bdb0      	pop	{r4, r5, r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	20000128 	.word	0x20000128
 8009ba0:	0800f4a0 	.word	0x0800f4a0
 8009ba4:	2e8ba2e9 	.word	0x2e8ba2e9
 8009ba8:	200003a8 	.word	0x200003a8
 8009bac:	20000120 	.word	0x20000120

08009bb0 <getrand>:





void getrand(int c) { // trying to make it //the goal is to get a random forecolor that is not white, then find the opposite of
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  //rand usage: int myRandomnumber = (rand() % (MAX - MIN + 1)) + MIN;
	//getrand requries 0,1,2,3, or specify what type of color to return
      switch ((rand() % (2 - 0 + 1)) + 0) { //0 to 3 //map(rand(),0,32767,0,2)      //could be replaced using my randomNum function
 8009bb8:	f002 f8ee 	bl	800bd98 <rand>
 8009bbc:	4601      	mov	r1, r0
 8009bbe:	4b59      	ldr	r3, [pc, #356]	; (8009d24 <getrand+0x174>)
 8009bc0:	fb83 3201 	smull	r3, r2, r3, r1
 8009bc4:	17cb      	asrs	r3, r1, #31
 8009bc6:	1ad3      	subs	r3, r2, r3
 8009bc8:	461a      	mov	r2, r3
 8009bca:	0052      	lsls	r2, r2, #1
 8009bcc:	441a      	add	r2, r3
 8009bce:	1a8b      	subs	r3, r1, r2
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d033      	beq.n	8009c3c <getrand+0x8c>
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d060      	beq.n	8009c9a <getrand+0xea>
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f040 8092 	bne.w	8009d02 <getrand+0x152>
        case 0:                                 //multi
            green = (uint8_t) 2*((rand() % ((Brange+1) - (1) + 1)) + 0);
 8009bde:	f002 f8db 	bl	800bd98 <rand>
 8009be2:	4602      	mov	r2, r0
 8009be4:	4b50      	ldr	r3, [pc, #320]	; (8009d28 <getrand+0x178>)
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	3301      	adds	r3, #1
 8009bea:	fb92 f1f3 	sdiv	r1, r2, r3
 8009bee:	fb03 f301 	mul.w	r3, r3, r1
 8009bf2:	1ad3      	subs	r3, r2, r3
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	005b      	lsls	r3, r3, #1
 8009bf8:	b2da      	uxtb	r2, r3
 8009bfa:	4b4c      	ldr	r3, [pc, #304]	; (8009d2c <getrand+0x17c>)
 8009bfc:	701a      	strb	r2, [r3, #0]
            red = (uint8_t) 2*((rand() % ((Brange+1) - (0) + 1)) + 0);
 8009bfe:	f002 f8cb 	bl	800bd98 <rand>
 8009c02:	4602      	mov	r2, r0
 8009c04:	4b48      	ldr	r3, [pc, #288]	; (8009d28 <getrand+0x178>)
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	3302      	adds	r3, #2
 8009c0a:	fb92 f1f3 	sdiv	r1, r2, r3
 8009c0e:	fb03 f301 	mul.w	r3, r3, r1
 8009c12:	1ad3      	subs	r3, r2, r3
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	005b      	lsls	r3, r3, #1
 8009c18:	b2da      	uxtb	r2, r3
 8009c1a:	4b45      	ldr	r3, [pc, #276]	; (8009d30 <getrand+0x180>)
 8009c1c:	701a      	strb	r2, [r3, #0]
            blue = 0;
 8009c1e:	4b45      	ldr	r3, [pc, #276]	; (8009d34 <getrand+0x184>)
 8009c20:	2200      	movs	r2, #0
 8009c22:	701a      	strb	r2, [r3, #0]
            if(green==0 && red==0) green = 1;
 8009c24:	4b41      	ldr	r3, [pc, #260]	; (8009d2c <getrand+0x17c>)
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d165      	bne.n	8009cf8 <getrand+0x148>
 8009c2c:	4b40      	ldr	r3, [pc, #256]	; (8009d30 <getrand+0x180>)
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d161      	bne.n	8009cf8 <getrand+0x148>
 8009c34:	4b3d      	ldr	r3, [pc, #244]	; (8009d2c <getrand+0x17c>)
 8009c36:	2201      	movs	r2, #1
 8009c38:	701a      	strb	r2, [r3, #0]
          break;
 8009c3a:	e05d      	b.n	8009cf8 <getrand+0x148>

        case 1:
        	 green = (uint8_t) 2*((rand() % ((Brange+1) - (0) + 1)) + 0);
 8009c3c:	f002 f8ac 	bl	800bd98 <rand>
 8009c40:	4602      	mov	r2, r0
 8009c42:	4b39      	ldr	r3, [pc, #228]	; (8009d28 <getrand+0x178>)
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	3302      	adds	r3, #2
 8009c48:	fb92 f1f3 	sdiv	r1, r2, r3
 8009c4c:	fb03 f301 	mul.w	r3, r3, r1
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	005b      	lsls	r3, r3, #1
 8009c56:	b2da      	uxtb	r2, r3
 8009c58:	4b34      	ldr	r3, [pc, #208]	; (8009d2c <getrand+0x17c>)
 8009c5a:	701a      	strb	r2, [r3, #0]
        	 blue = (uint8_t) 2*((rand() % ((Brange+1) - (1) + 1)) + 0);
 8009c5c:	f002 f89c 	bl	800bd98 <rand>
 8009c60:	4602      	mov	r2, r0
 8009c62:	4b31      	ldr	r3, [pc, #196]	; (8009d28 <getrand+0x178>)
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	3301      	adds	r3, #1
 8009c68:	fb92 f1f3 	sdiv	r1, r2, r3
 8009c6c:	fb03 f301 	mul.w	r3, r3, r1
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	005b      	lsls	r3, r3, #1
 8009c76:	b2da      	uxtb	r2, r3
 8009c78:	4b2e      	ldr	r3, [pc, #184]	; (8009d34 <getrand+0x184>)
 8009c7a:	701a      	strb	r2, [r3, #0]
        	 red = 0;
 8009c7c:	4b2c      	ldr	r3, [pc, #176]	; (8009d30 <getrand+0x180>)
 8009c7e:	2200      	movs	r2, #0
 8009c80:	701a      	strb	r2, [r3, #0]
        	 if(green==0 && blue==0) blue = 1;
 8009c82:	4b2a      	ldr	r3, [pc, #168]	; (8009d2c <getrand+0x17c>)
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d138      	bne.n	8009cfc <getrand+0x14c>
 8009c8a:	4b2a      	ldr	r3, [pc, #168]	; (8009d34 <getrand+0x184>)
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d134      	bne.n	8009cfc <getrand+0x14c>
 8009c92:	4b28      	ldr	r3, [pc, #160]	; (8009d34 <getrand+0x184>)
 8009c94:	2201      	movs	r2, #1
 8009c96:	701a      	strb	r2, [r3, #0]
          break;
 8009c98:	e030      	b.n	8009cfc <getrand+0x14c>

        case 2:
        	 blue = (uint8_t) 2*((rand() % ((Brange+1) - (0) + 1)) + 0);
 8009c9a:	f002 f87d 	bl	800bd98 <rand>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	4b21      	ldr	r3, [pc, #132]	; (8009d28 <getrand+0x178>)
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	3302      	adds	r3, #2
 8009ca6:	fb92 f1f3 	sdiv	r1, r2, r3
 8009caa:	fb03 f301 	mul.w	r3, r3, r1
 8009cae:	1ad3      	subs	r3, r2, r3
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	005b      	lsls	r3, r3, #1
 8009cb4:	b2da      	uxtb	r2, r3
 8009cb6:	4b1f      	ldr	r3, [pc, #124]	; (8009d34 <getrand+0x184>)
 8009cb8:	701a      	strb	r2, [r3, #0]
        	 red = (uint8_t) 2*((rand() % ((Brange+1) - (1) + 1)) + 0);
 8009cba:	f002 f86d 	bl	800bd98 <rand>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	4b19      	ldr	r3, [pc, #100]	; (8009d28 <getrand+0x178>)
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	fb92 f1f3 	sdiv	r1, r2, r3
 8009cca:	fb03 f301 	mul.w	r3, r3, r1
 8009cce:	1ad3      	subs	r3, r2, r3
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	005b      	lsls	r3, r3, #1
 8009cd4:	b2da      	uxtb	r2, r3
 8009cd6:	4b16      	ldr	r3, [pc, #88]	; (8009d30 <getrand+0x180>)
 8009cd8:	701a      	strb	r2, [r3, #0]
        	 green = 0;
 8009cda:	4b14      	ldr	r3, [pc, #80]	; (8009d2c <getrand+0x17c>)
 8009cdc:	2200      	movs	r2, #0
 8009cde:	701a      	strb	r2, [r3, #0]
        	 if(blue==0 && red==0) red = 1;
 8009ce0:	4b14      	ldr	r3, [pc, #80]	; (8009d34 <getrand+0x184>)
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10b      	bne.n	8009d00 <getrand+0x150>
 8009ce8:	4b11      	ldr	r3, [pc, #68]	; (8009d30 <getrand+0x180>)
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d107      	bne.n	8009d00 <getrand+0x150>
 8009cf0:	4b0f      	ldr	r3, [pc, #60]	; (8009d30 <getrand+0x180>)
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	701a      	strb	r2, [r3, #0]
          break;
 8009cf6:	e003      	b.n	8009d00 <getrand+0x150>
          break;
 8009cf8:	bf00      	nop
 8009cfa:	e002      	b.n	8009d02 <getrand+0x152>
          break;
 8009cfc:	bf00      	nop
 8009cfe:	e000      	b.n	8009d02 <getrand+0x152>
          break;
 8009d00:	bf00      	nop
      }

  Forecolor = ((uint32_t)green << 16) | ((uint32_t)red <<  8) | ((uint32_t)blue);
 8009d02:	4b0a      	ldr	r3, [pc, #40]	; (8009d2c <getrand+0x17c>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	041a      	lsls	r2, r3, #16
 8009d08:	4b09      	ldr	r3, [pc, #36]	; (8009d30 <getrand+0x180>)
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	021b      	lsls	r3, r3, #8
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	4a08      	ldr	r2, [pc, #32]	; (8009d34 <getrand+0x184>)
 8009d12:	7812      	ldrb	r2, [r2, #0]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	4a08      	ldr	r2, [pc, #32]	; (8009d38 <getrand+0x188>)
 8009d18:	6013      	str	r3, [r2, #0]
  //CDC_Transmit_FS(Forecolor, 4); //prints color value to USB virtual serial port



}
 8009d1a:	bf00      	nop
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	55555556 	.word	0x55555556
 8009d28:	20000124 	.word	0x20000124
 8009d2c:	20000ddc 	.word	0x20000ddc
 8009d30:	20000fe0 	.word	0x20000fe0
 8009d34:	20000d10 	.word	0x20000d10
 8009d38:	20000120 	.word	0x20000120

08009d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009d40:	bf00      	nop
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bc80      	pop	{r7}
 8009d46:	4770      	bx	lr

08009d48 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60ba      	str	r2, [r7, #8]
 8009d50:	461a      	mov	r2, r3
 8009d52:	4603      	mov	r3, r0
 8009d54:	81fb      	strh	r3, [r7, #14]
 8009d56:	460b      	mov	r3, r1
 8009d58:	81bb      	strh	r3, [r7, #12]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8009d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d62:	3307      	adds	r3, #7
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	da00      	bge.n	8009d6a <SSD1306_DrawBitmap+0x22>
 8009d68:	3307      	adds	r3, #7
 8009d6a:	10db      	asrs	r3, r3, #3
 8009d6c:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8009d72:	2300      	movs	r3, #0
 8009d74:	82bb      	strh	r3, [r7, #20]
 8009d76:	e044      	b.n	8009e02 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8009d78:	2300      	movs	r3, #0
 8009d7a:	827b      	strh	r3, [r7, #18]
 8009d7c:	e02f      	b.n	8009dde <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8009d7e:	8a7b      	ldrh	r3, [r7, #18]
 8009d80:	f003 0307 	and.w	r3, r3, #7
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d003      	beq.n	8009d90 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8009d88:	7dfb      	ldrb	r3, [r7, #23]
 8009d8a:	005b      	lsls	r3, r3, #1
 8009d8c:	75fb      	strb	r3, [r7, #23]
 8009d8e:	e012      	b.n	8009db6 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8009d90:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009d94:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009d98:	fb02 f203 	mul.w	r2, r2, r3
 8009d9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	da00      	bge.n	8009da6 <SSD1306_DrawBitmap+0x5e>
 8009da4:	3307      	adds	r3, #7
 8009da6:	10db      	asrs	r3, r3, #3
 8009da8:	b21b      	sxth	r3, r3
 8009daa:	4413      	add	r3, r2
 8009dac:	461a      	mov	r2, r3
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	4413      	add	r3, r2
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8009db6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	da09      	bge.n	8009dd2 <SSD1306_DrawBitmap+0x8a>
 8009dbe:	89fa      	ldrh	r2, [r7, #14]
 8009dc0:	8a7b      	ldrh	r3, [r7, #18]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	89b9      	ldrh	r1, [r7, #12]
 8009dc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009dca:	b2d2      	uxtb	r2, r2
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f000 f98b 	bl	800a0e8 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8009dd2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	3301      	adds	r3, #1
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	827b      	strh	r3, [r7, #18]
 8009dde:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8009de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	dbc9      	blt.n	8009d7e <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8009dea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	3301      	adds	r3, #1
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	82bb      	strh	r3, [r7, #20]
 8009df6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	81bb      	strh	r3, [r7, #12]
 8009e02:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8009e06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	dbb4      	blt.n	8009d78 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8009e0e:	bf00      	nop
 8009e10:	3718      	adds	r7, #24
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
	...

08009e18 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
	//OLED Reset Pin (modified izzle)
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_RESET);
 8009e1e:	2200      	movs	r2, #0
 8009e20:	2102      	movs	r1, #2
 8009e22:	4865      	ldr	r0, [pc, #404]	; (8009fb8 <SSD1306_Init+0x1a0>)
 8009e24:	f7f7 fe57 	bl	8001ad6 <HAL_GPIO_WritePin>
	HAL_Delay (50);
 8009e28:	2032      	movs	r0, #50	; 0x32
 8009e2a:	f7f6 feaf 	bl	8000b8c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_SET);
 8009e2e:	2201      	movs	r2, #1
 8009e30:	2102      	movs	r1, #2
 8009e32:	4861      	ldr	r0, [pc, #388]	; (8009fb8 <SSD1306_Init+0x1a0>)
 8009e34:	f7f7 fe4f 	bl	8001ad6 <HAL_GPIO_WritePin>
	HAL_Delay (50);
 8009e38:	2032      	movs	r0, #50	; 0x32
 8009e3a:	f7f6 fea7 	bl	8000b8c <HAL_Delay>
	//end izzle

	/* Init I2C */
	ssd1306_I2C_Init();
 8009e3e:	f000 fbbb 	bl	800a5b8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8009e42:	f644 6320 	movw	r3, #20000	; 0x4e20
 8009e46:	2201      	movs	r2, #1
 8009e48:	2178      	movs	r1, #120	; 0x78
 8009e4a:	485c      	ldr	r0, [pc, #368]	; (8009fbc <SSD1306_Init+0x1a4>)
 8009e4c:	f7f8 f882 	bl	8001f54 <HAL_I2C_IsDeviceReady>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d001      	beq.n	8009e5a <SSD1306_Init+0x42>
		/* Return false */
		return 0;
 8009e56:	2300      	movs	r3, #0
 8009e58:	e0a9      	b.n	8009fae <SSD1306_Init+0x196>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8009e5a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8009e5e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8009e60:	e002      	b.n	8009e68 <SSD1306_Init+0x50>
		p--;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	3b01      	subs	r3, #1
 8009e66:	607b      	str	r3, [r7, #4]
	while(p>0)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1f9      	bne.n	8009e62 <SSD1306_Init+0x4a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8009e6e:	22ae      	movs	r2, #174	; 0xae
 8009e70:	2100      	movs	r1, #0
 8009e72:	2078      	movs	r0, #120	; 0x78
 8009e74:	f000 fbfc 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8009e78:	2220      	movs	r2, #32
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	2078      	movs	r0, #120	; 0x78
 8009e7e:	f000 fbf7 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8009e82:	2210      	movs	r2, #16
 8009e84:	2100      	movs	r1, #0
 8009e86:	2078      	movs	r0, #120	; 0x78
 8009e88:	f000 fbf2 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8009e8c:	22b0      	movs	r2, #176	; 0xb0
 8009e8e:	2100      	movs	r1, #0
 8009e90:	2078      	movs	r0, #120	; 0x78
 8009e92:	f000 fbed 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction //0xC8 or 0xC0
 8009e96:	22c8      	movs	r2, #200	; 0xc8
 8009e98:	2100      	movs	r1, #0
 8009e9a:	2078      	movs	r0, #120	; 0x78
 8009e9c:	f000 fbe8 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	2078      	movs	r0, #120	; 0x78
 8009ea6:	f000 fbe3 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8009eaa:	2210      	movs	r2, #16
 8009eac:	2100      	movs	r1, #0
 8009eae:	2078      	movs	r0, #120	; 0x78
 8009eb0:	f000 fbde 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8009eb4:	2240      	movs	r2, #64	; 0x40
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	2078      	movs	r0, #120	; 0x78
 8009eba:	f000 fbd9 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8009ebe:	2281      	movs	r2, #129	; 0x81
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	2078      	movs	r0, #120	; 0x78
 8009ec4:	f000 fbd4 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8009ec8:	22ff      	movs	r2, #255	; 0xff
 8009eca:	2100      	movs	r1, #0
 8009ecc:	2078      	movs	r0, #120	; 0x78
 8009ece:	f000 fbcf 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8009ed2:	22a1      	movs	r2, #161	; 0xa1
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	2078      	movs	r0, #120	; 0x78
 8009ed8:	f000 fbca 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8009edc:	22a6      	movs	r2, #166	; 0xa6
 8009ede:	2100      	movs	r1, #0
 8009ee0:	2078      	movs	r0, #120	; 0x78
 8009ee2:	f000 fbc5 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8009ee6:	22a8      	movs	r2, #168	; 0xa8
 8009ee8:	2100      	movs	r1, #0
 8009eea:	2078      	movs	r0, #120	; 0x78
 8009eec:	f000 fbc0 	bl	800a670 <ssd1306_I2C_Write>
	if(SSD1306_HEIGHT==32){
		SSD1306_WRITECOMMAND(0x1F); //128x32 Oled
 8009ef0:	221f      	movs	r2, #31
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	2078      	movs	r0, #120	; 0x78
 8009ef6:	f000 fbbb 	bl	800a670 <ssd1306_I2C_Write>
	}else{
		SSD1306_WRITECOMMAND(0x3F); //128x64 Oled
	}
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8009efa:	22a4      	movs	r2, #164	; 0xa4
 8009efc:	2100      	movs	r1, #0
 8009efe:	2078      	movs	r0, #120	; 0x78
 8009f00:	f000 fbb6 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8009f04:	22d3      	movs	r2, #211	; 0xd3
 8009f06:	2100      	movs	r1, #0
 8009f08:	2078      	movs	r0, #120	; 0x78
 8009f0a:	f000 fbb1 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8009f0e:	2200      	movs	r2, #0
 8009f10:	2100      	movs	r1, #0
 8009f12:	2078      	movs	r0, #120	; 0x78
 8009f14:	f000 fbac 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8009f18:	22d5      	movs	r2, #213	; 0xd5
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	2078      	movs	r0, #120	; 0x78
 8009f1e:	f000 fba7 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8009f22:	22f0      	movs	r2, #240	; 0xf0
 8009f24:	2100      	movs	r1, #0
 8009f26:	2078      	movs	r0, #120	; 0x78
 8009f28:	f000 fba2 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8009f2c:	22d9      	movs	r2, #217	; 0xd9
 8009f2e:	2100      	movs	r1, #0
 8009f30:	2078      	movs	r0, #120	; 0x78
 8009f32:	f000 fb9d 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8009f36:	2222      	movs	r2, #34	; 0x22
 8009f38:	2100      	movs	r1, #0
 8009f3a:	2078      	movs	r0, #120	; 0x78
 8009f3c:	f000 fb98 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8009f40:	22da      	movs	r2, #218	; 0xda
 8009f42:	2100      	movs	r1, #0
 8009f44:	2078      	movs	r0, #120	; 0x78
 8009f46:	f000 fb93 	bl	800a670 <ssd1306_I2C_Write>
	if(SSD1306_HEIGHT==32){
		SSD1306_WRITECOMMAND(0x02); //128x32 Oled
 8009f4a:	2202      	movs	r2, #2
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	2078      	movs	r0, #120	; 0x78
 8009f50:	f000 fb8e 	bl	800a670 <ssd1306_I2C_Write>
	}else{
		SSD1306_WRITECOMMAND(0x12); //128x64 Oled
	}
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8009f54:	22db      	movs	r2, #219	; 0xdb
 8009f56:	2100      	movs	r1, #0
 8009f58:	2078      	movs	r0, #120	; 0x78
 8009f5a:	f000 fb89 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8009f5e:	2220      	movs	r2, #32
 8009f60:	2100      	movs	r1, #0
 8009f62:	2078      	movs	r0, #120	; 0x78
 8009f64:	f000 fb84 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8009f68:	228d      	movs	r2, #141	; 0x8d
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	2078      	movs	r0, #120	; 0x78
 8009f6e:	f000 fb7f 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8009f72:	2214      	movs	r2, #20
 8009f74:	2100      	movs	r1, #0
 8009f76:	2078      	movs	r0, #120	; 0x78
 8009f78:	f000 fb7a 	bl	800a670 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8009f7c:	22af      	movs	r2, #175	; 0xaf
 8009f7e:	2100      	movs	r1, #0
 8009f80:	2078      	movs	r0, #120	; 0x78
 8009f82:	f000 fb75 	bl	800a670 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8009f86:	222e      	movs	r2, #46	; 0x2e
 8009f88:	2100      	movs	r1, #0
 8009f8a:	2078      	movs	r0, #120	; 0x78
 8009f8c:	f000 fb70 	bl	800a670 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8009f90:	2000      	movs	r0, #0
 8009f92:	f000 f891 	bl	800a0b8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8009f96:	f000 f861 	bl	800a05c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8009f9a:	4b09      	ldr	r3, [pc, #36]	; (8009fc0 <SSD1306_Init+0x1a8>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8009fa0:	4b07      	ldr	r3, [pc, #28]	; (8009fc0 <SSD1306_Init+0x1a8>)
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8009fa6:	4b06      	ldr	r3, [pc, #24]	; (8009fc0 <SSD1306_Init+0x1a8>)
 8009fa8:	2201      	movs	r2, #1
 8009faa:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8009fac:	2301      	movs	r3, #1
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3708      	adds	r7, #8
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	40010c00 	.word	0x40010c00
 8009fbc:	20000d48 	.word	0x20000d48
 8009fc0:	200005b4 	.word	0x200005b4

08009fc4 <SSD1306_Puti>:


void SSD1306_Puti(uint16_t x, uint16_t y, int data, uint16_t length){ //izzle
 8009fc4:	b5b0      	push	{r4, r5, r7, lr}
 8009fc6:	b086      	sub	sp, #24
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60ba      	str	r2, [r7, #8]
 8009fcc:	461a      	mov	r2, r3
 8009fce:	4603      	mov	r3, r0
 8009fd0:	81fb      	strh	r3, [r7, #14]
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	81bb      	strh	r3, [r7, #12]
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	80fb      	strh	r3, [r7, #6]
 8009fda:	466b      	mov	r3, sp
 8009fdc:	461d      	mov	r5, r3
	char buffer[length];
 8009fde:	88f8      	ldrh	r0, [r7, #6]
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	617b      	str	r3, [r7, #20]
 8009fe6:	b281      	uxth	r1, r0
 8009fe8:	f04f 0200 	mov.w	r2, #0
 8009fec:	f04f 0300 	mov.w	r3, #0
 8009ff0:	f04f 0400 	mov.w	r4, #0
 8009ff4:	00d4      	lsls	r4, r2, #3
 8009ff6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8009ffa:	00cb      	lsls	r3, r1, #3
 8009ffc:	b281      	uxth	r1, r0
 8009ffe:	f04f 0200 	mov.w	r2, #0
 800a002:	f04f 0300 	mov.w	r3, #0
 800a006:	f04f 0400 	mov.w	r4, #0
 800a00a:	00d4      	lsls	r4, r2, #3
 800a00c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800a010:	00cb      	lsls	r3, r1, #3
 800a012:	4603      	mov	r3, r0
 800a014:	3307      	adds	r3, #7
 800a016:	08db      	lsrs	r3, r3, #3
 800a018:	00db      	lsls	r3, r3, #3
 800a01a:	ebad 0d03 	sub.w	sp, sp, r3
 800a01e:	466b      	mov	r3, sp
 800a020:	3300      	adds	r3, #0
 800a022:	613b      	str	r3, [r7, #16]
	sprintf(buffer, "%d", data);
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	490a      	ldr	r1, [pc, #40]	; (800a054 <SSD1306_Puti+0x90>)
 800a02a:	4618      	mov	r0, r3
 800a02c:	f001 fee8 	bl	800be00 <siprintf>
	SSD1306_GotoXY (x,y);
 800a030:	89ba      	ldrh	r2, [r7, #12]
 800a032:	89fb      	ldrh	r3, [r7, #14]
 800a034:	4611      	mov	r1, r2
 800a036:	4618      	mov	r0, r3
 800a038:	f000 f8b4 	bl	800a1a4 <SSD1306_GotoXY>
	//SSD1306_Puts (buffer, &Font_11x18, 1); //larger font
	SSD1306_Puts (buffer, &Font_7x10, 1); //smaller font
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	2201      	movs	r2, #1
 800a040:	4905      	ldr	r1, [pc, #20]	; (800a058 <SSD1306_Puti+0x94>)
 800a042:	4618      	mov	r0, r3
 800a044:	f000 f944 	bl	800a2d0 <SSD1306_Puts>
 800a048:	46ad      	mov	sp, r5
}
 800a04a:	bf00      	nop
 800a04c:	3718      	adds	r7, #24
 800a04e:	46bd      	mov	sp, r7
 800a050:	bdb0      	pop	{r4, r5, r7, pc}
 800a052:	bf00      	nop
 800a054:	0800e82c 	.word	0x0800e82c
 800a058:	20000118 	.word	0x20000118

0800a05c <SSD1306_UpdateScreen>:
	//SSD1306_Puts (buffer, &Font_11x18, 1); //larger font
	SSD1306_Puts (buffer, &Font_7x10, 1); //smaller font
}


void SSD1306_UpdateScreen(void) {
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800a062:	2300      	movs	r3, #0
 800a064:	71fb      	strb	r3, [r7, #7]
 800a066:	e01d      	b.n	800a0a4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800a068:	79fb      	ldrb	r3, [r7, #7]
 800a06a:	3b50      	subs	r3, #80	; 0x50
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	461a      	mov	r2, r3
 800a070:	2100      	movs	r1, #0
 800a072:	2078      	movs	r0, #120	; 0x78
 800a074:	f000 fafc 	bl	800a670 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800a078:	2200      	movs	r2, #0
 800a07a:	2100      	movs	r1, #0
 800a07c:	2078      	movs	r0, #120	; 0x78
 800a07e:	f000 faf7 	bl	800a670 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800a082:	2210      	movs	r2, #16
 800a084:	2100      	movs	r1, #0
 800a086:	2078      	movs	r0, #120	; 0x78
 800a088:	f000 faf2 	bl	800a670 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800a08c:	79fb      	ldrb	r3, [r7, #7]
 800a08e:	01db      	lsls	r3, r3, #7
 800a090:	4a08      	ldr	r2, [pc, #32]	; (800a0b4 <SSD1306_UpdateScreen+0x58>)
 800a092:	441a      	add	r2, r3
 800a094:	2380      	movs	r3, #128	; 0x80
 800a096:	2140      	movs	r1, #64	; 0x40
 800a098:	2078      	movs	r0, #120	; 0x78
 800a09a:	f000 faa1 	bl	800a5e0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800a09e:	79fb      	ldrb	r3, [r7, #7]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	71fb      	strb	r3, [r7, #7]
 800a0a4:	79fb      	ldrb	r3, [r7, #7]
 800a0a6:	2b07      	cmp	r3, #7
 800a0a8:	d9de      	bls.n	800a068 <SSD1306_UpdateScreen+0xc>
	}
}
 800a0aa:	bf00      	nop
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	200003b4 	.word	0x200003b4

0800a0b8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	4603      	mov	r3, r0
 800a0c0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800a0c2:	79fb      	ldrb	r3, [r7, #7]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d101      	bne.n	800a0cc <SSD1306_Fill+0x14>
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	e000      	b.n	800a0ce <SSD1306_Fill+0x16>
 800a0cc:	23ff      	movs	r3, #255	; 0xff
 800a0ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	4803      	ldr	r0, [pc, #12]	; (800a0e4 <SSD1306_Fill+0x2c>)
 800a0d6:	f001 fa07 	bl	800b4e8 <memset>
}
 800a0da:	bf00      	nop
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	200003b4 	.word	0x200003b4

0800a0e8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	80fb      	strh	r3, [r7, #6]
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	80bb      	strh	r3, [r7, #4]
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	70fb      	strb	r3, [r7, #3]
	if (
 800a0fa:	88fb      	ldrh	r3, [r7, #6]
 800a0fc:	2b7f      	cmp	r3, #127	; 0x7f
 800a0fe:	d848      	bhi.n	800a192 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800a100:	88bb      	ldrh	r3, [r7, #4]
 800a102:	2b1f      	cmp	r3, #31
 800a104:	d845      	bhi.n	800a192 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800a106:	4b25      	ldr	r3, [pc, #148]	; (800a19c <SSD1306_DrawPixel+0xb4>)
 800a108:	791b      	ldrb	r3, [r3, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d006      	beq.n	800a11c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800a10e:	78fb      	ldrb	r3, [r7, #3]
 800a110:	2b00      	cmp	r3, #0
 800a112:	bf0c      	ite	eq
 800a114:	2301      	moveq	r3, #1
 800a116:	2300      	movne	r3, #0
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800a11c:	78fb      	ldrb	r3, [r7, #3]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d11a      	bne.n	800a158 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800a122:	88fa      	ldrh	r2, [r7, #6]
 800a124:	88bb      	ldrh	r3, [r7, #4]
 800a126:	08db      	lsrs	r3, r3, #3
 800a128:	b298      	uxth	r0, r3
 800a12a:	4603      	mov	r3, r0
 800a12c:	01db      	lsls	r3, r3, #7
 800a12e:	4413      	add	r3, r2
 800a130:	4a1b      	ldr	r2, [pc, #108]	; (800a1a0 <SSD1306_DrawPixel+0xb8>)
 800a132:	5cd3      	ldrb	r3, [r2, r3]
 800a134:	b25a      	sxtb	r2, r3
 800a136:	88bb      	ldrh	r3, [r7, #4]
 800a138:	f003 0307 	and.w	r3, r3, #7
 800a13c:	2101      	movs	r1, #1
 800a13e:	fa01 f303 	lsl.w	r3, r1, r3
 800a142:	b25b      	sxtb	r3, r3
 800a144:	4313      	orrs	r3, r2
 800a146:	b259      	sxtb	r1, r3
 800a148:	88fa      	ldrh	r2, [r7, #6]
 800a14a:	4603      	mov	r3, r0
 800a14c:	01db      	lsls	r3, r3, #7
 800a14e:	4413      	add	r3, r2
 800a150:	b2c9      	uxtb	r1, r1
 800a152:	4a13      	ldr	r2, [pc, #76]	; (800a1a0 <SSD1306_DrawPixel+0xb8>)
 800a154:	54d1      	strb	r1, [r2, r3]
 800a156:	e01d      	b.n	800a194 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800a158:	88fa      	ldrh	r2, [r7, #6]
 800a15a:	88bb      	ldrh	r3, [r7, #4]
 800a15c:	08db      	lsrs	r3, r3, #3
 800a15e:	b298      	uxth	r0, r3
 800a160:	4603      	mov	r3, r0
 800a162:	01db      	lsls	r3, r3, #7
 800a164:	4413      	add	r3, r2
 800a166:	4a0e      	ldr	r2, [pc, #56]	; (800a1a0 <SSD1306_DrawPixel+0xb8>)
 800a168:	5cd3      	ldrb	r3, [r2, r3]
 800a16a:	b25a      	sxtb	r2, r3
 800a16c:	88bb      	ldrh	r3, [r7, #4]
 800a16e:	f003 0307 	and.w	r3, r3, #7
 800a172:	2101      	movs	r1, #1
 800a174:	fa01 f303 	lsl.w	r3, r1, r3
 800a178:	b25b      	sxtb	r3, r3
 800a17a:	43db      	mvns	r3, r3
 800a17c:	b25b      	sxtb	r3, r3
 800a17e:	4013      	ands	r3, r2
 800a180:	b259      	sxtb	r1, r3
 800a182:	88fa      	ldrh	r2, [r7, #6]
 800a184:	4603      	mov	r3, r0
 800a186:	01db      	lsls	r3, r3, #7
 800a188:	4413      	add	r3, r2
 800a18a:	b2c9      	uxtb	r1, r1
 800a18c:	4a04      	ldr	r2, [pc, #16]	; (800a1a0 <SSD1306_DrawPixel+0xb8>)
 800a18e:	54d1      	strb	r1, [r2, r3]
 800a190:	e000      	b.n	800a194 <SSD1306_DrawPixel+0xac>
		return;
 800a192:	bf00      	nop
	}
}
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	bc80      	pop	{r7}
 800a19a:	4770      	bx	lr
 800a19c:	200005b4 	.word	0x200005b4
 800a1a0:	200003b4 	.word	0x200003b4

0800a1a4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	460a      	mov	r2, r1
 800a1ae:	80fb      	strh	r3, [r7, #6]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800a1b4:	4a05      	ldr	r2, [pc, #20]	; (800a1cc <SSD1306_GotoXY+0x28>)
 800a1b6:	88fb      	ldrh	r3, [r7, #6]
 800a1b8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800a1ba:	4a04      	ldr	r2, [pc, #16]	; (800a1cc <SSD1306_GotoXY+0x28>)
 800a1bc:	88bb      	ldrh	r3, [r7, #4]
 800a1be:	8053      	strh	r3, [r2, #2]
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bc80      	pop	{r7}
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	200005b4 	.word	0x200005b4

0800a1d0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	6039      	str	r1, [r7, #0]
 800a1da:	71fb      	strb	r3, [r7, #7]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800a1e0:	4b3a      	ldr	r3, [pc, #232]	; (800a2cc <SSD1306_Putc+0xfc>)
 800a1e2:	881b      	ldrh	r3, [r3, #0]
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	4413      	add	r3, r2
	if (
 800a1ec:	2b7f      	cmp	r3, #127	; 0x7f
 800a1ee:	dc07      	bgt.n	800a200 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800a1f0:	4b36      	ldr	r3, [pc, #216]	; (800a2cc <SSD1306_Putc+0xfc>)
 800a1f2:	885b      	ldrh	r3, [r3, #2]
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	785b      	ldrb	r3, [r3, #1]
 800a1fa:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800a1fc:	2b1f      	cmp	r3, #31
 800a1fe:	dd01      	ble.n	800a204 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800a200:	2300      	movs	r3, #0
 800a202:	e05e      	b.n	800a2c2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800a204:	2300      	movs	r3, #0
 800a206:	617b      	str	r3, [r7, #20]
 800a208:	e04b      	b.n	800a2a2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	685a      	ldr	r2, [r3, #4]
 800a20e:	79fb      	ldrb	r3, [r7, #7]
 800a210:	3b20      	subs	r3, #32
 800a212:	6839      	ldr	r1, [r7, #0]
 800a214:	7849      	ldrb	r1, [r1, #1]
 800a216:	fb01 f303 	mul.w	r3, r1, r3
 800a21a:	4619      	mov	r1, r3
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	440b      	add	r3, r1
 800a220:	005b      	lsls	r3, r3, #1
 800a222:	4413      	add	r3, r2
 800a224:	881b      	ldrh	r3, [r3, #0]
 800a226:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800a228:	2300      	movs	r3, #0
 800a22a:	613b      	str	r3, [r7, #16]
 800a22c:	e030      	b.n	800a290 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800a22e:	68fa      	ldr	r2, [r7, #12]
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	fa02 f303 	lsl.w	r3, r2, r3
 800a236:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d010      	beq.n	800a260 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800a23e:	4b23      	ldr	r3, [pc, #140]	; (800a2cc <SSD1306_Putc+0xfc>)
 800a240:	881a      	ldrh	r2, [r3, #0]
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	b29b      	uxth	r3, r3
 800a246:	4413      	add	r3, r2
 800a248:	b298      	uxth	r0, r3
 800a24a:	4b20      	ldr	r3, [pc, #128]	; (800a2cc <SSD1306_Putc+0xfc>)
 800a24c:	885a      	ldrh	r2, [r3, #2]
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	b29b      	uxth	r3, r3
 800a252:	4413      	add	r3, r2
 800a254:	b29b      	uxth	r3, r3
 800a256:	79ba      	ldrb	r2, [r7, #6]
 800a258:	4619      	mov	r1, r3
 800a25a:	f7ff ff45 	bl	800a0e8 <SSD1306_DrawPixel>
 800a25e:	e014      	b.n	800a28a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800a260:	4b1a      	ldr	r3, [pc, #104]	; (800a2cc <SSD1306_Putc+0xfc>)
 800a262:	881a      	ldrh	r2, [r3, #0]
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	b29b      	uxth	r3, r3
 800a268:	4413      	add	r3, r2
 800a26a:	b298      	uxth	r0, r3
 800a26c:	4b17      	ldr	r3, [pc, #92]	; (800a2cc <SSD1306_Putc+0xfc>)
 800a26e:	885a      	ldrh	r2, [r3, #2]
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	b29b      	uxth	r3, r3
 800a274:	4413      	add	r3, r2
 800a276:	b299      	uxth	r1, r3
 800a278:	79bb      	ldrb	r3, [r7, #6]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	bf0c      	ite	eq
 800a27e:	2301      	moveq	r3, #1
 800a280:	2300      	movne	r3, #0
 800a282:	b2db      	uxtb	r3, r3
 800a284:	461a      	mov	r2, r3
 800a286:	f7ff ff2f 	bl	800a0e8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	3301      	adds	r3, #1
 800a28e:	613b      	str	r3, [r7, #16]
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	461a      	mov	r2, r3
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	4293      	cmp	r3, r2
 800a29a:	d3c8      	bcc.n	800a22e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	617b      	str	r3, [r7, #20]
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	785b      	ldrb	r3, [r3, #1]
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d3ad      	bcc.n	800a20a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800a2ae:	4b07      	ldr	r3, [pc, #28]	; (800a2cc <SSD1306_Putc+0xfc>)
 800a2b0:	881a      	ldrh	r2, [r3, #0]
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	4413      	add	r3, r2
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	4b03      	ldr	r3, [pc, #12]	; (800a2cc <SSD1306_Putc+0xfc>)
 800a2be:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800a2c0:	79fb      	ldrb	r3, [r7, #7]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3718      	adds	r7, #24
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	200005b4 	.word	0x200005b4

0800a2d0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	4613      	mov	r3, r2
 800a2dc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800a2de:	e012      	b.n	800a306 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	79fa      	ldrb	r2, [r7, #7]
 800a2e6:	68b9      	ldr	r1, [r7, #8]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7ff ff71 	bl	800a1d0 <SSD1306_Putc>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d002      	beq.n	800a300 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	e008      	b.n	800a312 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	3301      	adds	r3, #1
 800a304:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1e8      	bne.n	800a2e0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	781b      	ldrb	r3, [r3, #0]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 800a31a:	b590      	push	{r4, r7, lr}
 800a31c:	b087      	sub	sp, #28
 800a31e:	af00      	add	r7, sp, #0
 800a320:	4604      	mov	r4, r0
 800a322:	4608      	mov	r0, r1
 800a324:	4611      	mov	r1, r2
 800a326:	461a      	mov	r2, r3
 800a328:	4623      	mov	r3, r4
 800a32a:	80fb      	strh	r3, [r7, #6]
 800a32c:	4603      	mov	r3, r0
 800a32e:	80bb      	strh	r3, [r7, #4]
 800a330:	460b      	mov	r3, r1
 800a332:	807b      	strh	r3, [r7, #2]
 800a334:	4613      	mov	r3, r2
 800a336:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 800a338:	88fb      	ldrh	r3, [r7, #6]
 800a33a:	2b7f      	cmp	r3, #127	; 0x7f
 800a33c:	d901      	bls.n	800a342 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 800a33e:	237f      	movs	r3, #127	; 0x7f
 800a340:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 800a342:	887b      	ldrh	r3, [r7, #2]
 800a344:	2b7f      	cmp	r3, #127	; 0x7f
 800a346:	d901      	bls.n	800a34c <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 800a348:	237f      	movs	r3, #127	; 0x7f
 800a34a:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 800a34c:	88bb      	ldrh	r3, [r7, #4]
 800a34e:	2b1f      	cmp	r3, #31
 800a350:	d901      	bls.n	800a356 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 800a352:	231f      	movs	r3, #31
 800a354:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 800a356:	883b      	ldrh	r3, [r7, #0]
 800a358:	2b1f      	cmp	r3, #31
 800a35a:	d901      	bls.n	800a360 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 800a35c:	231f      	movs	r3, #31
 800a35e:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800a360:	88fa      	ldrh	r2, [r7, #6]
 800a362:	887b      	ldrh	r3, [r7, #2]
 800a364:	429a      	cmp	r2, r3
 800a366:	d205      	bcs.n	800a374 <SSD1306_DrawLine+0x5a>
 800a368:	887a      	ldrh	r2, [r7, #2]
 800a36a:	88fb      	ldrh	r3, [r7, #6]
 800a36c:	1ad3      	subs	r3, r2, r3
 800a36e:	b29b      	uxth	r3, r3
 800a370:	b21b      	sxth	r3, r3
 800a372:	e004      	b.n	800a37e <SSD1306_DrawLine+0x64>
 800a374:	88fa      	ldrh	r2, [r7, #6]
 800a376:	887b      	ldrh	r3, [r7, #2]
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	b21b      	sxth	r3, r3
 800a37e:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 800a380:	88ba      	ldrh	r2, [r7, #4]
 800a382:	883b      	ldrh	r3, [r7, #0]
 800a384:	429a      	cmp	r2, r3
 800a386:	d205      	bcs.n	800a394 <SSD1306_DrawLine+0x7a>
 800a388:	883a      	ldrh	r2, [r7, #0]
 800a38a:	88bb      	ldrh	r3, [r7, #4]
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	b29b      	uxth	r3, r3
 800a390:	b21b      	sxth	r3, r3
 800a392:	e004      	b.n	800a39e <SSD1306_DrawLine+0x84>
 800a394:	88ba      	ldrh	r2, [r7, #4]
 800a396:	883b      	ldrh	r3, [r7, #0]
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	b21b      	sxth	r3, r3
 800a39e:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 800a3a0:	88fa      	ldrh	r2, [r7, #6]
 800a3a2:	887b      	ldrh	r3, [r7, #2]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d201      	bcs.n	800a3ac <SSD1306_DrawLine+0x92>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e001      	b.n	800a3b0 <SSD1306_DrawLine+0x96>
 800a3ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b0:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 800a3b2:	88ba      	ldrh	r2, [r7, #4]
 800a3b4:	883b      	ldrh	r3, [r7, #0]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d201      	bcs.n	800a3be <SSD1306_DrawLine+0xa4>
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e001      	b.n	800a3c2 <SSD1306_DrawLine+0xa8>
 800a3be:	f04f 33ff 	mov.w	r3, #4294967295
 800a3c2:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 800a3c4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800a3c8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	dd06      	ble.n	800a3de <SSD1306_DrawLine+0xc4>
 800a3d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a3d4:	0fda      	lsrs	r2, r3, #31
 800a3d6:	4413      	add	r3, r2
 800a3d8:	105b      	asrs	r3, r3, #1
 800a3da:	b21b      	sxth	r3, r3
 800a3dc:	e006      	b.n	800a3ec <SSD1306_DrawLine+0xd2>
 800a3de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a3e2:	425b      	negs	r3, r3
 800a3e4:	0fda      	lsrs	r2, r3, #31
 800a3e6:	4413      	add	r3, r2
 800a3e8:	105b      	asrs	r3, r3, #1
 800a3ea:	b21b      	sxth	r3, r3
 800a3ec:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 800a3ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d129      	bne.n	800a44a <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 800a3f6:	883a      	ldrh	r2, [r7, #0]
 800a3f8:	88bb      	ldrh	r3, [r7, #4]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d205      	bcs.n	800a40a <SSD1306_DrawLine+0xf0>
			tmp = y1;
 800a3fe:	883b      	ldrh	r3, [r7, #0]
 800a400:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800a402:	88bb      	ldrh	r3, [r7, #4]
 800a404:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800a406:	893b      	ldrh	r3, [r7, #8]
 800a408:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800a40a:	887a      	ldrh	r2, [r7, #2]
 800a40c:	88fb      	ldrh	r3, [r7, #6]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d205      	bcs.n	800a41e <SSD1306_DrawLine+0x104>
			tmp = x1;
 800a412:	887b      	ldrh	r3, [r7, #2]
 800a414:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800a416:	88fb      	ldrh	r3, [r7, #6]
 800a418:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800a41a:	893b      	ldrh	r3, [r7, #8]
 800a41c:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800a41e:	88bb      	ldrh	r3, [r7, #4]
 800a420:	82bb      	strh	r3, [r7, #20]
 800a422:	e00c      	b.n	800a43e <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 800a424:	8ab9      	ldrh	r1, [r7, #20]
 800a426:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a42a:	88fb      	ldrh	r3, [r7, #6]
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7ff fe5b 	bl	800a0e8 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 800a432:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a436:	b29b      	uxth	r3, r3
 800a438:	3301      	adds	r3, #1
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	82bb      	strh	r3, [r7, #20]
 800a43e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800a442:	883b      	ldrh	r3, [r7, #0]
 800a444:	429a      	cmp	r2, r3
 800a446:	dded      	ble.n	800a424 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 800a448:	e05f      	b.n	800a50a <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 800a44a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d129      	bne.n	800a4a6 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 800a452:	883a      	ldrh	r2, [r7, #0]
 800a454:	88bb      	ldrh	r3, [r7, #4]
 800a456:	429a      	cmp	r2, r3
 800a458:	d205      	bcs.n	800a466 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 800a45a:	883b      	ldrh	r3, [r7, #0]
 800a45c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800a45e:	88bb      	ldrh	r3, [r7, #4]
 800a460:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800a462:	893b      	ldrh	r3, [r7, #8]
 800a464:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800a466:	887a      	ldrh	r2, [r7, #2]
 800a468:	88fb      	ldrh	r3, [r7, #6]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d205      	bcs.n	800a47a <SSD1306_DrawLine+0x160>
			tmp = x1;
 800a46e:	887b      	ldrh	r3, [r7, #2]
 800a470:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800a472:	88fb      	ldrh	r3, [r7, #6]
 800a474:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800a476:	893b      	ldrh	r3, [r7, #8]
 800a478:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800a47a:	88fb      	ldrh	r3, [r7, #6]
 800a47c:	82bb      	strh	r3, [r7, #20]
 800a47e:	e00c      	b.n	800a49a <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 800a480:	8abb      	ldrh	r3, [r7, #20]
 800a482:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a486:	88b9      	ldrh	r1, [r7, #4]
 800a488:	4618      	mov	r0, r3
 800a48a:	f7ff fe2d 	bl	800a0e8 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 800a48e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a492:	b29b      	uxth	r3, r3
 800a494:	3301      	adds	r3, #1
 800a496:	b29b      	uxth	r3, r3
 800a498:	82bb      	strh	r3, [r7, #20]
 800a49a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800a49e:	887b      	ldrh	r3, [r7, #2]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	dded      	ble.n	800a480 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 800a4a4:	e031      	b.n	800a50a <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 800a4a6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a4aa:	88b9      	ldrh	r1, [r7, #4]
 800a4ac:	88fb      	ldrh	r3, [r7, #6]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7ff fe1a 	bl	800a0e8 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 800a4b4:	88fa      	ldrh	r2, [r7, #6]
 800a4b6:	887b      	ldrh	r3, [r7, #2]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d103      	bne.n	800a4c4 <SSD1306_DrawLine+0x1aa>
 800a4bc:	88ba      	ldrh	r2, [r7, #4]
 800a4be:	883b      	ldrh	r3, [r7, #0]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d021      	beq.n	800a508 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 800a4c4:	8afb      	ldrh	r3, [r7, #22]
 800a4c6:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 800a4c8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800a4cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a4d0:	425b      	negs	r3, r3
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	dd08      	ble.n	800a4e8 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 800a4d6:	8afa      	ldrh	r2, [r7, #22]
 800a4d8:	8a3b      	ldrh	r3, [r7, #16]
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 800a4e0:	89fa      	ldrh	r2, [r7, #14]
 800a4e2:	88fb      	ldrh	r3, [r7, #6]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 800a4e8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800a4ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	dad8      	bge.n	800a4a6 <SSD1306_DrawLine+0x18c>
			err += dx;
 800a4f4:	8afa      	ldrh	r2, [r7, #22]
 800a4f6:	8a7b      	ldrh	r3, [r7, #18]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 800a4fe:	89ba      	ldrh	r2, [r7, #12]
 800a500:	88bb      	ldrh	r3, [r7, #4]
 800a502:	4413      	add	r3, r2
 800a504:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 800a506:	e7ce      	b.n	800a4a6 <SSD1306_DrawLine+0x18c>
			break;
 800a508:	bf00      	nop
		} 
	}
}
 800a50a:	371c      	adds	r7, #28
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd90      	pop	{r4, r7, pc}

0800a510 <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 800a510:	b590      	push	{r4, r7, lr}
 800a512:	b087      	sub	sp, #28
 800a514:	af02      	add	r7, sp, #8
 800a516:	4604      	mov	r4, r0
 800a518:	4608      	mov	r0, r1
 800a51a:	4611      	mov	r1, r2
 800a51c:	461a      	mov	r2, r3
 800a51e:	4623      	mov	r3, r4
 800a520:	80fb      	strh	r3, [r7, #6]
 800a522:	4603      	mov	r3, r0
 800a524:	80bb      	strh	r3, [r7, #4]
 800a526:	460b      	mov	r3, r1
 800a528:	807b      	strh	r3, [r7, #2]
 800a52a:	4613      	mov	r3, r2
 800a52c:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 800a52e:	88fb      	ldrh	r3, [r7, #6]
 800a530:	2b7f      	cmp	r3, #127	; 0x7f
 800a532:	d836      	bhi.n	800a5a2 <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 800a534:	88bb      	ldrh	r3, [r7, #4]
 800a536:	2b1f      	cmp	r3, #31
 800a538:	d833      	bhi.n	800a5a2 <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800a53a:	88fa      	ldrh	r2, [r7, #6]
 800a53c:	887b      	ldrh	r3, [r7, #2]
 800a53e:	4413      	add	r3, r2
 800a540:	2b7f      	cmp	r3, #127	; 0x7f
 800a542:	dd03      	ble.n	800a54c <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 800a544:	88fb      	ldrh	r3, [r7, #6]
 800a546:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800a54a:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 800a54c:	88ba      	ldrh	r2, [r7, #4]
 800a54e:	883b      	ldrh	r3, [r7, #0]
 800a550:	4413      	add	r3, r2
 800a552:	2b1f      	cmp	r3, #31
 800a554:	dd03      	ble.n	800a55e <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 800a556:	88bb      	ldrh	r3, [r7, #4]
 800a558:	f1c3 0320 	rsb	r3, r3, #32
 800a55c:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800a55e:	2300      	movs	r3, #0
 800a560:	73fb      	strb	r3, [r7, #15]
 800a562:	e018      	b.n	800a596 <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 800a564:	7bfb      	ldrb	r3, [r7, #15]
 800a566:	b29a      	uxth	r2, r3
 800a568:	88bb      	ldrh	r3, [r7, #4]
 800a56a:	4413      	add	r3, r2
 800a56c:	b299      	uxth	r1, r3
 800a56e:	88fa      	ldrh	r2, [r7, #6]
 800a570:	887b      	ldrh	r3, [r7, #2]
 800a572:	4413      	add	r3, r2
 800a574:	b29c      	uxth	r4, r3
 800a576:	7bfb      	ldrb	r3, [r7, #15]
 800a578:	b29a      	uxth	r2, r3
 800a57a:	88bb      	ldrh	r3, [r7, #4]
 800a57c:	4413      	add	r3, r2
 800a57e:	b29a      	uxth	r2, r3
 800a580:	88f8      	ldrh	r0, [r7, #6]
 800a582:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a586:	9300      	str	r3, [sp, #0]
 800a588:	4613      	mov	r3, r2
 800a58a:	4622      	mov	r2, r4
 800a58c:	f7ff fec5 	bl	800a31a <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 800a590:	7bfb      	ldrb	r3, [r7, #15]
 800a592:	3301      	adds	r3, #1
 800a594:	73fb      	strb	r3, [r7, #15]
 800a596:	7bfb      	ldrb	r3, [r7, #15]
 800a598:	b29b      	uxth	r3, r3
 800a59a:	883a      	ldrh	r2, [r7, #0]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d2e1      	bcs.n	800a564 <SSD1306_DrawFilledRectangle+0x54>
 800a5a0:	e000      	b.n	800a5a4 <SSD1306_DrawFilledRectangle+0x94>
		return;
 800a5a2:	bf00      	nop
	}
}
 800a5a4:	3714      	adds	r7, #20
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd90      	pop	{r4, r7, pc}

0800a5aa <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800a5ae:	2000      	movs	r0, #0
 800a5b0:	f7ff fd82 	bl	800a0b8 <SSD1306_Fill>
    //SSD1306_UpdateScreen();
}
 800a5b4:	bf00      	nop
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800a5be:	4b07      	ldr	r3, [pc, #28]	; (800a5dc <ssd1306_I2C_Init+0x24>)
 800a5c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 800a5c2:	e002      	b.n	800a5ca <ssd1306_I2C_Init+0x12>
		p--;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	607b      	str	r3, [r7, #4]
	while(p>0)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d1f9      	bne.n	800a5c4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bc80      	pop	{r7}
 800a5d8:	4770      	bx	lr
 800a5da:	bf00      	nop
 800a5dc:	0003d090 	.word	0x0003d090

0800a5e0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800a5e0:	b590      	push	{r4, r7, lr}
 800a5e2:	b0c7      	sub	sp, #284	; 0x11c
 800a5e4:	af02      	add	r7, sp, #8
 800a5e6:	4604      	mov	r4, r0
 800a5e8:	4608      	mov	r0, r1
 800a5ea:	4639      	mov	r1, r7
 800a5ec:	600a      	str	r2, [r1, #0]
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	1dfb      	adds	r3, r7, #7
 800a5f2:	4622      	mov	r2, r4
 800a5f4:	701a      	strb	r2, [r3, #0]
 800a5f6:	1dbb      	adds	r3, r7, #6
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	701a      	strb	r2, [r3, #0]
 800a5fc:	1d3b      	adds	r3, r7, #4
 800a5fe:	460a      	mov	r2, r1
 800a600:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800a602:	f107 030c 	add.w	r3, r7, #12
 800a606:	1dba      	adds	r2, r7, #6
 800a608:	7812      	ldrb	r2, [r2, #0]
 800a60a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800a60c:	2300      	movs	r3, #0
 800a60e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800a612:	e010      	b.n	800a636 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 800a614:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800a618:	463a      	mov	r2, r7
 800a61a:	6812      	ldr	r2, [r2, #0]
 800a61c:	441a      	add	r2, r3
 800a61e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800a622:	3301      	adds	r3, #1
 800a624:	7811      	ldrb	r1, [r2, #0]
 800a626:	f107 020c 	add.w	r2, r7, #12
 800a62a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800a62c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800a630:	3301      	adds	r3, #1
 800a632:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800a636:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	1d3a      	adds	r2, r7, #4
 800a63e:	8812      	ldrh	r2, [r2, #0]
 800a640:	429a      	cmp	r2, r3
 800a642:	d8e7      	bhi.n	800a614 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800a644:	1dfb      	adds	r3, r7, #7
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	b299      	uxth	r1, r3
 800a64a:	1d3b      	adds	r3, r7, #4
 800a64c:	881b      	ldrh	r3, [r3, #0]
 800a64e:	3301      	adds	r3, #1
 800a650:	b298      	uxth	r0, r3
 800a652:	f107 020c 	add.w	r2, r7, #12
 800a656:	230a      	movs	r3, #10
 800a658:	9300      	str	r3, [sp, #0]
 800a65a:	4603      	mov	r3, r0
 800a65c:	4803      	ldr	r0, [pc, #12]	; (800a66c <ssd1306_I2C_WriteMulti+0x8c>)
 800a65e:	f7f7 fb7b 	bl	8001d58 <HAL_I2C_Master_Transmit>
}
 800a662:	bf00      	nop
 800a664:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd90      	pop	{r4, r7, pc}
 800a66c:	20000d48 	.word	0x20000d48

0800a670 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800a670:	b580      	push	{r7, lr}
 800a672:	b086      	sub	sp, #24
 800a674:	af02      	add	r7, sp, #8
 800a676:	4603      	mov	r3, r0
 800a678:	71fb      	strb	r3, [r7, #7]
 800a67a:	460b      	mov	r3, r1
 800a67c:	71bb      	strb	r3, [r7, #6]
 800a67e:	4613      	mov	r3, r2
 800a680:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800a682:	79bb      	ldrb	r3, [r7, #6]
 800a684:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800a686:	797b      	ldrb	r3, [r7, #5]
 800a688:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800a68a:	79fb      	ldrb	r3, [r7, #7]
 800a68c:	b299      	uxth	r1, r3
 800a68e:	f107 020c 	add.w	r2, r7, #12
 800a692:	230a      	movs	r3, #10
 800a694:	9300      	str	r3, [sp, #0]
 800a696:	2302      	movs	r3, #2
 800a698:	4803      	ldr	r0, [pc, #12]	; (800a6a8 <ssd1306_I2C_Write+0x38>)
 800a69a:	f7f7 fb5d 	bl	8001d58 <HAL_I2C_Master_Transmit>
}
 800a69e:	bf00      	nop
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	20000d48 	.word	0x20000d48

0800a6ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800a6b2:	4b15      	ldr	r3, [pc, #84]	; (800a708 <HAL_MspInit+0x5c>)
 800a6b4:	699b      	ldr	r3, [r3, #24]
 800a6b6:	4a14      	ldr	r2, [pc, #80]	; (800a708 <HAL_MspInit+0x5c>)
 800a6b8:	f043 0301 	orr.w	r3, r3, #1
 800a6bc:	6193      	str	r3, [r2, #24]
 800a6be:	4b12      	ldr	r3, [pc, #72]	; (800a708 <HAL_MspInit+0x5c>)
 800a6c0:	699b      	ldr	r3, [r3, #24]
 800a6c2:	f003 0301 	and.w	r3, r3, #1
 800a6c6:	60bb      	str	r3, [r7, #8]
 800a6c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a6ca:	4b0f      	ldr	r3, [pc, #60]	; (800a708 <HAL_MspInit+0x5c>)
 800a6cc:	69db      	ldr	r3, [r3, #28]
 800a6ce:	4a0e      	ldr	r2, [pc, #56]	; (800a708 <HAL_MspInit+0x5c>)
 800a6d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6d4:	61d3      	str	r3, [r2, #28]
 800a6d6:	4b0c      	ldr	r3, [pc, #48]	; (800a708 <HAL_MspInit+0x5c>)
 800a6d8:	69db      	ldr	r3, [r3, #28]
 800a6da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6de:	607b      	str	r3, [r7, #4]
 800a6e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800a6e2:	4b0a      	ldr	r3, [pc, #40]	; (800a70c <HAL_MspInit+0x60>)
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	60fb      	str	r3, [r7, #12]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800a6ee:	60fb      	str	r3, [r7, #12]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a6f6:	60fb      	str	r3, [r7, #12]
 800a6f8:	4a04      	ldr	r2, [pc, #16]	; (800a70c <HAL_MspInit+0x60>)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a6fe:	bf00      	nop
 800a700:	3714      	adds	r7, #20
 800a702:	46bd      	mov	sp, r7
 800a704:	bc80      	pop	{r7}
 800a706:	4770      	bx	lr
 800a708:	40021000 	.word	0x40021000
 800a70c:	40010000 	.word	0x40010000

0800a710 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b08a      	sub	sp, #40	; 0x28
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a718:	f107 0318 	add.w	r3, r7, #24
 800a71c:	2200      	movs	r2, #0
 800a71e:	601a      	str	r2, [r3, #0]
 800a720:	605a      	str	r2, [r3, #4]
 800a722:	609a      	str	r2, [r3, #8]
 800a724:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a28      	ldr	r2, [pc, #160]	; (800a7cc <HAL_ADC_MspInit+0xbc>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d122      	bne.n	800a776 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800a730:	4b27      	ldr	r3, [pc, #156]	; (800a7d0 <HAL_ADC_MspInit+0xc0>)
 800a732:	699b      	ldr	r3, [r3, #24]
 800a734:	4a26      	ldr	r2, [pc, #152]	; (800a7d0 <HAL_ADC_MspInit+0xc0>)
 800a736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a73a:	6193      	str	r3, [r2, #24]
 800a73c:	4b24      	ldr	r3, [pc, #144]	; (800a7d0 <HAL_ADC_MspInit+0xc0>)
 800a73e:	699b      	ldr	r3, [r3, #24]
 800a740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a744:	617b      	str	r3, [r7, #20]
 800a746:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a748:	4b21      	ldr	r3, [pc, #132]	; (800a7d0 <HAL_ADC_MspInit+0xc0>)
 800a74a:	699b      	ldr	r3, [r3, #24]
 800a74c:	4a20      	ldr	r2, [pc, #128]	; (800a7d0 <HAL_ADC_MspInit+0xc0>)
 800a74e:	f043 0304 	orr.w	r3, r3, #4
 800a752:	6193      	str	r3, [r2, #24]
 800a754:	4b1e      	ldr	r3, [pc, #120]	; (800a7d0 <HAL_ADC_MspInit+0xc0>)
 800a756:	699b      	ldr	r3, [r3, #24]
 800a758:	f003 0304 	and.w	r3, r3, #4
 800a75c:	613b      	str	r3, [r7, #16]
 800a75e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a760:	2301      	movs	r3, #1
 800a762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a764:	2303      	movs	r3, #3
 800a766:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a768:	f107 0318 	add.w	r3, r7, #24
 800a76c:	4619      	mov	r1, r3
 800a76e:	4819      	ldr	r0, [pc, #100]	; (800a7d4 <HAL_ADC_MspInit+0xc4>)
 800a770:	f7f7 f840 	bl	80017f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800a774:	e026      	b.n	800a7c4 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a17      	ldr	r2, [pc, #92]	; (800a7d8 <HAL_ADC_MspInit+0xc8>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d121      	bne.n	800a7c4 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800a780:	4b13      	ldr	r3, [pc, #76]	; (800a7d0 <HAL_ADC_MspInit+0xc0>)
 800a782:	699b      	ldr	r3, [r3, #24]
 800a784:	4a12      	ldr	r2, [pc, #72]	; (800a7d0 <HAL_ADC_MspInit+0xc0>)
 800a786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a78a:	6193      	str	r3, [r2, #24]
 800a78c:	4b10      	ldr	r3, [pc, #64]	; (800a7d0 <HAL_ADC_MspInit+0xc0>)
 800a78e:	699b      	ldr	r3, [r3, #24]
 800a790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a794:	60fb      	str	r3, [r7, #12]
 800a796:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a798:	4b0d      	ldr	r3, [pc, #52]	; (800a7d0 <HAL_ADC_MspInit+0xc0>)
 800a79a:	699b      	ldr	r3, [r3, #24]
 800a79c:	4a0c      	ldr	r2, [pc, #48]	; (800a7d0 <HAL_ADC_MspInit+0xc0>)
 800a79e:	f043 0304 	orr.w	r3, r3, #4
 800a7a2:	6193      	str	r3, [r2, #24]
 800a7a4:	4b0a      	ldr	r3, [pc, #40]	; (800a7d0 <HAL_ADC_MspInit+0xc0>)
 800a7a6:	699b      	ldr	r3, [r3, #24]
 800a7a8:	f003 0304 	and.w	r3, r3, #4
 800a7ac:	60bb      	str	r3, [r7, #8]
 800a7ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a7b4:	2303      	movs	r3, #3
 800a7b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7b8:	f107 0318 	add.w	r3, r7, #24
 800a7bc:	4619      	mov	r1, r3
 800a7be:	4805      	ldr	r0, [pc, #20]	; (800a7d4 <HAL_ADC_MspInit+0xc4>)
 800a7c0:	f7f7 f818 	bl	80017f4 <HAL_GPIO_Init>
}
 800a7c4:	bf00      	nop
 800a7c6:	3728      	adds	r7, #40	; 0x28
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	40012400 	.word	0x40012400
 800a7d0:	40021000 	.word	0x40021000
 800a7d4:	40010800 	.word	0x40010800
 800a7d8:	40012800 	.word	0x40012800

0800a7dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b088      	sub	sp, #32
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7e4:	f107 0310 	add.w	r3, r7, #16
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	601a      	str	r2, [r3, #0]
 800a7ec:	605a      	str	r2, [r3, #4]
 800a7ee:	609a      	str	r2, [r3, #8]
 800a7f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a15      	ldr	r2, [pc, #84]	; (800a84c <HAL_I2C_MspInit+0x70>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d123      	bne.n	800a844 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a7fc:	4b14      	ldr	r3, [pc, #80]	; (800a850 <HAL_I2C_MspInit+0x74>)
 800a7fe:	699b      	ldr	r3, [r3, #24]
 800a800:	4a13      	ldr	r2, [pc, #76]	; (800a850 <HAL_I2C_MspInit+0x74>)
 800a802:	f043 0308 	orr.w	r3, r3, #8
 800a806:	6193      	str	r3, [r2, #24]
 800a808:	4b11      	ldr	r3, [pc, #68]	; (800a850 <HAL_I2C_MspInit+0x74>)
 800a80a:	699b      	ldr	r3, [r3, #24]
 800a80c:	f003 0308 	and.w	r3, r3, #8
 800a810:	60fb      	str	r3, [r7, #12]
 800a812:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a814:	23c0      	movs	r3, #192	; 0xc0
 800a816:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a818:	2312      	movs	r3, #18
 800a81a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a81c:	2303      	movs	r3, #3
 800a81e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a820:	f107 0310 	add.w	r3, r7, #16
 800a824:	4619      	mov	r1, r3
 800a826:	480b      	ldr	r0, [pc, #44]	; (800a854 <HAL_I2C_MspInit+0x78>)
 800a828:	f7f6 ffe4 	bl	80017f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a82c:	4b08      	ldr	r3, [pc, #32]	; (800a850 <HAL_I2C_MspInit+0x74>)
 800a82e:	69db      	ldr	r3, [r3, #28]
 800a830:	4a07      	ldr	r2, [pc, #28]	; (800a850 <HAL_I2C_MspInit+0x74>)
 800a832:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a836:	61d3      	str	r3, [r2, #28]
 800a838:	4b05      	ldr	r3, [pc, #20]	; (800a850 <HAL_I2C_MspInit+0x74>)
 800a83a:	69db      	ldr	r3, [r3, #28]
 800a83c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a840:	60bb      	str	r3, [r7, #8]
 800a842:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800a844:	bf00      	nop
 800a846:	3720      	adds	r7, #32
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	40005400 	.word	0x40005400
 800a850:	40021000 	.word	0x40021000
 800a854:	40010c00 	.word	0x40010c00

0800a858 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b088      	sub	sp, #32
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a860:	f107 0310 	add.w	r3, r7, #16
 800a864:	2200      	movs	r2, #0
 800a866:	601a      	str	r2, [r3, #0]
 800a868:	605a      	str	r2, [r3, #4]
 800a86a:	609a      	str	r2, [r3, #8]
 800a86c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a29      	ldr	r2, [pc, #164]	; (800a918 <HAL_SPI_MspInit+0xc0>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d14a      	bne.n	800a90e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800a878:	4b28      	ldr	r3, [pc, #160]	; (800a91c <HAL_SPI_MspInit+0xc4>)
 800a87a:	69db      	ldr	r3, [r3, #28]
 800a87c:	4a27      	ldr	r2, [pc, #156]	; (800a91c <HAL_SPI_MspInit+0xc4>)
 800a87e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a882:	61d3      	str	r3, [r2, #28]
 800a884:	4b25      	ldr	r3, [pc, #148]	; (800a91c <HAL_SPI_MspInit+0xc4>)
 800a886:	69db      	ldr	r3, [r3, #28]
 800a888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a88c:	60fb      	str	r3, [r7, #12]
 800a88e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a890:	4b22      	ldr	r3, [pc, #136]	; (800a91c <HAL_SPI_MspInit+0xc4>)
 800a892:	699b      	ldr	r3, [r3, #24]
 800a894:	4a21      	ldr	r2, [pc, #132]	; (800a91c <HAL_SPI_MspInit+0xc4>)
 800a896:	f043 0308 	orr.w	r3, r3, #8
 800a89a:	6193      	str	r3, [r2, #24]
 800a89c:	4b1f      	ldr	r3, [pc, #124]	; (800a91c <HAL_SPI_MspInit+0xc4>)
 800a89e:	699b      	ldr	r3, [r3, #24]
 800a8a0:	f003 0308 	and.w	r3, r3, #8
 800a8a4:	60bb      	str	r3, [r7, #8]
 800a8a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800a8a8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800a8ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8ae:	2302      	movs	r3, #2
 800a8b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a8b6:	f107 0310 	add.w	r3, r7, #16
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	4818      	ldr	r0, [pc, #96]	; (800a920 <HAL_SPI_MspInit+0xc8>)
 800a8be:	f7f6 ff99 	bl	80017f4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800a8c2:	4b18      	ldr	r3, [pc, #96]	; (800a924 <HAL_SPI_MspInit+0xcc>)
 800a8c4:	4a18      	ldr	r2, [pc, #96]	; (800a928 <HAL_SPI_MspInit+0xd0>)
 800a8c6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a8c8:	4b16      	ldr	r3, [pc, #88]	; (800a924 <HAL_SPI_MspInit+0xcc>)
 800a8ca:	2210      	movs	r2, #16
 800a8cc:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a8ce:	4b15      	ldr	r3, [pc, #84]	; (800a924 <HAL_SPI_MspInit+0xcc>)
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a8d4:	4b13      	ldr	r3, [pc, #76]	; (800a924 <HAL_SPI_MspInit+0xcc>)
 800a8d6:	2280      	movs	r2, #128	; 0x80
 800a8d8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a8da:	4b12      	ldr	r3, [pc, #72]	; (800a924 <HAL_SPI_MspInit+0xcc>)
 800a8dc:	2200      	movs	r2, #0
 800a8de:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a8e0:	4b10      	ldr	r3, [pc, #64]	; (800a924 <HAL_SPI_MspInit+0xcc>)
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800a8e6:	4b0f      	ldr	r3, [pc, #60]	; (800a924 <HAL_SPI_MspInit+0xcc>)
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a8ec:	4b0d      	ldr	r3, [pc, #52]	; (800a924 <HAL_SPI_MspInit+0xcc>)
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800a8f2:	480c      	ldr	r0, [pc, #48]	; (800a924 <HAL_SPI_MspInit+0xcc>)
 800a8f4:	f7f6 fd90 	bl	8001418 <HAL_DMA_Init>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d001      	beq.n	800a902 <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 800a8fe:	f7ff fa1d 	bl	8009d3c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	4a07      	ldr	r2, [pc, #28]	; (800a924 <HAL_SPI_MspInit+0xcc>)
 800a906:	649a      	str	r2, [r3, #72]	; 0x48
 800a908:	4a06      	ldr	r2, [pc, #24]	; (800a924 <HAL_SPI_MspInit+0xcc>)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800a90e:	bf00      	nop
 800a910:	3720      	adds	r7, #32
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	40003800 	.word	0x40003800
 800a91c:	40021000 	.word	0x40021000
 800a920:	40010c00 	.word	0x40010c00
 800a924:	2000169c 	.word	0x2000169c
 800a928:	40020058 	.word	0x40020058

0800a92c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a0d      	ldr	r2, [pc, #52]	; (800a970 <HAL_TIM_Base_MspInit+0x44>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d113      	bne.n	800a966 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a93e:	4b0d      	ldr	r3, [pc, #52]	; (800a974 <HAL_TIM_Base_MspInit+0x48>)
 800a940:	69db      	ldr	r3, [r3, #28]
 800a942:	4a0c      	ldr	r2, [pc, #48]	; (800a974 <HAL_TIM_Base_MspInit+0x48>)
 800a944:	f043 0302 	orr.w	r3, r3, #2
 800a948:	61d3      	str	r3, [r2, #28]
 800a94a:	4b0a      	ldr	r3, [pc, #40]	; (800a974 <HAL_TIM_Base_MspInit+0x48>)
 800a94c:	69db      	ldr	r3, [r3, #28]
 800a94e:	f003 0302 	and.w	r3, r3, #2
 800a952:	60fb      	str	r3, [r7, #12]
 800a954:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800a956:	2200      	movs	r2, #0
 800a958:	2100      	movs	r1, #0
 800a95a:	201d      	movs	r0, #29
 800a95c:	f7f6 fd25 	bl	80013aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a960:	201d      	movs	r0, #29
 800a962:	f7f6 fd3e 	bl	80013e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800a966:	bf00      	nop
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	40000400 	.word	0x40000400
 800a974:	40021000 	.word	0x40021000

0800a978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a978:	b480      	push	{r7}
 800a97a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a97c:	bf00      	nop
 800a97e:	46bd      	mov	sp, r7
 800a980:	bc80      	pop	{r7}
 800a982:	4770      	bx	lr

0800a984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a984:	b480      	push	{r7}
 800a986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a988:	e7fe      	b.n	800a988 <HardFault_Handler+0x4>

0800a98a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a98a:	b480      	push	{r7}
 800a98c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a98e:	e7fe      	b.n	800a98e <MemManage_Handler+0x4>

0800a990 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a990:	b480      	push	{r7}
 800a992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a994:	e7fe      	b.n	800a994 <BusFault_Handler+0x4>

0800a996 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a996:	b480      	push	{r7}
 800a998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a99a:	e7fe      	b.n	800a99a <UsageFault_Handler+0x4>

0800a99c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a99c:	b480      	push	{r7}
 800a99e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a9a0:	bf00      	nop
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bc80      	pop	{r7}
 800a9a6:	4770      	bx	lr

0800a9a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a9ac:	bf00      	nop
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bc80      	pop	{r7}
 800a9b2:	4770      	bx	lr

0800a9b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a9b8:	bf00      	nop
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bc80      	pop	{r7}
 800a9be:	4770      	bx	lr

0800a9c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a9c4:	f7f6 f8c6 	bl	8000b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a9c8:	bf00      	nop
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800a9d0:	4802      	ldr	r0, [pc, #8]	; (800a9dc <DMA1_Channel5_IRQHandler+0x10>)
 800a9d2:	f7f6 fddb 	bl	800158c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800a9d6:	bf00      	nop
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	2000169c 	.word	0x2000169c

0800a9e0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800a9e4:	4802      	ldr	r0, [pc, #8]	; (800a9f0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800a9e6:	f7f7 feda 	bl	800279e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800a9ea:	bf00      	nop
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	20001eb0 	.word	0x20001eb0

0800a9f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800a9f4:	b5b0      	push	{r4, r5, r7, lr}
 800a9f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */


  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a9f8:	4816      	ldr	r0, [pc, #88]	; (800aa54 <TIM3_IRQHandler+0x60>)
 800a9fa:	f7f9 fc15 	bl	8004228 <HAL_TIM_IRQHandler>
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); //Debug

  //static uint8_t s = 0;

  // Read ADC value (10-bit PWM)
  adc_value = read_adc() >> 2;
 800a9fe:	f7fd fe43 	bl	8008688 <read_adc>
 800aa02:	4603      	mov	r3, r0
 800aa04:	089b      	lsrs	r3, r3, #2
 800aa06:	b29a      	uxth	r2, r3
 800aa08:	4b13      	ldr	r3, [pc, #76]	; (800aa58 <TIM3_IRQHandler+0x64>)
 800aa0a:	801a      	strh	r2, [r3, #0]

  // Sampling N point FFT at tim3 rate
  //s++;
  //if (s >= 2){
    if (n_done == 0){
 800aa0c:	4b13      	ldr	r3, [pc, #76]	; (800aa5c <TIM3_IRQHandler+0x68>)
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d11c      	bne.n	800aa4e <TIM3_IRQHandler+0x5a>
      REX[n_count++] = (double) adc_value;
 800aa14:	4b10      	ldr	r3, [pc, #64]	; (800aa58 <TIM3_IRQHandler+0x64>)
 800aa16:	8819      	ldrh	r1, [r3, #0]
 800aa18:	4b11      	ldr	r3, [pc, #68]	; (800aa60 <TIM3_IRQHandler+0x6c>)
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	1c5a      	adds	r2, r3, #1
 800aa1e:	b2d0      	uxtb	r0, r2
 800aa20:	4a0f      	ldr	r2, [pc, #60]	; (800aa60 <TIM3_IRQHandler+0x6c>)
 800aa22:	7010      	strb	r0, [r2, #0]
 800aa24:	461d      	mov	r5, r3
 800aa26:	4608      	mov	r0, r1
 800aa28:	f7f5 fcdc 	bl	80003e4 <__aeabi_ui2d>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	460c      	mov	r4, r1
 800aa30:	490c      	ldr	r1, [pc, #48]	; (800aa64 <TIM3_IRQHandler+0x70>)
 800aa32:	00ea      	lsls	r2, r5, #3
 800aa34:	440a      	add	r2, r1
 800aa36:	e9c2 3400 	strd	r3, r4, [r2]
      if (n_count >= N){
 800aa3a:	4b09      	ldr	r3, [pc, #36]	; (800aa60 <TIM3_IRQHandler+0x6c>)
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	2b3f      	cmp	r3, #63	; 0x3f
 800aa40:	d905      	bls.n	800aa4e <TIM3_IRQHandler+0x5a>
        n_done = 1;
 800aa42:	4b06      	ldr	r3, [pc, #24]	; (800aa5c <TIM3_IRQHandler+0x68>)
 800aa44:	2201      	movs	r2, #1
 800aa46:	701a      	strb	r2, [r3, #0]
        n_count = 0;
 800aa48:	4b05      	ldr	r3, [pc, #20]	; (800aa60 <TIM3_IRQHandler+0x6c>)
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	701a      	strb	r2, [r3, #0]
    }
    //s = 0;
  //}

  /* USER CODE END TIM3_IRQn 1 */
}
 800aa4e:	bf00      	nop
 800aa50:	bdb0      	pop	{r4, r5, r7, pc}
 800aa52:	bf00      	nop
 800aa54:	20000d9c 	.word	0x20000d9c
 800aa58:	200003ac 	.word	0x200003ac
 800aa5c:	200003af 	.word	0x200003af
 800aa60:	200003ae 	.word	0x200003ae
 800aa64:	20000de0 	.word	0x20000de0

0800aa68 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800aa70:	4b11      	ldr	r3, [pc, #68]	; (800aab8 <_sbrk+0x50>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d102      	bne.n	800aa7e <_sbrk+0x16>
		heap_end = &end;
 800aa78:	4b0f      	ldr	r3, [pc, #60]	; (800aab8 <_sbrk+0x50>)
 800aa7a:	4a10      	ldr	r2, [pc, #64]	; (800aabc <_sbrk+0x54>)
 800aa7c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800aa7e:	4b0e      	ldr	r3, [pc, #56]	; (800aab8 <_sbrk+0x50>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800aa84:	4b0c      	ldr	r3, [pc, #48]	; (800aab8 <_sbrk+0x50>)
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	466a      	mov	r2, sp
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d907      	bls.n	800aaa2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800aa92:	f000 fcff 	bl	800b494 <__errno>
 800aa96:	4602      	mov	r2, r0
 800aa98:	230c      	movs	r3, #12
 800aa9a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800aa9c:	f04f 33ff 	mov.w	r3, #4294967295
 800aaa0:	e006      	b.n	800aab0 <_sbrk+0x48>
	}

	heap_end += incr;
 800aaa2:	4b05      	ldr	r3, [pc, #20]	; (800aab8 <_sbrk+0x50>)
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	4a03      	ldr	r2, [pc, #12]	; (800aab8 <_sbrk+0x50>)
 800aaac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800aaae:	68fb      	ldr	r3, [r7, #12]
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3710      	adds	r7, #16
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}
 800aab8:	200005bc 	.word	0x200005bc
 800aabc:	20002320 	.word	0x20002320

0800aac0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800aac0:	b480      	push	{r7}
 800aac2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800aac4:	4b15      	ldr	r3, [pc, #84]	; (800ab1c <SystemInit+0x5c>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a14      	ldr	r2, [pc, #80]	; (800ab1c <SystemInit+0x5c>)
 800aaca:	f043 0301 	orr.w	r3, r3, #1
 800aace:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800aad0:	4b12      	ldr	r3, [pc, #72]	; (800ab1c <SystemInit+0x5c>)
 800aad2:	685a      	ldr	r2, [r3, #4]
 800aad4:	4911      	ldr	r1, [pc, #68]	; (800ab1c <SystemInit+0x5c>)
 800aad6:	4b12      	ldr	r3, [pc, #72]	; (800ab20 <SystemInit+0x60>)
 800aad8:	4013      	ands	r3, r2
 800aada:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800aadc:	4b0f      	ldr	r3, [pc, #60]	; (800ab1c <SystemInit+0x5c>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a0e      	ldr	r2, [pc, #56]	; (800ab1c <SystemInit+0x5c>)
 800aae2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800aae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aaea:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800aaec:	4b0b      	ldr	r3, [pc, #44]	; (800ab1c <SystemInit+0x5c>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a0a      	ldr	r2, [pc, #40]	; (800ab1c <SystemInit+0x5c>)
 800aaf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aaf6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800aaf8:	4b08      	ldr	r3, [pc, #32]	; (800ab1c <SystemInit+0x5c>)
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	4a07      	ldr	r2, [pc, #28]	; (800ab1c <SystemInit+0x5c>)
 800aafe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800ab02:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800ab04:	4b05      	ldr	r3, [pc, #20]	; (800ab1c <SystemInit+0x5c>)
 800ab06:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800ab0a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800ab0c:	4b05      	ldr	r3, [pc, #20]	; (800ab24 <SystemInit+0x64>)
 800ab0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ab12:	609a      	str	r2, [r3, #8]
#endif 
}
 800ab14:	bf00      	nop
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bc80      	pop	{r7}
 800ab1a:	4770      	bx	lr
 800ab1c:	40021000 	.word	0x40021000
 800ab20:	f8ff0000 	.word	0xf8ff0000
 800ab24:	e000ed00 	.word	0xe000ed00

0800ab28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	4912      	ldr	r1, [pc, #72]	; (800ab78 <MX_USB_DEVICE_Init+0x50>)
 800ab30:	4812      	ldr	r0, [pc, #72]	; (800ab7c <MX_USB_DEVICE_Init+0x54>)
 800ab32:	f7fb fadc 	bl	80060ee <USBD_Init>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d001      	beq.n	800ab40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ab3c:	f7ff f8fe 	bl	8009d3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ab40:	490f      	ldr	r1, [pc, #60]	; (800ab80 <MX_USB_DEVICE_Init+0x58>)
 800ab42:	480e      	ldr	r0, [pc, #56]	; (800ab7c <MX_USB_DEVICE_Init+0x54>)
 800ab44:	f7fb fafe 	bl	8006144 <USBD_RegisterClass>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d001      	beq.n	800ab52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ab4e:	f7ff f8f5 	bl	8009d3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ab52:	490c      	ldr	r1, [pc, #48]	; (800ab84 <MX_USB_DEVICE_Init+0x5c>)
 800ab54:	4809      	ldr	r0, [pc, #36]	; (800ab7c <MX_USB_DEVICE_Init+0x54>)
 800ab56:	f7fb fa2f 	bl	8005fb8 <USBD_CDC_RegisterInterface>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d001      	beq.n	800ab64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ab60:	f7ff f8ec 	bl	8009d3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ab64:	4805      	ldr	r0, [pc, #20]	; (800ab7c <MX_USB_DEVICE_Init+0x54>)
 800ab66:	f7fb fb06 	bl	8006176 <USBD_Start>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d001      	beq.n	800ab74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ab70:	f7ff f8e4 	bl	8009d3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ab74:	bf00      	nop
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	20000144 	.word	0x20000144
 800ab7c:	200007f0 	.word	0x200007f0
 800ab80:	20000014 	.word	0x20000014
 800ab84:	20000134 	.word	0x20000134

0800ab88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	4905      	ldr	r1, [pc, #20]	; (800aba4 <CDC_Init_FS+0x1c>)
 800ab90:	4805      	ldr	r0, [pc, #20]	; (800aba8 <CDC_Init_FS+0x20>)
 800ab92:	f7fb fa27 	bl	8005fe4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ab96:	4905      	ldr	r1, [pc, #20]	; (800abac <CDC_Init_FS+0x24>)
 800ab98:	4803      	ldr	r0, [pc, #12]	; (800aba8 <CDC_Init_FS+0x20>)
 800ab9a:	f7fb fa3c 	bl	8006016 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ab9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	20001ac8 	.word	0x20001ac8
 800aba8:	200007f0 	.word	0x200007f0
 800abac:	200016e0 	.word	0x200016e0

0800abb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800abb0:	b480      	push	{r7}
 800abb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800abb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	46bd      	mov	sp, r7
 800abba:	bc80      	pop	{r7}
 800abbc:	4770      	bx	lr
	...

0800abc0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	4603      	mov	r3, r0
 800abc8:	6039      	str	r1, [r7, #0]
 800abca:	71fb      	strb	r3, [r7, #7]
 800abcc:	4613      	mov	r3, r2
 800abce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800abd0:	79fb      	ldrb	r3, [r7, #7]
 800abd2:	2b23      	cmp	r3, #35	; 0x23
 800abd4:	d84a      	bhi.n	800ac6c <CDC_Control_FS+0xac>
 800abd6:	a201      	add	r2, pc, #4	; (adr r2, 800abdc <CDC_Control_FS+0x1c>)
 800abd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abdc:	0800ac6d 	.word	0x0800ac6d
 800abe0:	0800ac6d 	.word	0x0800ac6d
 800abe4:	0800ac6d 	.word	0x0800ac6d
 800abe8:	0800ac6d 	.word	0x0800ac6d
 800abec:	0800ac6d 	.word	0x0800ac6d
 800abf0:	0800ac6d 	.word	0x0800ac6d
 800abf4:	0800ac6d 	.word	0x0800ac6d
 800abf8:	0800ac6d 	.word	0x0800ac6d
 800abfc:	0800ac6d 	.word	0x0800ac6d
 800ac00:	0800ac6d 	.word	0x0800ac6d
 800ac04:	0800ac6d 	.word	0x0800ac6d
 800ac08:	0800ac6d 	.word	0x0800ac6d
 800ac0c:	0800ac6d 	.word	0x0800ac6d
 800ac10:	0800ac6d 	.word	0x0800ac6d
 800ac14:	0800ac6d 	.word	0x0800ac6d
 800ac18:	0800ac6d 	.word	0x0800ac6d
 800ac1c:	0800ac6d 	.word	0x0800ac6d
 800ac20:	0800ac6d 	.word	0x0800ac6d
 800ac24:	0800ac6d 	.word	0x0800ac6d
 800ac28:	0800ac6d 	.word	0x0800ac6d
 800ac2c:	0800ac6d 	.word	0x0800ac6d
 800ac30:	0800ac6d 	.word	0x0800ac6d
 800ac34:	0800ac6d 	.word	0x0800ac6d
 800ac38:	0800ac6d 	.word	0x0800ac6d
 800ac3c:	0800ac6d 	.word	0x0800ac6d
 800ac40:	0800ac6d 	.word	0x0800ac6d
 800ac44:	0800ac6d 	.word	0x0800ac6d
 800ac48:	0800ac6d 	.word	0x0800ac6d
 800ac4c:	0800ac6d 	.word	0x0800ac6d
 800ac50:	0800ac6d 	.word	0x0800ac6d
 800ac54:	0800ac6d 	.word	0x0800ac6d
 800ac58:	0800ac6d 	.word	0x0800ac6d
 800ac5c:	0800ac6d 	.word	0x0800ac6d
 800ac60:	0800ac6d 	.word	0x0800ac6d
 800ac64:	0800ac6d 	.word	0x0800ac6d
 800ac68:	0800ac6d 	.word	0x0800ac6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ac6c:	bf00      	nop
  }

  return (USBD_OK);
 800ac6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bc80      	pop	{r7}
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop

0800ac7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ac86:	6879      	ldr	r1, [r7, #4]
 800ac88:	4805      	ldr	r0, [pc, #20]	; (800aca0 <CDC_Receive_FS+0x24>)
 800ac8a:	f7fb f9c4 	bl	8006016 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ac8e:	4804      	ldr	r0, [pc, #16]	; (800aca0 <CDC_Receive_FS+0x24>)
 800ac90:	f7fb fa03 	bl	800609a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ac94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3708      	adds	r7, #8
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	200007f0 	.word	0x200007f0

0800aca4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	460b      	mov	r3, r1
 800acae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800acb0:	2300      	movs	r3, #0
 800acb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800acb4:	4b0d      	ldr	r3, [pc, #52]	; (800acec <CDC_Transmit_FS+0x48>)
 800acb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d001      	beq.n	800acca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800acc6:	2301      	movs	r3, #1
 800acc8:	e00b      	b.n	800ace2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800acca:	887b      	ldrh	r3, [r7, #2]
 800accc:	461a      	mov	r2, r3
 800acce:	6879      	ldr	r1, [r7, #4]
 800acd0:	4806      	ldr	r0, [pc, #24]	; (800acec <CDC_Transmit_FS+0x48>)
 800acd2:	f7fb f987 	bl	8005fe4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800acd6:	4805      	ldr	r0, [pc, #20]	; (800acec <CDC_Transmit_FS+0x48>)
 800acd8:	f7fb f9b0 	bl	800603c <USBD_CDC_TransmitPacket>
 800acdc:	4603      	mov	r3, r0
 800acde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	200007f0 	.word	0x200007f0

0800acf0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a0d      	ldr	r2, [pc, #52]	; (800ad34 <HAL_PCD_MspInit+0x44>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d113      	bne.n	800ad2a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ad02:	4b0d      	ldr	r3, [pc, #52]	; (800ad38 <HAL_PCD_MspInit+0x48>)
 800ad04:	69db      	ldr	r3, [r3, #28]
 800ad06:	4a0c      	ldr	r2, [pc, #48]	; (800ad38 <HAL_PCD_MspInit+0x48>)
 800ad08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ad0c:	61d3      	str	r3, [r2, #28]
 800ad0e:	4b0a      	ldr	r3, [pc, #40]	; (800ad38 <HAL_PCD_MspInit+0x48>)
 800ad10:	69db      	ldr	r3, [r3, #28]
 800ad12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad16:	60fb      	str	r3, [r7, #12]
 800ad18:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	2100      	movs	r1, #0
 800ad1e:	2014      	movs	r0, #20
 800ad20:	f7f6 fb43 	bl	80013aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ad24:	2014      	movs	r0, #20
 800ad26:	f7f6 fb5c 	bl	80013e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ad2a:	bf00      	nop
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	40005c00 	.word	0x40005c00
 800ad38:	40021000 	.word	0x40021000

0800ad3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800ad50:	4619      	mov	r1, r3
 800ad52:	4610      	mov	r0, r2
 800ad54:	f7fb fa57 	bl	8006206 <USBD_LL_SetupStage>
}
 800ad58:	bf00      	nop
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	460b      	mov	r3, r1
 800ad6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800ad72:	78fb      	ldrb	r3, [r7, #3]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	015b      	lsls	r3, r3, #5
 800ad78:	4413      	add	r3, r2
 800ad7a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	78fb      	ldrb	r3, [r7, #3]
 800ad82:	4619      	mov	r1, r3
 800ad84:	f7fb fa8a 	bl	800629c <USBD_LL_DataOutStage>
}
 800ad88:	bf00      	nop
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	460b      	mov	r3, r1
 800ad9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800ada2:	78fb      	ldrb	r3, [r7, #3]
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	015b      	lsls	r3, r3, #5
 800ada8:	4413      	add	r3, r2
 800adaa:	333c      	adds	r3, #60	; 0x3c
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	78fb      	ldrb	r3, [r7, #3]
 800adb0:	4619      	mov	r1, r3
 800adb2:	f7fb fae4 	bl	800637e <USBD_LL_DataInStage>
}
 800adb6:	bf00      	nop
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b082      	sub	sp, #8
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800adcc:	4618      	mov	r0, r3
 800adce:	f7fb fbf4 	bl	80065ba <USBD_LL_SOF>
}
 800add2:	bf00      	nop
 800add4:	3708      	adds	r7, #8
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800adda:	b580      	push	{r7, lr}
 800addc:	b084      	sub	sp, #16
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ade2:	2301      	movs	r3, #1
 800ade4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	2b02      	cmp	r3, #2
 800adec:	d001      	beq.n	800adf2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800adee:	f7fe ffa5 	bl	8009d3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800adf8:	7bfa      	ldrb	r2, [r7, #15]
 800adfa:	4611      	mov	r1, r2
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7fb fba4 	bl	800654a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7fb fb5d 	bl	80064c8 <USBD_LL_Reset>
}
 800ae0e:	bf00      	nop
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
	...

0800ae18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7fb fb9e 	bl	8006568 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	699b      	ldr	r3, [r3, #24]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d005      	beq.n	800ae40 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae34:	4b04      	ldr	r3, [pc, #16]	; (800ae48 <HAL_PCD_SuspendCallback+0x30>)
 800ae36:	691b      	ldr	r3, [r3, #16]
 800ae38:	4a03      	ldr	r2, [pc, #12]	; (800ae48 <HAL_PCD_SuspendCallback+0x30>)
 800ae3a:	f043 0306 	orr.w	r3, r3, #6
 800ae3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ae40:	bf00      	nop
 800ae42:	3708      	adds	r7, #8
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	e000ed00 	.word	0xe000ed00

0800ae4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fb fb98 	bl	8006590 <USBD_LL_Resume>
}
 800ae60:	bf00      	nop
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ae70:	4a28      	ldr	r2, [pc, #160]	; (800af14 <USBD_LL_Init+0xac>)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4a26      	ldr	r2, [pc, #152]	; (800af14 <USBD_LL_Init+0xac>)
 800ae7c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ae80:	4b24      	ldr	r3, [pc, #144]	; (800af14 <USBD_LL_Init+0xac>)
 800ae82:	4a25      	ldr	r2, [pc, #148]	; (800af18 <USBD_LL_Init+0xb0>)
 800ae84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ae86:	4b23      	ldr	r3, [pc, #140]	; (800af14 <USBD_LL_Init+0xac>)
 800ae88:	2208      	movs	r2, #8
 800ae8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ae8c:	4b21      	ldr	r3, [pc, #132]	; (800af14 <USBD_LL_Init+0xac>)
 800ae8e:	2202      	movs	r2, #2
 800ae90:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ae92:	4b20      	ldr	r3, [pc, #128]	; (800af14 <USBD_LL_Init+0xac>)
 800ae94:	2200      	movs	r2, #0
 800ae96:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ae98:	4b1e      	ldr	r3, [pc, #120]	; (800af14 <USBD_LL_Init+0xac>)
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ae9e:	4b1d      	ldr	r3, [pc, #116]	; (800af14 <USBD_LL_Init+0xac>)
 800aea0:	2200      	movs	r2, #0
 800aea2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800aea4:	481b      	ldr	r0, [pc, #108]	; (800af14 <USBD_LL_Init+0xac>)
 800aea6:	f7f7 fb73 	bl	8002590 <HAL_PCD_Init>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d001      	beq.n	800aeb4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800aeb0:	f7fe ff44 	bl	8009d3c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aeba:	2318      	movs	r3, #24
 800aebc:	2200      	movs	r2, #0
 800aebe:	2100      	movs	r1, #0
 800aec0:	f7f8 fa0c 	bl	80032dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aeca:	2358      	movs	r3, #88	; 0x58
 800aecc:	2200      	movs	r2, #0
 800aece:	2180      	movs	r1, #128	; 0x80
 800aed0:	f7f8 fa04 	bl	80032dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aeda:	23c0      	movs	r3, #192	; 0xc0
 800aedc:	2200      	movs	r2, #0
 800aede:	2181      	movs	r1, #129	; 0x81
 800aee0:	f7f8 f9fc 	bl	80032dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aeea:	f44f 7388 	mov.w	r3, #272	; 0x110
 800aeee:	2200      	movs	r2, #0
 800aef0:	2101      	movs	r1, #1
 800aef2:	f7f8 f9f3 	bl	80032dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aefc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af00:	2200      	movs	r2, #0
 800af02:	2182      	movs	r1, #130	; 0x82
 800af04:	f7f8 f9ea 	bl	80032dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	20001eb0 	.word	0x20001eb0
 800af18:	40005c00 	.word	0x40005c00

0800af1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af24:	2300      	movs	r3, #0
 800af26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af28:	2300      	movs	r3, #0
 800af2a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af32:	4618      	mov	r0, r3
 800af34:	f7f7 fc0d 	bl	8002752 <HAL_PCD_Start>
 800af38:	4603      	mov	r3, r0
 800af3a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
 800af3e:	4618      	mov	r0, r3
 800af40:	f000 f948 	bl	800b1d4 <USBD_Get_USB_Status>
 800af44:	4603      	mov	r3, r0
 800af46:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800af48:	7bbb      	ldrb	r3, [r7, #14]
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b084      	sub	sp, #16
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
 800af5a:	4608      	mov	r0, r1
 800af5c:	4611      	mov	r1, r2
 800af5e:	461a      	mov	r2, r3
 800af60:	4603      	mov	r3, r0
 800af62:	70fb      	strb	r3, [r7, #3]
 800af64:	460b      	mov	r3, r1
 800af66:	70bb      	strb	r3, [r7, #2]
 800af68:	4613      	mov	r3, r2
 800af6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af6c:	2300      	movs	r3, #0
 800af6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af70:	2300      	movs	r3, #0
 800af72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af7a:	78bb      	ldrb	r3, [r7, #2]
 800af7c:	883a      	ldrh	r2, [r7, #0]
 800af7e:	78f9      	ldrb	r1, [r7, #3]
 800af80:	f7f7 fd40 	bl	8002a04 <HAL_PCD_EP_Open>
 800af84:	4603      	mov	r3, r0
 800af86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af88:	7bfb      	ldrb	r3, [r7, #15]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 f922 	bl	800b1d4 <USBD_Get_USB_Status>
 800af90:	4603      	mov	r3, r0
 800af92:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800af94:	7bbb      	ldrb	r3, [r7, #14]
}
 800af96:	4618      	mov	r0, r3
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b084      	sub	sp, #16
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
 800afa6:	460b      	mov	r3, r1
 800afa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afaa:	2300      	movs	r3, #0
 800afac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afae:	2300      	movs	r3, #0
 800afb0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800afb8:	78fa      	ldrb	r2, [r7, #3]
 800afba:	4611      	mov	r1, r2
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7f7 fd81 	bl	8002ac4 <HAL_PCD_EP_Close>
 800afc2:	4603      	mov	r3, r0
 800afc4:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
 800afc8:	4618      	mov	r0, r3
 800afca:	f000 f903 	bl	800b1d4 <USBD_Get_USB_Status>
 800afce:	4603      	mov	r3, r0
 800afd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800afd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	460b      	mov	r3, r1
 800afe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aff6:	78fa      	ldrb	r2, [r7, #3]
 800aff8:	4611      	mov	r1, r2
 800affa:	4618      	mov	r0, r3
 800affc:	f7f7 fe2b 	bl	8002c56 <HAL_PCD_EP_SetStall>
 800b000:	4603      	mov	r3, r0
 800b002:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b004:	7bfb      	ldrb	r3, [r7, #15]
 800b006:	4618      	mov	r0, r3
 800b008:	f000 f8e4 	bl	800b1d4 <USBD_Get_USB_Status>
 800b00c:	4603      	mov	r3, r0
 800b00e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800b010:	7bbb      	ldrb	r3, [r7, #14]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b084      	sub	sp, #16
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
 800b022:	460b      	mov	r3, r1
 800b024:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b026:	2300      	movs	r3, #0
 800b028:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b034:	78fa      	ldrb	r2, [r7, #3]
 800b036:	4611      	mov	r1, r2
 800b038:	4618      	mov	r0, r3
 800b03a:	f7f7 fe66 	bl	8002d0a <HAL_PCD_EP_ClrStall>
 800b03e:	4603      	mov	r3, r0
 800b040:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b042:	7bfb      	ldrb	r3, [r7, #15]
 800b044:	4618      	mov	r0, r3
 800b046:	f000 f8c5 	bl	800b1d4 <USBD_Get_USB_Status>
 800b04a:	4603      	mov	r3, r0
 800b04c:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800b04e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b050:	4618      	mov	r0, r3
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b058:	b480      	push	{r7}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	460b      	mov	r3, r1
 800b062:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b06a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800b06c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b070:	2b00      	cmp	r3, #0
 800b072:	da08      	bge.n	800b086 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800b074:	78fb      	ldrb	r3, [r7, #3]
 800b076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	015b      	lsls	r3, r3, #5
 800b07e:	4413      	add	r3, r2
 800b080:	332a      	adds	r3, #42	; 0x2a
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	e008      	b.n	800b098 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800b086:	78fb      	ldrb	r3, [r7, #3]
 800b088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	015b      	lsls	r3, r3, #5
 800b090:	4413      	add	r3, r2
 800b092:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800b096:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3714      	adds	r7, #20
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bc80      	pop	{r7}
 800b0a0:	4770      	bx	lr

0800b0a2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b084      	sub	sp, #16
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0bc:	78fa      	ldrb	r2, [r7, #3]
 800b0be:	4611      	mov	r1, r2
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7f7 fc7a 	bl	80029ba <HAL_PCD_SetAddress>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0ca:	7bfb      	ldrb	r3, [r7, #15]
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f000 f881 	bl	800b1d4 <USBD_Get_USB_Status>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800b0d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3710      	adds	r7, #16
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b086      	sub	sp, #24
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	607a      	str	r2, [r7, #4]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	72fb      	strb	r3, [r7, #11]
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b102:	893b      	ldrh	r3, [r7, #8]
 800b104:	7af9      	ldrb	r1, [r7, #11]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	f7f7 fd6c 	bl	8002be4 <HAL_PCD_EP_Transmit>
 800b10c:	4603      	mov	r3, r0
 800b10e:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b110:	7dfb      	ldrb	r3, [r7, #23]
 800b112:	4618      	mov	r0, r3
 800b114:	f000 f85e 	bl	800b1d4 <USBD_Get_USB_Status>
 800b118:	4603      	mov	r3, r0
 800b11a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800b11c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3718      	adds	r7, #24
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b086      	sub	sp, #24
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	60f8      	str	r0, [r7, #12]
 800b12e:	607a      	str	r2, [r7, #4]
 800b130:	461a      	mov	r2, r3
 800b132:	460b      	mov	r3, r1
 800b134:	72fb      	strb	r3, [r7, #11]
 800b136:	4613      	mov	r3, r2
 800b138:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b13a:	2300      	movs	r3, #0
 800b13c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b13e:	2300      	movs	r3, #0
 800b140:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b148:	893b      	ldrh	r3, [r7, #8]
 800b14a:	7af9      	ldrb	r1, [r7, #11]
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	f7f7 fcfb 	bl	8002b48 <HAL_PCD_EP_Receive>
 800b152:	4603      	mov	r3, r0
 800b154:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b156:	7dfb      	ldrb	r3, [r7, #23]
 800b158:	4618      	mov	r0, r3
 800b15a:	f000 f83b 	bl	800b1d4 <USBD_Get_USB_Status>
 800b15e:	4603      	mov	r3, r0
 800b160:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800b162:	7dbb      	ldrb	r3, [r7, #22]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3718      	adds	r7, #24
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	460b      	mov	r3, r1
 800b176:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b17e:	78fa      	ldrb	r2, [r7, #3]
 800b180:	4611      	mov	r1, r2
 800b182:	4618      	mov	r0, r3
 800b184:	f7f7 fd1a 	bl	8002bbc <HAL_PCD_EP_GetRxCount>
 800b188:	4603      	mov	r3, r0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
	...

0800b194 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b19c:	4b02      	ldr	r3, [pc, #8]	; (800b1a8 <USBD_static_malloc+0x14>)
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	370c      	adds	r7, #12
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bc80      	pop	{r7}
 800b1a6:	4770      	bx	lr
 800b1a8:	200005c0 	.word	0x200005c0

0800b1ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]

}
 800b1b4:	bf00      	nop
 800b1b6:	370c      	adds	r7, #12
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bc80      	pop	{r7}
 800b1bc:	4770      	bx	lr

0800b1be <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1be:	b480      	push	{r7}
 800b1c0:	b083      	sub	sp, #12
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b1ca:	bf00      	nop
 800b1cc:	370c      	adds	r7, #12
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bc80      	pop	{r7}
 800b1d2:	4770      	bx	lr

0800b1d4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b085      	sub	sp, #20
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	4603      	mov	r3, r0
 800b1dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b1e2:	79fb      	ldrb	r3, [r7, #7]
 800b1e4:	2b03      	cmp	r3, #3
 800b1e6:	d817      	bhi.n	800b218 <USBD_Get_USB_Status+0x44>
 800b1e8:	a201      	add	r2, pc, #4	; (adr r2, 800b1f0 <USBD_Get_USB_Status+0x1c>)
 800b1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ee:	bf00      	nop
 800b1f0:	0800b201 	.word	0x0800b201
 800b1f4:	0800b207 	.word	0x0800b207
 800b1f8:	0800b20d 	.word	0x0800b20d
 800b1fc:	0800b213 	.word	0x0800b213
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b200:	2300      	movs	r3, #0
 800b202:	73fb      	strb	r3, [r7, #15]
    break;
 800b204:	e00b      	b.n	800b21e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b206:	2302      	movs	r3, #2
 800b208:	73fb      	strb	r3, [r7, #15]
    break;
 800b20a:	e008      	b.n	800b21e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b20c:	2301      	movs	r3, #1
 800b20e:	73fb      	strb	r3, [r7, #15]
    break;
 800b210:	e005      	b.n	800b21e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b212:	2302      	movs	r3, #2
 800b214:	73fb      	strb	r3, [r7, #15]
    break;
 800b216:	e002      	b.n	800b21e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b218:	2302      	movs	r3, #2
 800b21a:	73fb      	strb	r3, [r7, #15]
    break;
 800b21c:	bf00      	nop
  }
  return usb_status;
 800b21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b220:	4618      	mov	r0, r3
 800b222:	3714      	adds	r7, #20
 800b224:	46bd      	mov	sp, r7
 800b226:	bc80      	pop	{r7}
 800b228:	4770      	bx	lr
 800b22a:	bf00      	nop

0800b22c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	4603      	mov	r3, r0
 800b234:	6039      	str	r1, [r7, #0]
 800b236:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	2212      	movs	r2, #18
 800b23c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b23e:	4b03      	ldr	r3, [pc, #12]	; (800b24c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b240:	4618      	mov	r0, r3
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	bc80      	pop	{r7}
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop
 800b24c:	20000160 	.word	0x20000160

0800b250 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
 800b256:	4603      	mov	r3, r0
 800b258:	6039      	str	r1, [r7, #0]
 800b25a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	2204      	movs	r2, #4
 800b260:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b262:	4b03      	ldr	r3, [pc, #12]	; (800b270 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b264:	4618      	mov	r0, r3
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	bc80      	pop	{r7}
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	20000174 	.word	0x20000174

0800b274 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	4603      	mov	r3, r0
 800b27c:	6039      	str	r1, [r7, #0]
 800b27e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b280:	79fb      	ldrb	r3, [r7, #7]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d105      	bne.n	800b292 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	4907      	ldr	r1, [pc, #28]	; (800b2a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b28a:	4808      	ldr	r0, [pc, #32]	; (800b2ac <USBD_FS_ProductStrDescriptor+0x38>)
 800b28c:	f7fb fedf 	bl	800704e <USBD_GetString>
 800b290:	e004      	b.n	800b29c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b292:	683a      	ldr	r2, [r7, #0]
 800b294:	4904      	ldr	r1, [pc, #16]	; (800b2a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b296:	4805      	ldr	r0, [pc, #20]	; (800b2ac <USBD_FS_ProductStrDescriptor+0x38>)
 800b298:	f7fb fed9 	bl	800704e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b29c:	4b02      	ldr	r3, [pc, #8]	; (800b2a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	2000211c 	.word	0x2000211c
 800b2ac:	0800e838 	.word	0x0800e838

0800b2b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	6039      	str	r1, [r7, #0]
 800b2ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b2bc:	683a      	ldr	r2, [r7, #0]
 800b2be:	4904      	ldr	r1, [pc, #16]	; (800b2d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b2c0:	4804      	ldr	r0, [pc, #16]	; (800b2d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b2c2:	f7fb fec4 	bl	800704e <USBD_GetString>
  return USBD_StrDesc;
 800b2c6:	4b02      	ldr	r3, [pc, #8]	; (800b2d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3708      	adds	r7, #8
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	2000211c 	.word	0x2000211c
 800b2d4:	0800e850 	.word	0x0800e850

0800b2d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	4603      	mov	r3, r0
 800b2e0:	6039      	str	r1, [r7, #0]
 800b2e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	221a      	movs	r2, #26
 800b2e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b2ea:	f000 f843 	bl	800b374 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b2ee:	4b02      	ldr	r3, [pc, #8]	; (800b2f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3708      	adds	r7, #8
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	20000178 	.word	0x20000178

0800b2fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	4603      	mov	r3, r0
 800b304:	6039      	str	r1, [r7, #0]
 800b306:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b308:	79fb      	ldrb	r3, [r7, #7]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d105      	bne.n	800b31a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	4907      	ldr	r1, [pc, #28]	; (800b330 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b312:	4808      	ldr	r0, [pc, #32]	; (800b334 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b314:	f7fb fe9b 	bl	800704e <USBD_GetString>
 800b318:	e004      	b.n	800b324 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b31a:	683a      	ldr	r2, [r7, #0]
 800b31c:	4904      	ldr	r1, [pc, #16]	; (800b330 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b31e:	4805      	ldr	r0, [pc, #20]	; (800b334 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b320:	f7fb fe95 	bl	800704e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b324:	4b02      	ldr	r3, [pc, #8]	; (800b330 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b326:	4618      	mov	r0, r3
 800b328:	3708      	adds	r7, #8
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	2000211c 	.word	0x2000211c
 800b334:	0800e864 	.word	0x0800e864

0800b338 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	4603      	mov	r3, r0
 800b340:	6039      	str	r1, [r7, #0]
 800b342:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b344:	79fb      	ldrb	r3, [r7, #7]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d105      	bne.n	800b356 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b34a:	683a      	ldr	r2, [r7, #0]
 800b34c:	4907      	ldr	r1, [pc, #28]	; (800b36c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b34e:	4808      	ldr	r0, [pc, #32]	; (800b370 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b350:	f7fb fe7d 	bl	800704e <USBD_GetString>
 800b354:	e004      	b.n	800b360 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b356:	683a      	ldr	r2, [r7, #0]
 800b358:	4904      	ldr	r1, [pc, #16]	; (800b36c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b35a:	4805      	ldr	r0, [pc, #20]	; (800b370 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b35c:	f7fb fe77 	bl	800704e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b360:	4b02      	ldr	r3, [pc, #8]	; (800b36c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b362:	4618      	mov	r0, r3
 800b364:	3708      	adds	r7, #8
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	2000211c 	.word	0x2000211c
 800b370:	0800e870 	.word	0x0800e870

0800b374 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b37a:	4b0f      	ldr	r3, [pc, #60]	; (800b3b8 <Get_SerialNum+0x44>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b380:	4b0e      	ldr	r3, [pc, #56]	; (800b3bc <Get_SerialNum+0x48>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b386:	4b0e      	ldr	r3, [pc, #56]	; (800b3c0 <Get_SerialNum+0x4c>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b38c:	68fa      	ldr	r2, [r7, #12]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4413      	add	r3, r2
 800b392:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d009      	beq.n	800b3ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b39a:	2208      	movs	r2, #8
 800b39c:	4909      	ldr	r1, [pc, #36]	; (800b3c4 <Get_SerialNum+0x50>)
 800b39e:	68f8      	ldr	r0, [r7, #12]
 800b3a0:	f000 f814 	bl	800b3cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b3a4:	2204      	movs	r2, #4
 800b3a6:	4908      	ldr	r1, [pc, #32]	; (800b3c8 <Get_SerialNum+0x54>)
 800b3a8:	68b8      	ldr	r0, [r7, #8]
 800b3aa:	f000 f80f 	bl	800b3cc <IntToUnicode>
  }
}
 800b3ae:	bf00      	nop
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	1ffff7e8 	.word	0x1ffff7e8
 800b3bc:	1ffff7ec 	.word	0x1ffff7ec
 800b3c0:	1ffff7f0 	.word	0x1ffff7f0
 800b3c4:	2000017a 	.word	0x2000017a
 800b3c8:	2000018a 	.word	0x2000018a

0800b3cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b087      	sub	sp, #28
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b3de:	2300      	movs	r3, #0
 800b3e0:	75fb      	strb	r3, [r7, #23]
 800b3e2:	e027      	b.n	800b434 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	0f1b      	lsrs	r3, r3, #28
 800b3e8:	2b09      	cmp	r3, #9
 800b3ea:	d80b      	bhi.n	800b404 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	0f1b      	lsrs	r3, r3, #28
 800b3f0:	b2da      	uxtb	r2, r3
 800b3f2:	7dfb      	ldrb	r3, [r7, #23]
 800b3f4:	005b      	lsls	r3, r3, #1
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	440b      	add	r3, r1
 800b3fc:	3230      	adds	r2, #48	; 0x30
 800b3fe:	b2d2      	uxtb	r2, r2
 800b400:	701a      	strb	r2, [r3, #0]
 800b402:	e00a      	b.n	800b41a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	0f1b      	lsrs	r3, r3, #28
 800b408:	b2da      	uxtb	r2, r3
 800b40a:	7dfb      	ldrb	r3, [r7, #23]
 800b40c:	005b      	lsls	r3, r3, #1
 800b40e:	4619      	mov	r1, r3
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	440b      	add	r3, r1
 800b414:	3237      	adds	r2, #55	; 0x37
 800b416:	b2d2      	uxtb	r2, r2
 800b418:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	011b      	lsls	r3, r3, #4
 800b41e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b420:	7dfb      	ldrb	r3, [r7, #23]
 800b422:	005b      	lsls	r3, r3, #1
 800b424:	3301      	adds	r3, #1
 800b426:	68ba      	ldr	r2, [r7, #8]
 800b428:	4413      	add	r3, r2
 800b42a:	2200      	movs	r2, #0
 800b42c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b42e:	7dfb      	ldrb	r3, [r7, #23]
 800b430:	3301      	adds	r3, #1
 800b432:	75fb      	strb	r3, [r7, #23]
 800b434:	7dfa      	ldrb	r2, [r7, #23]
 800b436:	79fb      	ldrb	r3, [r7, #7]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d3d3      	bcc.n	800b3e4 <IntToUnicode+0x18>
  }
}
 800b43c:	bf00      	nop
 800b43e:	371c      	adds	r7, #28
 800b440:	46bd      	mov	sp, r7
 800b442:	bc80      	pop	{r7}
 800b444:	4770      	bx	lr
	...

0800b448 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800b448:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800b44a:	e003      	b.n	800b454 <LoopCopyDataInit>

0800b44c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800b44c:	4b0b      	ldr	r3, [pc, #44]	; (800b47c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800b44e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800b450:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800b452:	3104      	adds	r1, #4

0800b454 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800b454:	480a      	ldr	r0, [pc, #40]	; (800b480 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800b456:	4b0b      	ldr	r3, [pc, #44]	; (800b484 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800b458:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800b45a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800b45c:	d3f6      	bcc.n	800b44c <CopyDataInit>
  ldr r2, =_sbss
 800b45e:	4a0a      	ldr	r2, [pc, #40]	; (800b488 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800b460:	e002      	b.n	800b468 <LoopFillZerobss>

0800b462 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800b462:	2300      	movs	r3, #0
  str r3, [r2], #4
 800b464:	f842 3b04 	str.w	r3, [r2], #4

0800b468 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800b468:	4b08      	ldr	r3, [pc, #32]	; (800b48c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800b46a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800b46c:	d3f9      	bcc.n	800b462 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800b46e:	f7ff fb27 	bl	800aac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b472:	f000 f815 	bl	800b4a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800b476:	f7fb fec7 	bl	8007208 <main>
  bx lr
 800b47a:	4770      	bx	lr
  ldr r3, =_sidata
 800b47c:	0800fbd8 	.word	0x0800fbd8
  ldr r0, =_sdata
 800b480:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800b484:	20000368 	.word	0x20000368
  ldr r2, =_sbss
 800b488:	20000368 	.word	0x20000368
  ldr r3, = _ebss
 800b48c:	20002320 	.word	0x20002320

0800b490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800b490:	e7fe      	b.n	800b490 <ADC1_2_IRQHandler>
	...

0800b494 <__errno>:
 800b494:	4b01      	ldr	r3, [pc, #4]	; (800b49c <__errno+0x8>)
 800b496:	6818      	ldr	r0, [r3, #0]
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop
 800b49c:	20000194 	.word	0x20000194

0800b4a0 <__libc_init_array>:
 800b4a0:	b570      	push	{r4, r5, r6, lr}
 800b4a2:	2500      	movs	r5, #0
 800b4a4:	4e0c      	ldr	r6, [pc, #48]	; (800b4d8 <__libc_init_array+0x38>)
 800b4a6:	4c0d      	ldr	r4, [pc, #52]	; (800b4dc <__libc_init_array+0x3c>)
 800b4a8:	1ba4      	subs	r4, r4, r6
 800b4aa:	10a4      	asrs	r4, r4, #2
 800b4ac:	42a5      	cmp	r5, r4
 800b4ae:	d109      	bne.n	800b4c4 <__libc_init_array+0x24>
 800b4b0:	f003 f97e 	bl	800e7b0 <_init>
 800b4b4:	2500      	movs	r5, #0
 800b4b6:	4e0a      	ldr	r6, [pc, #40]	; (800b4e0 <__libc_init_array+0x40>)
 800b4b8:	4c0a      	ldr	r4, [pc, #40]	; (800b4e4 <__libc_init_array+0x44>)
 800b4ba:	1ba4      	subs	r4, r4, r6
 800b4bc:	10a4      	asrs	r4, r4, #2
 800b4be:	42a5      	cmp	r5, r4
 800b4c0:	d105      	bne.n	800b4ce <__libc_init_array+0x2e>
 800b4c2:	bd70      	pop	{r4, r5, r6, pc}
 800b4c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b4c8:	4798      	blx	r3
 800b4ca:	3501      	adds	r5, #1
 800b4cc:	e7ee      	b.n	800b4ac <__libc_init_array+0xc>
 800b4ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b4d2:	4798      	blx	r3
 800b4d4:	3501      	adds	r5, #1
 800b4d6:	e7f2      	b.n	800b4be <__libc_init_array+0x1e>
 800b4d8:	0800fbd0 	.word	0x0800fbd0
 800b4dc:	0800fbd0 	.word	0x0800fbd0
 800b4e0:	0800fbd0 	.word	0x0800fbd0
 800b4e4:	0800fbd4 	.word	0x0800fbd4

0800b4e8 <memset>:
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	4402      	add	r2, r0
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d100      	bne.n	800b4f2 <memset+0xa>
 800b4f0:	4770      	bx	lr
 800b4f2:	f803 1b01 	strb.w	r1, [r3], #1
 800b4f6:	e7f9      	b.n	800b4ec <memset+0x4>

0800b4f8 <__cvt>:
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4fe:	461e      	mov	r6, r3
 800b500:	bfbb      	ittet	lt
 800b502:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b506:	461e      	movlt	r6, r3
 800b508:	2300      	movge	r3, #0
 800b50a:	232d      	movlt	r3, #45	; 0x2d
 800b50c:	b088      	sub	sp, #32
 800b50e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b510:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800b514:	f027 0720 	bic.w	r7, r7, #32
 800b518:	2f46      	cmp	r7, #70	; 0x46
 800b51a:	4614      	mov	r4, r2
 800b51c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b51e:	700b      	strb	r3, [r1, #0]
 800b520:	d004      	beq.n	800b52c <__cvt+0x34>
 800b522:	2f45      	cmp	r7, #69	; 0x45
 800b524:	d100      	bne.n	800b528 <__cvt+0x30>
 800b526:	3501      	adds	r5, #1
 800b528:	2302      	movs	r3, #2
 800b52a:	e000      	b.n	800b52e <__cvt+0x36>
 800b52c:	2303      	movs	r3, #3
 800b52e:	aa07      	add	r2, sp, #28
 800b530:	9204      	str	r2, [sp, #16]
 800b532:	aa06      	add	r2, sp, #24
 800b534:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b538:	e9cd 3500 	strd	r3, r5, [sp]
 800b53c:	4622      	mov	r2, r4
 800b53e:	4633      	mov	r3, r6
 800b540:	f000 fd0e 	bl	800bf60 <_dtoa_r>
 800b544:	2f47      	cmp	r7, #71	; 0x47
 800b546:	4680      	mov	r8, r0
 800b548:	d102      	bne.n	800b550 <__cvt+0x58>
 800b54a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b54c:	07db      	lsls	r3, r3, #31
 800b54e:	d526      	bpl.n	800b59e <__cvt+0xa6>
 800b550:	2f46      	cmp	r7, #70	; 0x46
 800b552:	eb08 0905 	add.w	r9, r8, r5
 800b556:	d111      	bne.n	800b57c <__cvt+0x84>
 800b558:	f898 3000 	ldrb.w	r3, [r8]
 800b55c:	2b30      	cmp	r3, #48	; 0x30
 800b55e:	d10a      	bne.n	800b576 <__cvt+0x7e>
 800b560:	2200      	movs	r2, #0
 800b562:	2300      	movs	r3, #0
 800b564:	4620      	mov	r0, r4
 800b566:	4631      	mov	r1, r6
 800b568:	f7f5 fa1e 	bl	80009a8 <__aeabi_dcmpeq>
 800b56c:	b918      	cbnz	r0, 800b576 <__cvt+0x7e>
 800b56e:	f1c5 0501 	rsb	r5, r5, #1
 800b572:	f8ca 5000 	str.w	r5, [sl]
 800b576:	f8da 3000 	ldr.w	r3, [sl]
 800b57a:	4499      	add	r9, r3
 800b57c:	2200      	movs	r2, #0
 800b57e:	2300      	movs	r3, #0
 800b580:	4620      	mov	r0, r4
 800b582:	4631      	mov	r1, r6
 800b584:	f7f5 fa10 	bl	80009a8 <__aeabi_dcmpeq>
 800b588:	b938      	cbnz	r0, 800b59a <__cvt+0xa2>
 800b58a:	2230      	movs	r2, #48	; 0x30
 800b58c:	9b07      	ldr	r3, [sp, #28]
 800b58e:	454b      	cmp	r3, r9
 800b590:	d205      	bcs.n	800b59e <__cvt+0xa6>
 800b592:	1c59      	adds	r1, r3, #1
 800b594:	9107      	str	r1, [sp, #28]
 800b596:	701a      	strb	r2, [r3, #0]
 800b598:	e7f8      	b.n	800b58c <__cvt+0x94>
 800b59a:	f8cd 901c 	str.w	r9, [sp, #28]
 800b59e:	4640      	mov	r0, r8
 800b5a0:	9b07      	ldr	r3, [sp, #28]
 800b5a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b5a4:	eba3 0308 	sub.w	r3, r3, r8
 800b5a8:	6013      	str	r3, [r2, #0]
 800b5aa:	b008      	add	sp, #32
 800b5ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b5b0 <__exponent>:
 800b5b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5b2:	2900      	cmp	r1, #0
 800b5b4:	bfb4      	ite	lt
 800b5b6:	232d      	movlt	r3, #45	; 0x2d
 800b5b8:	232b      	movge	r3, #43	; 0x2b
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	bfb8      	it	lt
 800b5be:	4249      	neglt	r1, r1
 800b5c0:	2909      	cmp	r1, #9
 800b5c2:	f804 2b02 	strb.w	r2, [r4], #2
 800b5c6:	7043      	strb	r3, [r0, #1]
 800b5c8:	dd21      	ble.n	800b60e <__exponent+0x5e>
 800b5ca:	f10d 0307 	add.w	r3, sp, #7
 800b5ce:	461f      	mov	r7, r3
 800b5d0:	260a      	movs	r6, #10
 800b5d2:	fb91 f5f6 	sdiv	r5, r1, r6
 800b5d6:	fb06 1115 	mls	r1, r6, r5, r1
 800b5da:	2d09      	cmp	r5, #9
 800b5dc:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800b5e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b5e4:	f103 32ff 	add.w	r2, r3, #4294967295
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	dc09      	bgt.n	800b600 <__exponent+0x50>
 800b5ec:	3130      	adds	r1, #48	; 0x30
 800b5ee:	3b02      	subs	r3, #2
 800b5f0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b5f4:	42bb      	cmp	r3, r7
 800b5f6:	4622      	mov	r2, r4
 800b5f8:	d304      	bcc.n	800b604 <__exponent+0x54>
 800b5fa:	1a10      	subs	r0, r2, r0
 800b5fc:	b003      	add	sp, #12
 800b5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b600:	4613      	mov	r3, r2
 800b602:	e7e6      	b.n	800b5d2 <__exponent+0x22>
 800b604:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b608:	f804 2b01 	strb.w	r2, [r4], #1
 800b60c:	e7f2      	b.n	800b5f4 <__exponent+0x44>
 800b60e:	2330      	movs	r3, #48	; 0x30
 800b610:	4419      	add	r1, r3
 800b612:	7083      	strb	r3, [r0, #2]
 800b614:	1d02      	adds	r2, r0, #4
 800b616:	70c1      	strb	r1, [r0, #3]
 800b618:	e7ef      	b.n	800b5fa <__exponent+0x4a>
	...

0800b61c <_printf_float>:
 800b61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b620:	b091      	sub	sp, #68	; 0x44
 800b622:	460c      	mov	r4, r1
 800b624:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b626:	4693      	mov	fp, r2
 800b628:	461e      	mov	r6, r3
 800b62a:	4605      	mov	r5, r0
 800b62c:	f001 fa4c 	bl	800cac8 <_localeconv_r>
 800b630:	6803      	ldr	r3, [r0, #0]
 800b632:	4618      	mov	r0, r3
 800b634:	9309      	str	r3, [sp, #36]	; 0x24
 800b636:	f7f4 fd8b 	bl	8000150 <strlen>
 800b63a:	2300      	movs	r3, #0
 800b63c:	930e      	str	r3, [sp, #56]	; 0x38
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	900a      	str	r0, [sp, #40]	; 0x28
 800b642:	3307      	adds	r3, #7
 800b644:	f023 0307 	bic.w	r3, r3, #7
 800b648:	f103 0208 	add.w	r2, r3, #8
 800b64c:	f894 8018 	ldrb.w	r8, [r4, #24]
 800b650:	f8d4 a000 	ldr.w	sl, [r4]
 800b654:	603a      	str	r2, [r7, #0]
 800b656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b65e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800b662:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b666:	930b      	str	r3, [sp, #44]	; 0x2c
 800b668:	f04f 32ff 	mov.w	r2, #4294967295
 800b66c:	4ba6      	ldr	r3, [pc, #664]	; (800b908 <_printf_float+0x2ec>)
 800b66e:	4638      	mov	r0, r7
 800b670:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b672:	f7f5 f9cb 	bl	8000a0c <__aeabi_dcmpun>
 800b676:	bb68      	cbnz	r0, 800b6d4 <_printf_float+0xb8>
 800b678:	f04f 32ff 	mov.w	r2, #4294967295
 800b67c:	4ba2      	ldr	r3, [pc, #648]	; (800b908 <_printf_float+0x2ec>)
 800b67e:	4638      	mov	r0, r7
 800b680:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b682:	f7f5 f9a5 	bl	80009d0 <__aeabi_dcmple>
 800b686:	bb28      	cbnz	r0, 800b6d4 <_printf_float+0xb8>
 800b688:	2200      	movs	r2, #0
 800b68a:	2300      	movs	r3, #0
 800b68c:	4638      	mov	r0, r7
 800b68e:	4649      	mov	r1, r9
 800b690:	f7f5 f994 	bl	80009bc <__aeabi_dcmplt>
 800b694:	b110      	cbz	r0, 800b69c <_printf_float+0x80>
 800b696:	232d      	movs	r3, #45	; 0x2d
 800b698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b69c:	4f9b      	ldr	r7, [pc, #620]	; (800b90c <_printf_float+0x2f0>)
 800b69e:	4b9c      	ldr	r3, [pc, #624]	; (800b910 <_printf_float+0x2f4>)
 800b6a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b6a4:	bf98      	it	ls
 800b6a6:	461f      	movls	r7, r3
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	f04f 0900 	mov.w	r9, #0
 800b6ae:	6123      	str	r3, [r4, #16]
 800b6b0:	f02a 0304 	bic.w	r3, sl, #4
 800b6b4:	6023      	str	r3, [r4, #0]
 800b6b6:	9600      	str	r6, [sp, #0]
 800b6b8:	465b      	mov	r3, fp
 800b6ba:	aa0f      	add	r2, sp, #60	; 0x3c
 800b6bc:	4621      	mov	r1, r4
 800b6be:	4628      	mov	r0, r5
 800b6c0:	f000 f9e2 	bl	800ba88 <_printf_common>
 800b6c4:	3001      	adds	r0, #1
 800b6c6:	f040 8090 	bne.w	800b7ea <_printf_float+0x1ce>
 800b6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ce:	b011      	add	sp, #68	; 0x44
 800b6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d4:	463a      	mov	r2, r7
 800b6d6:	464b      	mov	r3, r9
 800b6d8:	4638      	mov	r0, r7
 800b6da:	4649      	mov	r1, r9
 800b6dc:	f7f5 f996 	bl	8000a0c <__aeabi_dcmpun>
 800b6e0:	b110      	cbz	r0, 800b6e8 <_printf_float+0xcc>
 800b6e2:	4f8c      	ldr	r7, [pc, #560]	; (800b914 <_printf_float+0x2f8>)
 800b6e4:	4b8c      	ldr	r3, [pc, #560]	; (800b918 <_printf_float+0x2fc>)
 800b6e6:	e7db      	b.n	800b6a0 <_printf_float+0x84>
 800b6e8:	6863      	ldr	r3, [r4, #4]
 800b6ea:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800b6ee:	1c59      	adds	r1, r3, #1
 800b6f0:	a80d      	add	r0, sp, #52	; 0x34
 800b6f2:	a90e      	add	r1, sp, #56	; 0x38
 800b6f4:	d140      	bne.n	800b778 <_printf_float+0x15c>
 800b6f6:	2306      	movs	r3, #6
 800b6f8:	6063      	str	r3, [r4, #4]
 800b6fa:	f04f 0c00 	mov.w	ip, #0
 800b6fe:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800b702:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800b706:	6863      	ldr	r3, [r4, #4]
 800b708:	6022      	str	r2, [r4, #0]
 800b70a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	463a      	mov	r2, r7
 800b712:	464b      	mov	r3, r9
 800b714:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800b718:	4628      	mov	r0, r5
 800b71a:	f7ff feed 	bl	800b4f8 <__cvt>
 800b71e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800b722:	2b47      	cmp	r3, #71	; 0x47
 800b724:	4607      	mov	r7, r0
 800b726:	d109      	bne.n	800b73c <_printf_float+0x120>
 800b728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b72a:	1cd8      	adds	r0, r3, #3
 800b72c:	db02      	blt.n	800b734 <_printf_float+0x118>
 800b72e:	6862      	ldr	r2, [r4, #4]
 800b730:	4293      	cmp	r3, r2
 800b732:	dd47      	ble.n	800b7c4 <_printf_float+0x1a8>
 800b734:	f1a8 0802 	sub.w	r8, r8, #2
 800b738:	fa5f f888 	uxtb.w	r8, r8
 800b73c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800b740:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b742:	d824      	bhi.n	800b78e <_printf_float+0x172>
 800b744:	3901      	subs	r1, #1
 800b746:	4642      	mov	r2, r8
 800b748:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b74c:	910d      	str	r1, [sp, #52]	; 0x34
 800b74e:	f7ff ff2f 	bl	800b5b0 <__exponent>
 800b752:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b754:	4681      	mov	r9, r0
 800b756:	1813      	adds	r3, r2, r0
 800b758:	2a01      	cmp	r2, #1
 800b75a:	6123      	str	r3, [r4, #16]
 800b75c:	dc02      	bgt.n	800b764 <_printf_float+0x148>
 800b75e:	6822      	ldr	r2, [r4, #0]
 800b760:	07d1      	lsls	r1, r2, #31
 800b762:	d501      	bpl.n	800b768 <_printf_float+0x14c>
 800b764:	3301      	adds	r3, #1
 800b766:	6123      	str	r3, [r4, #16]
 800b768:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d0a2      	beq.n	800b6b6 <_printf_float+0x9a>
 800b770:	232d      	movs	r3, #45	; 0x2d
 800b772:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b776:	e79e      	b.n	800b6b6 <_printf_float+0x9a>
 800b778:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800b77c:	f000 816e 	beq.w	800ba5c <_printf_float+0x440>
 800b780:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b784:	d1b9      	bne.n	800b6fa <_printf_float+0xde>
 800b786:	2b00      	cmp	r3, #0
 800b788:	d1b7      	bne.n	800b6fa <_printf_float+0xde>
 800b78a:	2301      	movs	r3, #1
 800b78c:	e7b4      	b.n	800b6f8 <_printf_float+0xdc>
 800b78e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800b792:	d119      	bne.n	800b7c8 <_printf_float+0x1ac>
 800b794:	2900      	cmp	r1, #0
 800b796:	6863      	ldr	r3, [r4, #4]
 800b798:	dd0c      	ble.n	800b7b4 <_printf_float+0x198>
 800b79a:	6121      	str	r1, [r4, #16]
 800b79c:	b913      	cbnz	r3, 800b7a4 <_printf_float+0x188>
 800b79e:	6822      	ldr	r2, [r4, #0]
 800b7a0:	07d2      	lsls	r2, r2, #31
 800b7a2:	d502      	bpl.n	800b7aa <_printf_float+0x18e>
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	440b      	add	r3, r1
 800b7a8:	6123      	str	r3, [r4, #16]
 800b7aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7ac:	f04f 0900 	mov.w	r9, #0
 800b7b0:	65a3      	str	r3, [r4, #88]	; 0x58
 800b7b2:	e7d9      	b.n	800b768 <_printf_float+0x14c>
 800b7b4:	b913      	cbnz	r3, 800b7bc <_printf_float+0x1a0>
 800b7b6:	6822      	ldr	r2, [r4, #0]
 800b7b8:	07d0      	lsls	r0, r2, #31
 800b7ba:	d501      	bpl.n	800b7c0 <_printf_float+0x1a4>
 800b7bc:	3302      	adds	r3, #2
 800b7be:	e7f3      	b.n	800b7a8 <_printf_float+0x18c>
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e7f1      	b.n	800b7a8 <_printf_float+0x18c>
 800b7c4:	f04f 0867 	mov.w	r8, #103	; 0x67
 800b7c8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	db05      	blt.n	800b7dc <_printf_float+0x1c0>
 800b7d0:	6822      	ldr	r2, [r4, #0]
 800b7d2:	6123      	str	r3, [r4, #16]
 800b7d4:	07d1      	lsls	r1, r2, #31
 800b7d6:	d5e8      	bpl.n	800b7aa <_printf_float+0x18e>
 800b7d8:	3301      	adds	r3, #1
 800b7da:	e7e5      	b.n	800b7a8 <_printf_float+0x18c>
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	bfcc      	ite	gt
 800b7e0:	2301      	movgt	r3, #1
 800b7e2:	f1c3 0302 	rsble	r3, r3, #2
 800b7e6:	4413      	add	r3, r2
 800b7e8:	e7de      	b.n	800b7a8 <_printf_float+0x18c>
 800b7ea:	6823      	ldr	r3, [r4, #0]
 800b7ec:	055a      	lsls	r2, r3, #21
 800b7ee:	d407      	bmi.n	800b800 <_printf_float+0x1e4>
 800b7f0:	6923      	ldr	r3, [r4, #16]
 800b7f2:	463a      	mov	r2, r7
 800b7f4:	4659      	mov	r1, fp
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	47b0      	blx	r6
 800b7fa:	3001      	adds	r0, #1
 800b7fc:	d129      	bne.n	800b852 <_printf_float+0x236>
 800b7fe:	e764      	b.n	800b6ca <_printf_float+0xae>
 800b800:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800b804:	f240 80d7 	bls.w	800b9b6 <_printf_float+0x39a>
 800b808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b80c:	2200      	movs	r2, #0
 800b80e:	2300      	movs	r3, #0
 800b810:	f7f5 f8ca 	bl	80009a8 <__aeabi_dcmpeq>
 800b814:	b388      	cbz	r0, 800b87a <_printf_float+0x25e>
 800b816:	2301      	movs	r3, #1
 800b818:	4a40      	ldr	r2, [pc, #256]	; (800b91c <_printf_float+0x300>)
 800b81a:	4659      	mov	r1, fp
 800b81c:	4628      	mov	r0, r5
 800b81e:	47b0      	blx	r6
 800b820:	3001      	adds	r0, #1
 800b822:	f43f af52 	beq.w	800b6ca <_printf_float+0xae>
 800b826:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b82a:	429a      	cmp	r2, r3
 800b82c:	db02      	blt.n	800b834 <_printf_float+0x218>
 800b82e:	6823      	ldr	r3, [r4, #0]
 800b830:	07d8      	lsls	r0, r3, #31
 800b832:	d50e      	bpl.n	800b852 <_printf_float+0x236>
 800b834:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b838:	4659      	mov	r1, fp
 800b83a:	4628      	mov	r0, r5
 800b83c:	47b0      	blx	r6
 800b83e:	3001      	adds	r0, #1
 800b840:	f43f af43 	beq.w	800b6ca <_printf_float+0xae>
 800b844:	2700      	movs	r7, #0
 800b846:	f104 081a 	add.w	r8, r4, #26
 800b84a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b84c:	3b01      	subs	r3, #1
 800b84e:	42bb      	cmp	r3, r7
 800b850:	dc09      	bgt.n	800b866 <_printf_float+0x24a>
 800b852:	6823      	ldr	r3, [r4, #0]
 800b854:	079f      	lsls	r7, r3, #30
 800b856:	f100 80fd 	bmi.w	800ba54 <_printf_float+0x438>
 800b85a:	68e0      	ldr	r0, [r4, #12]
 800b85c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b85e:	4298      	cmp	r0, r3
 800b860:	bfb8      	it	lt
 800b862:	4618      	movlt	r0, r3
 800b864:	e733      	b.n	800b6ce <_printf_float+0xb2>
 800b866:	2301      	movs	r3, #1
 800b868:	4642      	mov	r2, r8
 800b86a:	4659      	mov	r1, fp
 800b86c:	4628      	mov	r0, r5
 800b86e:	47b0      	blx	r6
 800b870:	3001      	adds	r0, #1
 800b872:	f43f af2a 	beq.w	800b6ca <_printf_float+0xae>
 800b876:	3701      	adds	r7, #1
 800b878:	e7e7      	b.n	800b84a <_printf_float+0x22e>
 800b87a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	dc2b      	bgt.n	800b8d8 <_printf_float+0x2bc>
 800b880:	2301      	movs	r3, #1
 800b882:	4a26      	ldr	r2, [pc, #152]	; (800b91c <_printf_float+0x300>)
 800b884:	4659      	mov	r1, fp
 800b886:	4628      	mov	r0, r5
 800b888:	47b0      	blx	r6
 800b88a:	3001      	adds	r0, #1
 800b88c:	f43f af1d 	beq.w	800b6ca <_printf_float+0xae>
 800b890:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b892:	b923      	cbnz	r3, 800b89e <_printf_float+0x282>
 800b894:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b896:	b913      	cbnz	r3, 800b89e <_printf_float+0x282>
 800b898:	6823      	ldr	r3, [r4, #0]
 800b89a:	07d9      	lsls	r1, r3, #31
 800b89c:	d5d9      	bpl.n	800b852 <_printf_float+0x236>
 800b89e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8a2:	4659      	mov	r1, fp
 800b8a4:	4628      	mov	r0, r5
 800b8a6:	47b0      	blx	r6
 800b8a8:	3001      	adds	r0, #1
 800b8aa:	f43f af0e 	beq.w	800b6ca <_printf_float+0xae>
 800b8ae:	f04f 0800 	mov.w	r8, #0
 800b8b2:	f104 091a 	add.w	r9, r4, #26
 800b8b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8b8:	425b      	negs	r3, r3
 800b8ba:	4543      	cmp	r3, r8
 800b8bc:	dc01      	bgt.n	800b8c2 <_printf_float+0x2a6>
 800b8be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8c0:	e797      	b.n	800b7f2 <_printf_float+0x1d6>
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	464a      	mov	r2, r9
 800b8c6:	4659      	mov	r1, fp
 800b8c8:	4628      	mov	r0, r5
 800b8ca:	47b0      	blx	r6
 800b8cc:	3001      	adds	r0, #1
 800b8ce:	f43f aefc 	beq.w	800b6ca <_printf_float+0xae>
 800b8d2:	f108 0801 	add.w	r8, r8, #1
 800b8d6:	e7ee      	b.n	800b8b6 <_printf_float+0x29a>
 800b8d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	bfa8      	it	ge
 800b8e0:	461a      	movge	r2, r3
 800b8e2:	2a00      	cmp	r2, #0
 800b8e4:	4690      	mov	r8, r2
 800b8e6:	dd07      	ble.n	800b8f8 <_printf_float+0x2dc>
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	4659      	mov	r1, fp
 800b8ec:	463a      	mov	r2, r7
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	47b0      	blx	r6
 800b8f2:	3001      	adds	r0, #1
 800b8f4:	f43f aee9 	beq.w	800b6ca <_printf_float+0xae>
 800b8f8:	f104 031a 	add.w	r3, r4, #26
 800b8fc:	f04f 0a00 	mov.w	sl, #0
 800b900:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800b904:	930b      	str	r3, [sp, #44]	; 0x2c
 800b906:	e015      	b.n	800b934 <_printf_float+0x318>
 800b908:	7fefffff 	.word	0x7fefffff
 800b90c:	0800f794 	.word	0x0800f794
 800b910:	0800f790 	.word	0x0800f790
 800b914:	0800f79c 	.word	0x0800f79c
 800b918:	0800f798 	.word	0x0800f798
 800b91c:	0800f7a0 	.word	0x0800f7a0
 800b920:	2301      	movs	r3, #1
 800b922:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b924:	4659      	mov	r1, fp
 800b926:	4628      	mov	r0, r5
 800b928:	47b0      	blx	r6
 800b92a:	3001      	adds	r0, #1
 800b92c:	f43f aecd 	beq.w	800b6ca <_printf_float+0xae>
 800b930:	f10a 0a01 	add.w	sl, sl, #1
 800b934:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800b938:	eba9 0308 	sub.w	r3, r9, r8
 800b93c:	4553      	cmp	r3, sl
 800b93e:	dcef      	bgt.n	800b920 <_printf_float+0x304>
 800b940:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b944:	429a      	cmp	r2, r3
 800b946:	444f      	add	r7, r9
 800b948:	db14      	blt.n	800b974 <_printf_float+0x358>
 800b94a:	6823      	ldr	r3, [r4, #0]
 800b94c:	07da      	lsls	r2, r3, #31
 800b94e:	d411      	bmi.n	800b974 <_printf_float+0x358>
 800b950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b952:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b954:	eba3 0209 	sub.w	r2, r3, r9
 800b958:	eba3 0901 	sub.w	r9, r3, r1
 800b95c:	4591      	cmp	r9, r2
 800b95e:	bfa8      	it	ge
 800b960:	4691      	movge	r9, r2
 800b962:	f1b9 0f00 	cmp.w	r9, #0
 800b966:	dc0d      	bgt.n	800b984 <_printf_float+0x368>
 800b968:	2700      	movs	r7, #0
 800b96a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b96e:	f104 081a 	add.w	r8, r4, #26
 800b972:	e018      	b.n	800b9a6 <_printf_float+0x38a>
 800b974:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b978:	4659      	mov	r1, fp
 800b97a:	4628      	mov	r0, r5
 800b97c:	47b0      	blx	r6
 800b97e:	3001      	adds	r0, #1
 800b980:	d1e6      	bne.n	800b950 <_printf_float+0x334>
 800b982:	e6a2      	b.n	800b6ca <_printf_float+0xae>
 800b984:	464b      	mov	r3, r9
 800b986:	463a      	mov	r2, r7
 800b988:	4659      	mov	r1, fp
 800b98a:	4628      	mov	r0, r5
 800b98c:	47b0      	blx	r6
 800b98e:	3001      	adds	r0, #1
 800b990:	d1ea      	bne.n	800b968 <_printf_float+0x34c>
 800b992:	e69a      	b.n	800b6ca <_printf_float+0xae>
 800b994:	2301      	movs	r3, #1
 800b996:	4642      	mov	r2, r8
 800b998:	4659      	mov	r1, fp
 800b99a:	4628      	mov	r0, r5
 800b99c:	47b0      	blx	r6
 800b99e:	3001      	adds	r0, #1
 800b9a0:	f43f ae93 	beq.w	800b6ca <_printf_float+0xae>
 800b9a4:	3701      	adds	r7, #1
 800b9a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b9aa:	1a9b      	subs	r3, r3, r2
 800b9ac:	eba3 0309 	sub.w	r3, r3, r9
 800b9b0:	42bb      	cmp	r3, r7
 800b9b2:	dcef      	bgt.n	800b994 <_printf_float+0x378>
 800b9b4:	e74d      	b.n	800b852 <_printf_float+0x236>
 800b9b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9b8:	2a01      	cmp	r2, #1
 800b9ba:	dc01      	bgt.n	800b9c0 <_printf_float+0x3a4>
 800b9bc:	07db      	lsls	r3, r3, #31
 800b9be:	d538      	bpl.n	800ba32 <_printf_float+0x416>
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	463a      	mov	r2, r7
 800b9c4:	4659      	mov	r1, fp
 800b9c6:	4628      	mov	r0, r5
 800b9c8:	47b0      	blx	r6
 800b9ca:	3001      	adds	r0, #1
 800b9cc:	f43f ae7d 	beq.w	800b6ca <_printf_float+0xae>
 800b9d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9d4:	4659      	mov	r1, fp
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	47b0      	blx	r6
 800b9da:	3001      	adds	r0, #1
 800b9dc:	f107 0701 	add.w	r7, r7, #1
 800b9e0:	f43f ae73 	beq.w	800b6ca <_printf_float+0xae>
 800b9e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b9e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f103 38ff 	add.w	r8, r3, #4294967295
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	f7f4 ffd9 	bl	80009a8 <__aeabi_dcmpeq>
 800b9f6:	b9c0      	cbnz	r0, 800ba2a <_printf_float+0x40e>
 800b9f8:	4643      	mov	r3, r8
 800b9fa:	463a      	mov	r2, r7
 800b9fc:	4659      	mov	r1, fp
 800b9fe:	4628      	mov	r0, r5
 800ba00:	47b0      	blx	r6
 800ba02:	3001      	adds	r0, #1
 800ba04:	d10d      	bne.n	800ba22 <_printf_float+0x406>
 800ba06:	e660      	b.n	800b6ca <_printf_float+0xae>
 800ba08:	2301      	movs	r3, #1
 800ba0a:	4642      	mov	r2, r8
 800ba0c:	4659      	mov	r1, fp
 800ba0e:	4628      	mov	r0, r5
 800ba10:	47b0      	blx	r6
 800ba12:	3001      	adds	r0, #1
 800ba14:	f43f ae59 	beq.w	800b6ca <_printf_float+0xae>
 800ba18:	3701      	adds	r7, #1
 800ba1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba1c:	3b01      	subs	r3, #1
 800ba1e:	42bb      	cmp	r3, r7
 800ba20:	dcf2      	bgt.n	800ba08 <_printf_float+0x3ec>
 800ba22:	464b      	mov	r3, r9
 800ba24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ba28:	e6e4      	b.n	800b7f4 <_printf_float+0x1d8>
 800ba2a:	2700      	movs	r7, #0
 800ba2c:	f104 081a 	add.w	r8, r4, #26
 800ba30:	e7f3      	b.n	800ba1a <_printf_float+0x3fe>
 800ba32:	2301      	movs	r3, #1
 800ba34:	e7e1      	b.n	800b9fa <_printf_float+0x3de>
 800ba36:	2301      	movs	r3, #1
 800ba38:	4642      	mov	r2, r8
 800ba3a:	4659      	mov	r1, fp
 800ba3c:	4628      	mov	r0, r5
 800ba3e:	47b0      	blx	r6
 800ba40:	3001      	adds	r0, #1
 800ba42:	f43f ae42 	beq.w	800b6ca <_printf_float+0xae>
 800ba46:	3701      	adds	r7, #1
 800ba48:	68e3      	ldr	r3, [r4, #12]
 800ba4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba4c:	1a9b      	subs	r3, r3, r2
 800ba4e:	42bb      	cmp	r3, r7
 800ba50:	dcf1      	bgt.n	800ba36 <_printf_float+0x41a>
 800ba52:	e702      	b.n	800b85a <_printf_float+0x23e>
 800ba54:	2700      	movs	r7, #0
 800ba56:	f104 0819 	add.w	r8, r4, #25
 800ba5a:	e7f5      	b.n	800ba48 <_printf_float+0x42c>
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	f43f ae94 	beq.w	800b78a <_printf_float+0x16e>
 800ba62:	f04f 0c00 	mov.w	ip, #0
 800ba66:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800ba6a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800ba6e:	6022      	str	r2, [r4, #0]
 800ba70:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800ba74:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800ba78:	9300      	str	r3, [sp, #0]
 800ba7a:	463a      	mov	r2, r7
 800ba7c:	464b      	mov	r3, r9
 800ba7e:	4628      	mov	r0, r5
 800ba80:	f7ff fd3a 	bl	800b4f8 <__cvt>
 800ba84:	4607      	mov	r7, r0
 800ba86:	e64f      	b.n	800b728 <_printf_float+0x10c>

0800ba88 <_printf_common>:
 800ba88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba8c:	4691      	mov	r9, r2
 800ba8e:	461f      	mov	r7, r3
 800ba90:	688a      	ldr	r2, [r1, #8]
 800ba92:	690b      	ldr	r3, [r1, #16]
 800ba94:	4606      	mov	r6, r0
 800ba96:	4293      	cmp	r3, r2
 800ba98:	bfb8      	it	lt
 800ba9a:	4613      	movlt	r3, r2
 800ba9c:	f8c9 3000 	str.w	r3, [r9]
 800baa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800baa4:	460c      	mov	r4, r1
 800baa6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800baaa:	b112      	cbz	r2, 800bab2 <_printf_common+0x2a>
 800baac:	3301      	adds	r3, #1
 800baae:	f8c9 3000 	str.w	r3, [r9]
 800bab2:	6823      	ldr	r3, [r4, #0]
 800bab4:	0699      	lsls	r1, r3, #26
 800bab6:	bf42      	ittt	mi
 800bab8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800babc:	3302      	addmi	r3, #2
 800babe:	f8c9 3000 	strmi.w	r3, [r9]
 800bac2:	6825      	ldr	r5, [r4, #0]
 800bac4:	f015 0506 	ands.w	r5, r5, #6
 800bac8:	d107      	bne.n	800bada <_printf_common+0x52>
 800baca:	f104 0a19 	add.w	sl, r4, #25
 800bace:	68e3      	ldr	r3, [r4, #12]
 800bad0:	f8d9 2000 	ldr.w	r2, [r9]
 800bad4:	1a9b      	subs	r3, r3, r2
 800bad6:	42ab      	cmp	r3, r5
 800bad8:	dc29      	bgt.n	800bb2e <_printf_common+0xa6>
 800bada:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bade:	6822      	ldr	r2, [r4, #0]
 800bae0:	3300      	adds	r3, #0
 800bae2:	bf18      	it	ne
 800bae4:	2301      	movne	r3, #1
 800bae6:	0692      	lsls	r2, r2, #26
 800bae8:	d42e      	bmi.n	800bb48 <_printf_common+0xc0>
 800baea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800baee:	4639      	mov	r1, r7
 800baf0:	4630      	mov	r0, r6
 800baf2:	47c0      	blx	r8
 800baf4:	3001      	adds	r0, #1
 800baf6:	d021      	beq.n	800bb3c <_printf_common+0xb4>
 800baf8:	6823      	ldr	r3, [r4, #0]
 800bafa:	68e5      	ldr	r5, [r4, #12]
 800bafc:	f003 0306 	and.w	r3, r3, #6
 800bb00:	2b04      	cmp	r3, #4
 800bb02:	bf18      	it	ne
 800bb04:	2500      	movne	r5, #0
 800bb06:	f8d9 2000 	ldr.w	r2, [r9]
 800bb0a:	f04f 0900 	mov.w	r9, #0
 800bb0e:	bf08      	it	eq
 800bb10:	1aad      	subeq	r5, r5, r2
 800bb12:	68a3      	ldr	r3, [r4, #8]
 800bb14:	6922      	ldr	r2, [r4, #16]
 800bb16:	bf08      	it	eq
 800bb18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	bfc4      	itt	gt
 800bb20:	1a9b      	subgt	r3, r3, r2
 800bb22:	18ed      	addgt	r5, r5, r3
 800bb24:	341a      	adds	r4, #26
 800bb26:	454d      	cmp	r5, r9
 800bb28:	d11a      	bne.n	800bb60 <_printf_common+0xd8>
 800bb2a:	2000      	movs	r0, #0
 800bb2c:	e008      	b.n	800bb40 <_printf_common+0xb8>
 800bb2e:	2301      	movs	r3, #1
 800bb30:	4652      	mov	r2, sl
 800bb32:	4639      	mov	r1, r7
 800bb34:	4630      	mov	r0, r6
 800bb36:	47c0      	blx	r8
 800bb38:	3001      	adds	r0, #1
 800bb3a:	d103      	bne.n	800bb44 <_printf_common+0xbc>
 800bb3c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb44:	3501      	adds	r5, #1
 800bb46:	e7c2      	b.n	800bace <_printf_common+0x46>
 800bb48:	2030      	movs	r0, #48	; 0x30
 800bb4a:	18e1      	adds	r1, r4, r3
 800bb4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb50:	1c5a      	adds	r2, r3, #1
 800bb52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb56:	4422      	add	r2, r4
 800bb58:	3302      	adds	r3, #2
 800bb5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb5e:	e7c4      	b.n	800baea <_printf_common+0x62>
 800bb60:	2301      	movs	r3, #1
 800bb62:	4622      	mov	r2, r4
 800bb64:	4639      	mov	r1, r7
 800bb66:	4630      	mov	r0, r6
 800bb68:	47c0      	blx	r8
 800bb6a:	3001      	adds	r0, #1
 800bb6c:	d0e6      	beq.n	800bb3c <_printf_common+0xb4>
 800bb6e:	f109 0901 	add.w	r9, r9, #1
 800bb72:	e7d8      	b.n	800bb26 <_printf_common+0x9e>

0800bb74 <_printf_i>:
 800bb74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bb7c:	460c      	mov	r4, r1
 800bb7e:	7e09      	ldrb	r1, [r1, #24]
 800bb80:	b085      	sub	sp, #20
 800bb82:	296e      	cmp	r1, #110	; 0x6e
 800bb84:	4617      	mov	r7, r2
 800bb86:	4606      	mov	r6, r0
 800bb88:	4698      	mov	r8, r3
 800bb8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb8c:	f000 80b3 	beq.w	800bcf6 <_printf_i+0x182>
 800bb90:	d822      	bhi.n	800bbd8 <_printf_i+0x64>
 800bb92:	2963      	cmp	r1, #99	; 0x63
 800bb94:	d036      	beq.n	800bc04 <_printf_i+0x90>
 800bb96:	d80a      	bhi.n	800bbae <_printf_i+0x3a>
 800bb98:	2900      	cmp	r1, #0
 800bb9a:	f000 80b9 	beq.w	800bd10 <_printf_i+0x19c>
 800bb9e:	2958      	cmp	r1, #88	; 0x58
 800bba0:	f000 8083 	beq.w	800bcaa <_printf_i+0x136>
 800bba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bba8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bbac:	e032      	b.n	800bc14 <_printf_i+0xa0>
 800bbae:	2964      	cmp	r1, #100	; 0x64
 800bbb0:	d001      	beq.n	800bbb6 <_printf_i+0x42>
 800bbb2:	2969      	cmp	r1, #105	; 0x69
 800bbb4:	d1f6      	bne.n	800bba4 <_printf_i+0x30>
 800bbb6:	6820      	ldr	r0, [r4, #0]
 800bbb8:	6813      	ldr	r3, [r2, #0]
 800bbba:	0605      	lsls	r5, r0, #24
 800bbbc:	f103 0104 	add.w	r1, r3, #4
 800bbc0:	d52a      	bpl.n	800bc18 <_printf_i+0xa4>
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	6011      	str	r1, [r2, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	da03      	bge.n	800bbd2 <_printf_i+0x5e>
 800bbca:	222d      	movs	r2, #45	; 0x2d
 800bbcc:	425b      	negs	r3, r3
 800bbce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bbd2:	486f      	ldr	r0, [pc, #444]	; (800bd90 <_printf_i+0x21c>)
 800bbd4:	220a      	movs	r2, #10
 800bbd6:	e039      	b.n	800bc4c <_printf_i+0xd8>
 800bbd8:	2973      	cmp	r1, #115	; 0x73
 800bbda:	f000 809d 	beq.w	800bd18 <_printf_i+0x1a4>
 800bbde:	d808      	bhi.n	800bbf2 <_printf_i+0x7e>
 800bbe0:	296f      	cmp	r1, #111	; 0x6f
 800bbe2:	d020      	beq.n	800bc26 <_printf_i+0xb2>
 800bbe4:	2970      	cmp	r1, #112	; 0x70
 800bbe6:	d1dd      	bne.n	800bba4 <_printf_i+0x30>
 800bbe8:	6823      	ldr	r3, [r4, #0]
 800bbea:	f043 0320 	orr.w	r3, r3, #32
 800bbee:	6023      	str	r3, [r4, #0]
 800bbf0:	e003      	b.n	800bbfa <_printf_i+0x86>
 800bbf2:	2975      	cmp	r1, #117	; 0x75
 800bbf4:	d017      	beq.n	800bc26 <_printf_i+0xb2>
 800bbf6:	2978      	cmp	r1, #120	; 0x78
 800bbf8:	d1d4      	bne.n	800bba4 <_printf_i+0x30>
 800bbfa:	2378      	movs	r3, #120	; 0x78
 800bbfc:	4865      	ldr	r0, [pc, #404]	; (800bd94 <_printf_i+0x220>)
 800bbfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc02:	e055      	b.n	800bcb0 <_printf_i+0x13c>
 800bc04:	6813      	ldr	r3, [r2, #0]
 800bc06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc0a:	1d19      	adds	r1, r3, #4
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	6011      	str	r1, [r2, #0]
 800bc10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc14:	2301      	movs	r3, #1
 800bc16:	e08c      	b.n	800bd32 <_printf_i+0x1be>
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc1e:	6011      	str	r1, [r2, #0]
 800bc20:	bf18      	it	ne
 800bc22:	b21b      	sxthne	r3, r3
 800bc24:	e7cf      	b.n	800bbc6 <_printf_i+0x52>
 800bc26:	6813      	ldr	r3, [r2, #0]
 800bc28:	6825      	ldr	r5, [r4, #0]
 800bc2a:	1d18      	adds	r0, r3, #4
 800bc2c:	6010      	str	r0, [r2, #0]
 800bc2e:	0628      	lsls	r0, r5, #24
 800bc30:	d501      	bpl.n	800bc36 <_printf_i+0xc2>
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	e002      	b.n	800bc3c <_printf_i+0xc8>
 800bc36:	0668      	lsls	r0, r5, #25
 800bc38:	d5fb      	bpl.n	800bc32 <_printf_i+0xbe>
 800bc3a:	881b      	ldrh	r3, [r3, #0]
 800bc3c:	296f      	cmp	r1, #111	; 0x6f
 800bc3e:	bf14      	ite	ne
 800bc40:	220a      	movne	r2, #10
 800bc42:	2208      	moveq	r2, #8
 800bc44:	4852      	ldr	r0, [pc, #328]	; (800bd90 <_printf_i+0x21c>)
 800bc46:	2100      	movs	r1, #0
 800bc48:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc4c:	6865      	ldr	r5, [r4, #4]
 800bc4e:	2d00      	cmp	r5, #0
 800bc50:	60a5      	str	r5, [r4, #8]
 800bc52:	f2c0 8095 	blt.w	800bd80 <_printf_i+0x20c>
 800bc56:	6821      	ldr	r1, [r4, #0]
 800bc58:	f021 0104 	bic.w	r1, r1, #4
 800bc5c:	6021      	str	r1, [r4, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d13d      	bne.n	800bcde <_printf_i+0x16a>
 800bc62:	2d00      	cmp	r5, #0
 800bc64:	f040 808e 	bne.w	800bd84 <_printf_i+0x210>
 800bc68:	4665      	mov	r5, ip
 800bc6a:	2a08      	cmp	r2, #8
 800bc6c:	d10b      	bne.n	800bc86 <_printf_i+0x112>
 800bc6e:	6823      	ldr	r3, [r4, #0]
 800bc70:	07db      	lsls	r3, r3, #31
 800bc72:	d508      	bpl.n	800bc86 <_printf_i+0x112>
 800bc74:	6923      	ldr	r3, [r4, #16]
 800bc76:	6862      	ldr	r2, [r4, #4]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	bfde      	ittt	le
 800bc7c:	2330      	movle	r3, #48	; 0x30
 800bc7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc82:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bc86:	ebac 0305 	sub.w	r3, ip, r5
 800bc8a:	6123      	str	r3, [r4, #16]
 800bc8c:	f8cd 8000 	str.w	r8, [sp]
 800bc90:	463b      	mov	r3, r7
 800bc92:	aa03      	add	r2, sp, #12
 800bc94:	4621      	mov	r1, r4
 800bc96:	4630      	mov	r0, r6
 800bc98:	f7ff fef6 	bl	800ba88 <_printf_common>
 800bc9c:	3001      	adds	r0, #1
 800bc9e:	d14d      	bne.n	800bd3c <_printf_i+0x1c8>
 800bca0:	f04f 30ff 	mov.w	r0, #4294967295
 800bca4:	b005      	add	sp, #20
 800bca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcaa:	4839      	ldr	r0, [pc, #228]	; (800bd90 <_printf_i+0x21c>)
 800bcac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bcb0:	6813      	ldr	r3, [r2, #0]
 800bcb2:	6821      	ldr	r1, [r4, #0]
 800bcb4:	1d1d      	adds	r5, r3, #4
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	6015      	str	r5, [r2, #0]
 800bcba:	060a      	lsls	r2, r1, #24
 800bcbc:	d50b      	bpl.n	800bcd6 <_printf_i+0x162>
 800bcbe:	07ca      	lsls	r2, r1, #31
 800bcc0:	bf44      	itt	mi
 800bcc2:	f041 0120 	orrmi.w	r1, r1, #32
 800bcc6:	6021      	strmi	r1, [r4, #0]
 800bcc8:	b91b      	cbnz	r3, 800bcd2 <_printf_i+0x15e>
 800bcca:	6822      	ldr	r2, [r4, #0]
 800bccc:	f022 0220 	bic.w	r2, r2, #32
 800bcd0:	6022      	str	r2, [r4, #0]
 800bcd2:	2210      	movs	r2, #16
 800bcd4:	e7b7      	b.n	800bc46 <_printf_i+0xd2>
 800bcd6:	064d      	lsls	r5, r1, #25
 800bcd8:	bf48      	it	mi
 800bcda:	b29b      	uxthmi	r3, r3
 800bcdc:	e7ef      	b.n	800bcbe <_printf_i+0x14a>
 800bcde:	4665      	mov	r5, ip
 800bce0:	fbb3 f1f2 	udiv	r1, r3, r2
 800bce4:	fb02 3311 	mls	r3, r2, r1, r3
 800bce8:	5cc3      	ldrb	r3, [r0, r3]
 800bcea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bcee:	460b      	mov	r3, r1
 800bcf0:	2900      	cmp	r1, #0
 800bcf2:	d1f5      	bne.n	800bce0 <_printf_i+0x16c>
 800bcf4:	e7b9      	b.n	800bc6a <_printf_i+0xf6>
 800bcf6:	6813      	ldr	r3, [r2, #0]
 800bcf8:	6825      	ldr	r5, [r4, #0]
 800bcfa:	1d18      	adds	r0, r3, #4
 800bcfc:	6961      	ldr	r1, [r4, #20]
 800bcfe:	6010      	str	r0, [r2, #0]
 800bd00:	0628      	lsls	r0, r5, #24
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	d501      	bpl.n	800bd0a <_printf_i+0x196>
 800bd06:	6019      	str	r1, [r3, #0]
 800bd08:	e002      	b.n	800bd10 <_printf_i+0x19c>
 800bd0a:	066a      	lsls	r2, r5, #25
 800bd0c:	d5fb      	bpl.n	800bd06 <_printf_i+0x192>
 800bd0e:	8019      	strh	r1, [r3, #0]
 800bd10:	2300      	movs	r3, #0
 800bd12:	4665      	mov	r5, ip
 800bd14:	6123      	str	r3, [r4, #16]
 800bd16:	e7b9      	b.n	800bc8c <_printf_i+0x118>
 800bd18:	6813      	ldr	r3, [r2, #0]
 800bd1a:	1d19      	adds	r1, r3, #4
 800bd1c:	6011      	str	r1, [r2, #0]
 800bd1e:	681d      	ldr	r5, [r3, #0]
 800bd20:	6862      	ldr	r2, [r4, #4]
 800bd22:	2100      	movs	r1, #0
 800bd24:	4628      	mov	r0, r5
 800bd26:	f000 fee5 	bl	800caf4 <memchr>
 800bd2a:	b108      	cbz	r0, 800bd30 <_printf_i+0x1bc>
 800bd2c:	1b40      	subs	r0, r0, r5
 800bd2e:	6060      	str	r0, [r4, #4]
 800bd30:	6863      	ldr	r3, [r4, #4]
 800bd32:	6123      	str	r3, [r4, #16]
 800bd34:	2300      	movs	r3, #0
 800bd36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd3a:	e7a7      	b.n	800bc8c <_printf_i+0x118>
 800bd3c:	6923      	ldr	r3, [r4, #16]
 800bd3e:	462a      	mov	r2, r5
 800bd40:	4639      	mov	r1, r7
 800bd42:	4630      	mov	r0, r6
 800bd44:	47c0      	blx	r8
 800bd46:	3001      	adds	r0, #1
 800bd48:	d0aa      	beq.n	800bca0 <_printf_i+0x12c>
 800bd4a:	6823      	ldr	r3, [r4, #0]
 800bd4c:	079b      	lsls	r3, r3, #30
 800bd4e:	d413      	bmi.n	800bd78 <_printf_i+0x204>
 800bd50:	68e0      	ldr	r0, [r4, #12]
 800bd52:	9b03      	ldr	r3, [sp, #12]
 800bd54:	4298      	cmp	r0, r3
 800bd56:	bfb8      	it	lt
 800bd58:	4618      	movlt	r0, r3
 800bd5a:	e7a3      	b.n	800bca4 <_printf_i+0x130>
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	464a      	mov	r2, r9
 800bd60:	4639      	mov	r1, r7
 800bd62:	4630      	mov	r0, r6
 800bd64:	47c0      	blx	r8
 800bd66:	3001      	adds	r0, #1
 800bd68:	d09a      	beq.n	800bca0 <_printf_i+0x12c>
 800bd6a:	3501      	adds	r5, #1
 800bd6c:	68e3      	ldr	r3, [r4, #12]
 800bd6e:	9a03      	ldr	r2, [sp, #12]
 800bd70:	1a9b      	subs	r3, r3, r2
 800bd72:	42ab      	cmp	r3, r5
 800bd74:	dcf2      	bgt.n	800bd5c <_printf_i+0x1e8>
 800bd76:	e7eb      	b.n	800bd50 <_printf_i+0x1dc>
 800bd78:	2500      	movs	r5, #0
 800bd7a:	f104 0919 	add.w	r9, r4, #25
 800bd7e:	e7f5      	b.n	800bd6c <_printf_i+0x1f8>
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d1ac      	bne.n	800bcde <_printf_i+0x16a>
 800bd84:	7803      	ldrb	r3, [r0, #0]
 800bd86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd8e:	e76c      	b.n	800bc6a <_printf_i+0xf6>
 800bd90:	0800f7a2 	.word	0x0800f7a2
 800bd94:	0800f7b3 	.word	0x0800f7b3

0800bd98 <rand>:
 800bd98:	b538      	push	{r3, r4, r5, lr}
 800bd9a:	4b13      	ldr	r3, [pc, #76]	; (800bde8 <rand+0x50>)
 800bd9c:	681c      	ldr	r4, [r3, #0]
 800bd9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bda0:	b97b      	cbnz	r3, 800bdc2 <rand+0x2a>
 800bda2:	2018      	movs	r0, #24
 800bda4:	f000 fe9e 	bl	800cae4 <malloc>
 800bda8:	4a10      	ldr	r2, [pc, #64]	; (800bdec <rand+0x54>)
 800bdaa:	4b11      	ldr	r3, [pc, #68]	; (800bdf0 <rand+0x58>)
 800bdac:	63a0      	str	r0, [r4, #56]	; 0x38
 800bdae:	e9c0 2300 	strd	r2, r3, [r0]
 800bdb2:	4b10      	ldr	r3, [pc, #64]	; (800bdf4 <rand+0x5c>)
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	6083      	str	r3, [r0, #8]
 800bdb8:	230b      	movs	r3, #11
 800bdba:	8183      	strh	r3, [r0, #12]
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800bdc2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bdc4:	480c      	ldr	r0, [pc, #48]	; (800bdf8 <rand+0x60>)
 800bdc6:	690a      	ldr	r2, [r1, #16]
 800bdc8:	694b      	ldr	r3, [r1, #20]
 800bdca:	4350      	muls	r0, r2
 800bdcc:	4c0b      	ldr	r4, [pc, #44]	; (800bdfc <rand+0x64>)
 800bdce:	fb04 0003 	mla	r0, r4, r3, r0
 800bdd2:	fba2 2304 	umull	r2, r3, r2, r4
 800bdd6:	4403      	add	r3, r0
 800bdd8:	1c54      	adds	r4, r2, #1
 800bdda:	f143 0500 	adc.w	r5, r3, #0
 800bdde:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800bde2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800bde6:	bd38      	pop	{r3, r4, r5, pc}
 800bde8:	20000194 	.word	0x20000194
 800bdec:	abcd330e 	.word	0xabcd330e
 800bdf0:	e66d1234 	.word	0xe66d1234
 800bdf4:	0005deec 	.word	0x0005deec
 800bdf8:	5851f42d 	.word	0x5851f42d
 800bdfc:	4c957f2d 	.word	0x4c957f2d

0800be00 <siprintf>:
 800be00:	b40e      	push	{r1, r2, r3}
 800be02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800be06:	b500      	push	{lr}
 800be08:	b09c      	sub	sp, #112	; 0x70
 800be0a:	ab1d      	add	r3, sp, #116	; 0x74
 800be0c:	9002      	str	r0, [sp, #8]
 800be0e:	9006      	str	r0, [sp, #24]
 800be10:	9107      	str	r1, [sp, #28]
 800be12:	9104      	str	r1, [sp, #16]
 800be14:	4808      	ldr	r0, [pc, #32]	; (800be38 <siprintf+0x38>)
 800be16:	4909      	ldr	r1, [pc, #36]	; (800be3c <siprintf+0x3c>)
 800be18:	f853 2b04 	ldr.w	r2, [r3], #4
 800be1c:	9105      	str	r1, [sp, #20]
 800be1e:	6800      	ldr	r0, [r0, #0]
 800be20:	a902      	add	r1, sp, #8
 800be22:	9301      	str	r3, [sp, #4]
 800be24:	f001 fa6a 	bl	800d2fc <_svfiprintf_r>
 800be28:	2200      	movs	r2, #0
 800be2a:	9b02      	ldr	r3, [sp, #8]
 800be2c:	701a      	strb	r2, [r3, #0]
 800be2e:	b01c      	add	sp, #112	; 0x70
 800be30:	f85d eb04 	ldr.w	lr, [sp], #4
 800be34:	b003      	add	sp, #12
 800be36:	4770      	bx	lr
 800be38:	20000194 	.word	0x20000194
 800be3c:	ffff0208 	.word	0xffff0208

0800be40 <quorem>:
 800be40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be44:	6903      	ldr	r3, [r0, #16]
 800be46:	690c      	ldr	r4, [r1, #16]
 800be48:	4680      	mov	r8, r0
 800be4a:	42a3      	cmp	r3, r4
 800be4c:	f2c0 8084 	blt.w	800bf58 <quorem+0x118>
 800be50:	3c01      	subs	r4, #1
 800be52:	f101 0714 	add.w	r7, r1, #20
 800be56:	f100 0614 	add.w	r6, r0, #20
 800be5a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800be5e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800be62:	3501      	adds	r5, #1
 800be64:	fbb0 f5f5 	udiv	r5, r0, r5
 800be68:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800be6c:	eb06 030c 	add.w	r3, r6, ip
 800be70:	eb07 090c 	add.w	r9, r7, ip
 800be74:	9301      	str	r3, [sp, #4]
 800be76:	b39d      	cbz	r5, 800bee0 <quorem+0xa0>
 800be78:	f04f 0a00 	mov.w	sl, #0
 800be7c:	4638      	mov	r0, r7
 800be7e:	46b6      	mov	lr, r6
 800be80:	46d3      	mov	fp, sl
 800be82:	f850 2b04 	ldr.w	r2, [r0], #4
 800be86:	b293      	uxth	r3, r2
 800be88:	fb05 a303 	mla	r3, r5, r3, sl
 800be8c:	0c12      	lsrs	r2, r2, #16
 800be8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be92:	fb05 a202 	mla	r2, r5, r2, sl
 800be96:	b29b      	uxth	r3, r3
 800be98:	ebab 0303 	sub.w	r3, fp, r3
 800be9c:	f8de b000 	ldr.w	fp, [lr]
 800bea0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800bea4:	fa1f fb8b 	uxth.w	fp, fp
 800bea8:	445b      	add	r3, fp
 800beaa:	fa1f fb82 	uxth.w	fp, r2
 800beae:	f8de 2000 	ldr.w	r2, [lr]
 800beb2:	4581      	cmp	r9, r0
 800beb4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800beb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bec2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800bec6:	f84e 3b04 	str.w	r3, [lr], #4
 800beca:	d2da      	bcs.n	800be82 <quorem+0x42>
 800becc:	f856 300c 	ldr.w	r3, [r6, ip]
 800bed0:	b933      	cbnz	r3, 800bee0 <quorem+0xa0>
 800bed2:	9b01      	ldr	r3, [sp, #4]
 800bed4:	3b04      	subs	r3, #4
 800bed6:	429e      	cmp	r6, r3
 800bed8:	461a      	mov	r2, r3
 800beda:	d331      	bcc.n	800bf40 <quorem+0x100>
 800bedc:	f8c8 4010 	str.w	r4, [r8, #16]
 800bee0:	4640      	mov	r0, r8
 800bee2:	f001 f835 	bl	800cf50 <__mcmp>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	db26      	blt.n	800bf38 <quorem+0xf8>
 800beea:	4630      	mov	r0, r6
 800beec:	f04f 0c00 	mov.w	ip, #0
 800bef0:	3501      	adds	r5, #1
 800bef2:	f857 1b04 	ldr.w	r1, [r7], #4
 800bef6:	f8d0 e000 	ldr.w	lr, [r0]
 800befa:	b28b      	uxth	r3, r1
 800befc:	ebac 0303 	sub.w	r3, ip, r3
 800bf00:	fa1f f28e 	uxth.w	r2, lr
 800bf04:	4413      	add	r3, r2
 800bf06:	0c0a      	lsrs	r2, r1, #16
 800bf08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bf0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf16:	45b9      	cmp	r9, r7
 800bf18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bf1c:	f840 3b04 	str.w	r3, [r0], #4
 800bf20:	d2e7      	bcs.n	800bef2 <quorem+0xb2>
 800bf22:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800bf26:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800bf2a:	b92a      	cbnz	r2, 800bf38 <quorem+0xf8>
 800bf2c:	3b04      	subs	r3, #4
 800bf2e:	429e      	cmp	r6, r3
 800bf30:	461a      	mov	r2, r3
 800bf32:	d30b      	bcc.n	800bf4c <quorem+0x10c>
 800bf34:	f8c8 4010 	str.w	r4, [r8, #16]
 800bf38:	4628      	mov	r0, r5
 800bf3a:	b003      	add	sp, #12
 800bf3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf40:	6812      	ldr	r2, [r2, #0]
 800bf42:	3b04      	subs	r3, #4
 800bf44:	2a00      	cmp	r2, #0
 800bf46:	d1c9      	bne.n	800bedc <quorem+0x9c>
 800bf48:	3c01      	subs	r4, #1
 800bf4a:	e7c4      	b.n	800bed6 <quorem+0x96>
 800bf4c:	6812      	ldr	r2, [r2, #0]
 800bf4e:	3b04      	subs	r3, #4
 800bf50:	2a00      	cmp	r2, #0
 800bf52:	d1ef      	bne.n	800bf34 <quorem+0xf4>
 800bf54:	3c01      	subs	r4, #1
 800bf56:	e7ea      	b.n	800bf2e <quorem+0xee>
 800bf58:	2000      	movs	r0, #0
 800bf5a:	e7ee      	b.n	800bf3a <quorem+0xfa>
 800bf5c:	0000      	movs	r0, r0
	...

0800bf60 <_dtoa_r>:
 800bf60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf64:	4616      	mov	r6, r2
 800bf66:	461f      	mov	r7, r3
 800bf68:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bf6a:	b095      	sub	sp, #84	; 0x54
 800bf6c:	4604      	mov	r4, r0
 800bf6e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800bf72:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bf76:	b93d      	cbnz	r5, 800bf88 <_dtoa_r+0x28>
 800bf78:	2010      	movs	r0, #16
 800bf7a:	f000 fdb3 	bl	800cae4 <malloc>
 800bf7e:	6260      	str	r0, [r4, #36]	; 0x24
 800bf80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bf84:	6005      	str	r5, [r0, #0]
 800bf86:	60c5      	str	r5, [r0, #12]
 800bf88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf8a:	6819      	ldr	r1, [r3, #0]
 800bf8c:	b151      	cbz	r1, 800bfa4 <_dtoa_r+0x44>
 800bf8e:	685a      	ldr	r2, [r3, #4]
 800bf90:	2301      	movs	r3, #1
 800bf92:	4093      	lsls	r3, r2
 800bf94:	604a      	str	r2, [r1, #4]
 800bf96:	608b      	str	r3, [r1, #8]
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f000 fdf8 	bl	800cb8e <_Bfree>
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfa2:	601a      	str	r2, [r3, #0]
 800bfa4:	1e3b      	subs	r3, r7, #0
 800bfa6:	bfaf      	iteee	ge
 800bfa8:	2300      	movge	r3, #0
 800bfaa:	2201      	movlt	r2, #1
 800bfac:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bfb0:	9303      	strlt	r3, [sp, #12]
 800bfb2:	bfac      	ite	ge
 800bfb4:	f8c8 3000 	strge.w	r3, [r8]
 800bfb8:	f8c8 2000 	strlt.w	r2, [r8]
 800bfbc:	4bae      	ldr	r3, [pc, #696]	; (800c278 <_dtoa_r+0x318>)
 800bfbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bfc2:	ea33 0308 	bics.w	r3, r3, r8
 800bfc6:	d11b      	bne.n	800c000 <_dtoa_r+0xa0>
 800bfc8:	f242 730f 	movw	r3, #9999	; 0x270f
 800bfcc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bfce:	6013      	str	r3, [r2, #0]
 800bfd0:	9b02      	ldr	r3, [sp, #8]
 800bfd2:	b923      	cbnz	r3, 800bfde <_dtoa_r+0x7e>
 800bfd4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	f000 8545 	beq.w	800ca68 <_dtoa_r+0xb08>
 800bfde:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bfe0:	b953      	cbnz	r3, 800bff8 <_dtoa_r+0x98>
 800bfe2:	4ba6      	ldr	r3, [pc, #664]	; (800c27c <_dtoa_r+0x31c>)
 800bfe4:	e021      	b.n	800c02a <_dtoa_r+0xca>
 800bfe6:	4ba6      	ldr	r3, [pc, #664]	; (800c280 <_dtoa_r+0x320>)
 800bfe8:	9306      	str	r3, [sp, #24]
 800bfea:	3308      	adds	r3, #8
 800bfec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bfee:	6013      	str	r3, [r2, #0]
 800bff0:	9806      	ldr	r0, [sp, #24]
 800bff2:	b015      	add	sp, #84	; 0x54
 800bff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bff8:	4ba0      	ldr	r3, [pc, #640]	; (800c27c <_dtoa_r+0x31c>)
 800bffa:	9306      	str	r3, [sp, #24]
 800bffc:	3303      	adds	r3, #3
 800bffe:	e7f5      	b.n	800bfec <_dtoa_r+0x8c>
 800c000:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c004:	2200      	movs	r2, #0
 800c006:	2300      	movs	r3, #0
 800c008:	4630      	mov	r0, r6
 800c00a:	4639      	mov	r1, r7
 800c00c:	f7f4 fccc 	bl	80009a8 <__aeabi_dcmpeq>
 800c010:	4682      	mov	sl, r0
 800c012:	b160      	cbz	r0, 800c02e <_dtoa_r+0xce>
 800c014:	2301      	movs	r3, #1
 800c016:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c018:	6013      	str	r3, [r2, #0]
 800c01a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f000 8520 	beq.w	800ca62 <_dtoa_r+0xb02>
 800c022:	4b98      	ldr	r3, [pc, #608]	; (800c284 <_dtoa_r+0x324>)
 800c024:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c026:	6013      	str	r3, [r2, #0]
 800c028:	3b01      	subs	r3, #1
 800c02a:	9306      	str	r3, [sp, #24]
 800c02c:	e7e0      	b.n	800bff0 <_dtoa_r+0x90>
 800c02e:	ab12      	add	r3, sp, #72	; 0x48
 800c030:	9301      	str	r3, [sp, #4]
 800c032:	ab13      	add	r3, sp, #76	; 0x4c
 800c034:	9300      	str	r3, [sp, #0]
 800c036:	4632      	mov	r2, r6
 800c038:	463b      	mov	r3, r7
 800c03a:	4620      	mov	r0, r4
 800c03c:	f001 f800 	bl	800d040 <__d2b>
 800c040:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c044:	4683      	mov	fp, r0
 800c046:	2d00      	cmp	r5, #0
 800c048:	d07d      	beq.n	800c146 <_dtoa_r+0x1e6>
 800c04a:	46b0      	mov	r8, r6
 800c04c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c050:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800c054:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800c058:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c05c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800c060:	2200      	movs	r2, #0
 800c062:	4b89      	ldr	r3, [pc, #548]	; (800c288 <_dtoa_r+0x328>)
 800c064:	4640      	mov	r0, r8
 800c066:	4649      	mov	r1, r9
 800c068:	f7f4 f87e 	bl	8000168 <__aeabi_dsub>
 800c06c:	a37c      	add	r3, pc, #496	; (adr r3, 800c260 <_dtoa_r+0x300>)
 800c06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c072:	f7f4 fa31 	bl	80004d8 <__aeabi_dmul>
 800c076:	a37c      	add	r3, pc, #496	; (adr r3, 800c268 <_dtoa_r+0x308>)
 800c078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07c:	f7f4 f876 	bl	800016c <__adddf3>
 800c080:	4606      	mov	r6, r0
 800c082:	4628      	mov	r0, r5
 800c084:	460f      	mov	r7, r1
 800c086:	f7f4 f9bd 	bl	8000404 <__aeabi_i2d>
 800c08a:	a379      	add	r3, pc, #484	; (adr r3, 800c270 <_dtoa_r+0x310>)
 800c08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c090:	f7f4 fa22 	bl	80004d8 <__aeabi_dmul>
 800c094:	4602      	mov	r2, r0
 800c096:	460b      	mov	r3, r1
 800c098:	4630      	mov	r0, r6
 800c09a:	4639      	mov	r1, r7
 800c09c:	f7f4 f866 	bl	800016c <__adddf3>
 800c0a0:	4606      	mov	r6, r0
 800c0a2:	460f      	mov	r7, r1
 800c0a4:	f7f4 fcc8 	bl	8000a38 <__aeabi_d2iz>
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	4682      	mov	sl, r0
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	4630      	mov	r0, r6
 800c0b0:	4639      	mov	r1, r7
 800c0b2:	f7f4 fc83 	bl	80009bc <__aeabi_dcmplt>
 800c0b6:	b148      	cbz	r0, 800c0cc <_dtoa_r+0x16c>
 800c0b8:	4650      	mov	r0, sl
 800c0ba:	f7f4 f9a3 	bl	8000404 <__aeabi_i2d>
 800c0be:	4632      	mov	r2, r6
 800c0c0:	463b      	mov	r3, r7
 800c0c2:	f7f4 fc71 	bl	80009a8 <__aeabi_dcmpeq>
 800c0c6:	b908      	cbnz	r0, 800c0cc <_dtoa_r+0x16c>
 800c0c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0cc:	f1ba 0f16 	cmp.w	sl, #22
 800c0d0:	d85a      	bhi.n	800c188 <_dtoa_r+0x228>
 800c0d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0d6:	496d      	ldr	r1, [pc, #436]	; (800c28c <_dtoa_r+0x32c>)
 800c0d8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c0dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0e0:	f7f4 fc8a 	bl	80009f8 <__aeabi_dcmpgt>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d051      	beq.n	800c18c <_dtoa_r+0x22c>
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0ee:	930d      	str	r3, [sp, #52]	; 0x34
 800c0f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c0f2:	1b5d      	subs	r5, r3, r5
 800c0f4:	1e6b      	subs	r3, r5, #1
 800c0f6:	9307      	str	r3, [sp, #28]
 800c0f8:	bf43      	ittte	mi
 800c0fa:	2300      	movmi	r3, #0
 800c0fc:	f1c5 0901 	rsbmi	r9, r5, #1
 800c100:	9307      	strmi	r3, [sp, #28]
 800c102:	f04f 0900 	movpl.w	r9, #0
 800c106:	f1ba 0f00 	cmp.w	sl, #0
 800c10a:	db41      	blt.n	800c190 <_dtoa_r+0x230>
 800c10c:	9b07      	ldr	r3, [sp, #28]
 800c10e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800c112:	4453      	add	r3, sl
 800c114:	9307      	str	r3, [sp, #28]
 800c116:	2300      	movs	r3, #0
 800c118:	9308      	str	r3, [sp, #32]
 800c11a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c11c:	2b09      	cmp	r3, #9
 800c11e:	f200 808f 	bhi.w	800c240 <_dtoa_r+0x2e0>
 800c122:	2b05      	cmp	r3, #5
 800c124:	bfc4      	itt	gt
 800c126:	3b04      	subgt	r3, #4
 800c128:	931e      	strgt	r3, [sp, #120]	; 0x78
 800c12a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c12c:	bfc8      	it	gt
 800c12e:	2500      	movgt	r5, #0
 800c130:	f1a3 0302 	sub.w	r3, r3, #2
 800c134:	bfd8      	it	le
 800c136:	2501      	movle	r5, #1
 800c138:	2b03      	cmp	r3, #3
 800c13a:	f200 808d 	bhi.w	800c258 <_dtoa_r+0x2f8>
 800c13e:	e8df f003 	tbb	[pc, r3]
 800c142:	7d7b      	.short	0x7d7b
 800c144:	6f2f      	.short	0x6f2f
 800c146:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c14a:	441d      	add	r5, r3
 800c14c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c150:	2820      	cmp	r0, #32
 800c152:	dd13      	ble.n	800c17c <_dtoa_r+0x21c>
 800c154:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c158:	9b02      	ldr	r3, [sp, #8]
 800c15a:	fa08 f800 	lsl.w	r8, r8, r0
 800c15e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c162:	fa23 f000 	lsr.w	r0, r3, r0
 800c166:	ea48 0000 	orr.w	r0, r8, r0
 800c16a:	f7f4 f93b 	bl	80003e4 <__aeabi_ui2d>
 800c16e:	2301      	movs	r3, #1
 800c170:	4680      	mov	r8, r0
 800c172:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800c176:	3d01      	subs	r5, #1
 800c178:	9310      	str	r3, [sp, #64]	; 0x40
 800c17a:	e771      	b.n	800c060 <_dtoa_r+0x100>
 800c17c:	9b02      	ldr	r3, [sp, #8]
 800c17e:	f1c0 0020 	rsb	r0, r0, #32
 800c182:	fa03 f000 	lsl.w	r0, r3, r0
 800c186:	e7f0      	b.n	800c16a <_dtoa_r+0x20a>
 800c188:	2301      	movs	r3, #1
 800c18a:	e7b0      	b.n	800c0ee <_dtoa_r+0x18e>
 800c18c:	900d      	str	r0, [sp, #52]	; 0x34
 800c18e:	e7af      	b.n	800c0f0 <_dtoa_r+0x190>
 800c190:	f1ca 0300 	rsb	r3, sl, #0
 800c194:	9308      	str	r3, [sp, #32]
 800c196:	2300      	movs	r3, #0
 800c198:	eba9 090a 	sub.w	r9, r9, sl
 800c19c:	930c      	str	r3, [sp, #48]	; 0x30
 800c19e:	e7bc      	b.n	800c11a <_dtoa_r+0x1ba>
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	9309      	str	r3, [sp, #36]	; 0x24
 800c1a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	dd74      	ble.n	800c294 <_dtoa_r+0x334>
 800c1aa:	4698      	mov	r8, r3
 800c1ac:	9304      	str	r3, [sp, #16]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c1b2:	6072      	str	r2, [r6, #4]
 800c1b4:	2204      	movs	r2, #4
 800c1b6:	f102 0014 	add.w	r0, r2, #20
 800c1ba:	4298      	cmp	r0, r3
 800c1bc:	6871      	ldr	r1, [r6, #4]
 800c1be:	d96e      	bls.n	800c29e <_dtoa_r+0x33e>
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	f000 fcb0 	bl	800cb26 <_Balloc>
 800c1c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1c8:	6030      	str	r0, [r6, #0]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f1b8 0f0e 	cmp.w	r8, #14
 800c1d0:	9306      	str	r3, [sp, #24]
 800c1d2:	f200 80ed 	bhi.w	800c3b0 <_dtoa_r+0x450>
 800c1d6:	2d00      	cmp	r5, #0
 800c1d8:	f000 80ea 	beq.w	800c3b0 <_dtoa_r+0x450>
 800c1dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1e0:	f1ba 0f00 	cmp.w	sl, #0
 800c1e4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c1e8:	dd77      	ble.n	800c2da <_dtoa_r+0x37a>
 800c1ea:	4a28      	ldr	r2, [pc, #160]	; (800c28c <_dtoa_r+0x32c>)
 800c1ec:	f00a 030f 	and.w	r3, sl, #15
 800c1f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c1f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c1f8:	06f0      	lsls	r0, r6, #27
 800c1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c202:	d568      	bpl.n	800c2d6 <_dtoa_r+0x376>
 800c204:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c208:	4b21      	ldr	r3, [pc, #132]	; (800c290 <_dtoa_r+0x330>)
 800c20a:	2503      	movs	r5, #3
 800c20c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c210:	f7f4 fa8c 	bl	800072c <__aeabi_ddiv>
 800c214:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c218:	f006 060f 	and.w	r6, r6, #15
 800c21c:	4f1c      	ldr	r7, [pc, #112]	; (800c290 <_dtoa_r+0x330>)
 800c21e:	e04f      	b.n	800c2c0 <_dtoa_r+0x360>
 800c220:	2301      	movs	r3, #1
 800c222:	9309      	str	r3, [sp, #36]	; 0x24
 800c224:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c226:	4453      	add	r3, sl
 800c228:	f103 0801 	add.w	r8, r3, #1
 800c22c:	9304      	str	r3, [sp, #16]
 800c22e:	4643      	mov	r3, r8
 800c230:	2b01      	cmp	r3, #1
 800c232:	bfb8      	it	lt
 800c234:	2301      	movlt	r3, #1
 800c236:	e7ba      	b.n	800c1ae <_dtoa_r+0x24e>
 800c238:	2300      	movs	r3, #0
 800c23a:	e7b2      	b.n	800c1a2 <_dtoa_r+0x242>
 800c23c:	2300      	movs	r3, #0
 800c23e:	e7f0      	b.n	800c222 <_dtoa_r+0x2c2>
 800c240:	2501      	movs	r5, #1
 800c242:	2300      	movs	r3, #0
 800c244:	9509      	str	r5, [sp, #36]	; 0x24
 800c246:	931e      	str	r3, [sp, #120]	; 0x78
 800c248:	f04f 33ff 	mov.w	r3, #4294967295
 800c24c:	2200      	movs	r2, #0
 800c24e:	9304      	str	r3, [sp, #16]
 800c250:	4698      	mov	r8, r3
 800c252:	2312      	movs	r3, #18
 800c254:	921f      	str	r2, [sp, #124]	; 0x7c
 800c256:	e7aa      	b.n	800c1ae <_dtoa_r+0x24e>
 800c258:	2301      	movs	r3, #1
 800c25a:	9309      	str	r3, [sp, #36]	; 0x24
 800c25c:	e7f4      	b.n	800c248 <_dtoa_r+0x2e8>
 800c25e:	bf00      	nop
 800c260:	636f4361 	.word	0x636f4361
 800c264:	3fd287a7 	.word	0x3fd287a7
 800c268:	8b60c8b3 	.word	0x8b60c8b3
 800c26c:	3fc68a28 	.word	0x3fc68a28
 800c270:	509f79fb 	.word	0x509f79fb
 800c274:	3fd34413 	.word	0x3fd34413
 800c278:	7ff00000 	.word	0x7ff00000
 800c27c:	0800f7cd 	.word	0x0800f7cd
 800c280:	0800f7c4 	.word	0x0800f7c4
 800c284:	0800f7a1 	.word	0x0800f7a1
 800c288:	3ff80000 	.word	0x3ff80000
 800c28c:	0800f800 	.word	0x0800f800
 800c290:	0800f7d8 	.word	0x0800f7d8
 800c294:	2301      	movs	r3, #1
 800c296:	9304      	str	r3, [sp, #16]
 800c298:	4698      	mov	r8, r3
 800c29a:	461a      	mov	r2, r3
 800c29c:	e7da      	b.n	800c254 <_dtoa_r+0x2f4>
 800c29e:	3101      	adds	r1, #1
 800c2a0:	6071      	str	r1, [r6, #4]
 800c2a2:	0052      	lsls	r2, r2, #1
 800c2a4:	e787      	b.n	800c1b6 <_dtoa_r+0x256>
 800c2a6:	07f1      	lsls	r1, r6, #31
 800c2a8:	d508      	bpl.n	800c2bc <_dtoa_r+0x35c>
 800c2aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c2ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2b2:	f7f4 f911 	bl	80004d8 <__aeabi_dmul>
 800c2b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c2ba:	3501      	adds	r5, #1
 800c2bc:	1076      	asrs	r6, r6, #1
 800c2be:	3708      	adds	r7, #8
 800c2c0:	2e00      	cmp	r6, #0
 800c2c2:	d1f0      	bne.n	800c2a6 <_dtoa_r+0x346>
 800c2c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c2c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2cc:	f7f4 fa2e 	bl	800072c <__aeabi_ddiv>
 800c2d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2d4:	e01b      	b.n	800c30e <_dtoa_r+0x3ae>
 800c2d6:	2502      	movs	r5, #2
 800c2d8:	e7a0      	b.n	800c21c <_dtoa_r+0x2bc>
 800c2da:	f000 80a4 	beq.w	800c426 <_dtoa_r+0x4c6>
 800c2de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c2e2:	f1ca 0600 	rsb	r6, sl, #0
 800c2e6:	4ba0      	ldr	r3, [pc, #640]	; (800c568 <_dtoa_r+0x608>)
 800c2e8:	f006 020f 	and.w	r2, r6, #15
 800c2ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f4:	f7f4 f8f0 	bl	80004d8 <__aeabi_dmul>
 800c2f8:	2502      	movs	r5, #2
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c300:	4f9a      	ldr	r7, [pc, #616]	; (800c56c <_dtoa_r+0x60c>)
 800c302:	1136      	asrs	r6, r6, #4
 800c304:	2e00      	cmp	r6, #0
 800c306:	f040 8083 	bne.w	800c410 <_dtoa_r+0x4b0>
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d1e0      	bne.n	800c2d0 <_dtoa_r+0x370>
 800c30e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c310:	2b00      	cmp	r3, #0
 800c312:	f000 808a 	beq.w	800c42a <_dtoa_r+0x4ca>
 800c316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c31a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c31e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c322:	2200      	movs	r2, #0
 800c324:	4b92      	ldr	r3, [pc, #584]	; (800c570 <_dtoa_r+0x610>)
 800c326:	f7f4 fb49 	bl	80009bc <__aeabi_dcmplt>
 800c32a:	2800      	cmp	r0, #0
 800c32c:	d07d      	beq.n	800c42a <_dtoa_r+0x4ca>
 800c32e:	f1b8 0f00 	cmp.w	r8, #0
 800c332:	d07a      	beq.n	800c42a <_dtoa_r+0x4ca>
 800c334:	9b04      	ldr	r3, [sp, #16]
 800c336:	2b00      	cmp	r3, #0
 800c338:	dd36      	ble.n	800c3a8 <_dtoa_r+0x448>
 800c33a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c33e:	2200      	movs	r2, #0
 800c340:	4b8c      	ldr	r3, [pc, #560]	; (800c574 <_dtoa_r+0x614>)
 800c342:	f7f4 f8c9 	bl	80004d8 <__aeabi_dmul>
 800c346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c34a:	9e04      	ldr	r6, [sp, #16]
 800c34c:	f10a 37ff 	add.w	r7, sl, #4294967295
 800c350:	3501      	adds	r5, #1
 800c352:	4628      	mov	r0, r5
 800c354:	f7f4 f856 	bl	8000404 <__aeabi_i2d>
 800c358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c35c:	f7f4 f8bc 	bl	80004d8 <__aeabi_dmul>
 800c360:	2200      	movs	r2, #0
 800c362:	4b85      	ldr	r3, [pc, #532]	; (800c578 <_dtoa_r+0x618>)
 800c364:	f7f3 ff02 	bl	800016c <__adddf3>
 800c368:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800c36c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c370:	950b      	str	r5, [sp, #44]	; 0x2c
 800c372:	2e00      	cmp	r6, #0
 800c374:	d15c      	bne.n	800c430 <_dtoa_r+0x4d0>
 800c376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c37a:	2200      	movs	r2, #0
 800c37c:	4b7f      	ldr	r3, [pc, #508]	; (800c57c <_dtoa_r+0x61c>)
 800c37e:	f7f3 fef3 	bl	8000168 <__aeabi_dsub>
 800c382:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c384:	462b      	mov	r3, r5
 800c386:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c38a:	f7f4 fb35 	bl	80009f8 <__aeabi_dcmpgt>
 800c38e:	2800      	cmp	r0, #0
 800c390:	f040 8281 	bne.w	800c896 <_dtoa_r+0x936>
 800c394:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c39a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c39e:	f7f4 fb0d 	bl	80009bc <__aeabi_dcmplt>
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	f040 8275 	bne.w	800c892 <_dtoa_r+0x932>
 800c3a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c3ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c3b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	f2c0 814b 	blt.w	800c64e <_dtoa_r+0x6ee>
 800c3b8:	f1ba 0f0e 	cmp.w	sl, #14
 800c3bc:	f300 8147 	bgt.w	800c64e <_dtoa_r+0x6ee>
 800c3c0:	4b69      	ldr	r3, [pc, #420]	; (800c568 <_dtoa_r+0x608>)
 800c3c2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c3ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	f280 80d7 	bge.w	800c584 <_dtoa_r+0x624>
 800c3d6:	f1b8 0f00 	cmp.w	r8, #0
 800c3da:	f300 80d3 	bgt.w	800c584 <_dtoa_r+0x624>
 800c3de:	f040 8257 	bne.w	800c890 <_dtoa_r+0x930>
 800c3e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	4b64      	ldr	r3, [pc, #400]	; (800c57c <_dtoa_r+0x61c>)
 800c3ea:	f7f4 f875 	bl	80004d8 <__aeabi_dmul>
 800c3ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3f2:	f7f4 faf7 	bl	80009e4 <__aeabi_dcmpge>
 800c3f6:	4646      	mov	r6, r8
 800c3f8:	4647      	mov	r7, r8
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	f040 822d 	bne.w	800c85a <_dtoa_r+0x8fa>
 800c400:	9b06      	ldr	r3, [sp, #24]
 800c402:	9a06      	ldr	r2, [sp, #24]
 800c404:	1c5d      	adds	r5, r3, #1
 800c406:	2331      	movs	r3, #49	; 0x31
 800c408:	f10a 0a01 	add.w	sl, sl, #1
 800c40c:	7013      	strb	r3, [r2, #0]
 800c40e:	e228      	b.n	800c862 <_dtoa_r+0x902>
 800c410:	07f2      	lsls	r2, r6, #31
 800c412:	d505      	bpl.n	800c420 <_dtoa_r+0x4c0>
 800c414:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c418:	f7f4 f85e 	bl	80004d8 <__aeabi_dmul>
 800c41c:	2301      	movs	r3, #1
 800c41e:	3501      	adds	r5, #1
 800c420:	1076      	asrs	r6, r6, #1
 800c422:	3708      	adds	r7, #8
 800c424:	e76e      	b.n	800c304 <_dtoa_r+0x3a4>
 800c426:	2502      	movs	r5, #2
 800c428:	e771      	b.n	800c30e <_dtoa_r+0x3ae>
 800c42a:	4657      	mov	r7, sl
 800c42c:	4646      	mov	r6, r8
 800c42e:	e790      	b.n	800c352 <_dtoa_r+0x3f2>
 800c430:	4b4d      	ldr	r3, [pc, #308]	; (800c568 <_dtoa_r+0x608>)
 800c432:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c436:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c43a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d048      	beq.n	800c4d2 <_dtoa_r+0x572>
 800c440:	4602      	mov	r2, r0
 800c442:	460b      	mov	r3, r1
 800c444:	2000      	movs	r0, #0
 800c446:	494e      	ldr	r1, [pc, #312]	; (800c580 <_dtoa_r+0x620>)
 800c448:	f7f4 f970 	bl	800072c <__aeabi_ddiv>
 800c44c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c450:	f7f3 fe8a 	bl	8000168 <__aeabi_dsub>
 800c454:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c458:	9d06      	ldr	r5, [sp, #24]
 800c45a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c45e:	f7f4 faeb 	bl	8000a38 <__aeabi_d2iz>
 800c462:	9011      	str	r0, [sp, #68]	; 0x44
 800c464:	f7f3 ffce 	bl	8000404 <__aeabi_i2d>
 800c468:	4602      	mov	r2, r0
 800c46a:	460b      	mov	r3, r1
 800c46c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c470:	f7f3 fe7a 	bl	8000168 <__aeabi_dsub>
 800c474:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c476:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c47a:	3330      	adds	r3, #48	; 0x30
 800c47c:	f805 3b01 	strb.w	r3, [r5], #1
 800c480:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c484:	f7f4 fa9a 	bl	80009bc <__aeabi_dcmplt>
 800c488:	2800      	cmp	r0, #0
 800c48a:	d163      	bne.n	800c554 <_dtoa_r+0x5f4>
 800c48c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c490:	2000      	movs	r0, #0
 800c492:	4937      	ldr	r1, [pc, #220]	; (800c570 <_dtoa_r+0x610>)
 800c494:	f7f3 fe68 	bl	8000168 <__aeabi_dsub>
 800c498:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c49c:	f7f4 fa8e 	bl	80009bc <__aeabi_dcmplt>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	f040 80b5 	bne.w	800c610 <_dtoa_r+0x6b0>
 800c4a6:	9b06      	ldr	r3, [sp, #24]
 800c4a8:	1aeb      	subs	r3, r5, r3
 800c4aa:	429e      	cmp	r6, r3
 800c4ac:	f77f af7c 	ble.w	800c3a8 <_dtoa_r+0x448>
 800c4b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	4b2f      	ldr	r3, [pc, #188]	; (800c574 <_dtoa_r+0x614>)
 800c4b8:	f7f4 f80e 	bl	80004d8 <__aeabi_dmul>
 800c4bc:	2200      	movs	r2, #0
 800c4be:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c4c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4c6:	4b2b      	ldr	r3, [pc, #172]	; (800c574 <_dtoa_r+0x614>)
 800c4c8:	f7f4 f806 	bl	80004d8 <__aeabi_dmul>
 800c4cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4d0:	e7c3      	b.n	800c45a <_dtoa_r+0x4fa>
 800c4d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c4d6:	f7f3 ffff 	bl	80004d8 <__aeabi_dmul>
 800c4da:	9b06      	ldr	r3, [sp, #24]
 800c4dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c4e0:	199d      	adds	r5, r3, r6
 800c4e2:	461e      	mov	r6, r3
 800c4e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4e8:	f7f4 faa6 	bl	8000a38 <__aeabi_d2iz>
 800c4ec:	9011      	str	r0, [sp, #68]	; 0x44
 800c4ee:	f7f3 ff89 	bl	8000404 <__aeabi_i2d>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4fa:	f7f3 fe35 	bl	8000168 <__aeabi_dsub>
 800c4fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c500:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c504:	3330      	adds	r3, #48	; 0x30
 800c506:	f806 3b01 	strb.w	r3, [r6], #1
 800c50a:	42ae      	cmp	r6, r5
 800c50c:	f04f 0200 	mov.w	r2, #0
 800c510:	d124      	bne.n	800c55c <_dtoa_r+0x5fc>
 800c512:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c516:	4b1a      	ldr	r3, [pc, #104]	; (800c580 <_dtoa_r+0x620>)
 800c518:	f7f3 fe28 	bl	800016c <__adddf3>
 800c51c:	4602      	mov	r2, r0
 800c51e:	460b      	mov	r3, r1
 800c520:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c524:	f7f4 fa68 	bl	80009f8 <__aeabi_dcmpgt>
 800c528:	2800      	cmp	r0, #0
 800c52a:	d171      	bne.n	800c610 <_dtoa_r+0x6b0>
 800c52c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c530:	2000      	movs	r0, #0
 800c532:	4913      	ldr	r1, [pc, #76]	; (800c580 <_dtoa_r+0x620>)
 800c534:	f7f3 fe18 	bl	8000168 <__aeabi_dsub>
 800c538:	4602      	mov	r2, r0
 800c53a:	460b      	mov	r3, r1
 800c53c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c540:	f7f4 fa3c 	bl	80009bc <__aeabi_dcmplt>
 800c544:	2800      	cmp	r0, #0
 800c546:	f43f af2f 	beq.w	800c3a8 <_dtoa_r+0x448>
 800c54a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c54e:	1e6a      	subs	r2, r5, #1
 800c550:	2b30      	cmp	r3, #48	; 0x30
 800c552:	d001      	beq.n	800c558 <_dtoa_r+0x5f8>
 800c554:	46ba      	mov	sl, r7
 800c556:	e04a      	b.n	800c5ee <_dtoa_r+0x68e>
 800c558:	4615      	mov	r5, r2
 800c55a:	e7f6      	b.n	800c54a <_dtoa_r+0x5ea>
 800c55c:	4b05      	ldr	r3, [pc, #20]	; (800c574 <_dtoa_r+0x614>)
 800c55e:	f7f3 ffbb 	bl	80004d8 <__aeabi_dmul>
 800c562:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c566:	e7bd      	b.n	800c4e4 <_dtoa_r+0x584>
 800c568:	0800f800 	.word	0x0800f800
 800c56c:	0800f7d8 	.word	0x0800f7d8
 800c570:	3ff00000 	.word	0x3ff00000
 800c574:	40240000 	.word	0x40240000
 800c578:	401c0000 	.word	0x401c0000
 800c57c:	40140000 	.word	0x40140000
 800c580:	3fe00000 	.word	0x3fe00000
 800c584:	9d06      	ldr	r5, [sp, #24]
 800c586:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c58a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c58e:	4630      	mov	r0, r6
 800c590:	4639      	mov	r1, r7
 800c592:	f7f4 f8cb 	bl	800072c <__aeabi_ddiv>
 800c596:	f7f4 fa4f 	bl	8000a38 <__aeabi_d2iz>
 800c59a:	4681      	mov	r9, r0
 800c59c:	f7f3 ff32 	bl	8000404 <__aeabi_i2d>
 800c5a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5a4:	f7f3 ff98 	bl	80004d8 <__aeabi_dmul>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	4639      	mov	r1, r7
 800c5b0:	f7f3 fdda 	bl	8000168 <__aeabi_dsub>
 800c5b4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800c5b8:	f805 6b01 	strb.w	r6, [r5], #1
 800c5bc:	9e06      	ldr	r6, [sp, #24]
 800c5be:	4602      	mov	r2, r0
 800c5c0:	1bae      	subs	r6, r5, r6
 800c5c2:	45b0      	cmp	r8, r6
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	d135      	bne.n	800c634 <_dtoa_r+0x6d4>
 800c5c8:	f7f3 fdd0 	bl	800016c <__adddf3>
 800c5cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5d0:	4606      	mov	r6, r0
 800c5d2:	460f      	mov	r7, r1
 800c5d4:	f7f4 fa10 	bl	80009f8 <__aeabi_dcmpgt>
 800c5d8:	b9c8      	cbnz	r0, 800c60e <_dtoa_r+0x6ae>
 800c5da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5de:	4630      	mov	r0, r6
 800c5e0:	4639      	mov	r1, r7
 800c5e2:	f7f4 f9e1 	bl	80009a8 <__aeabi_dcmpeq>
 800c5e6:	b110      	cbz	r0, 800c5ee <_dtoa_r+0x68e>
 800c5e8:	f019 0f01 	tst.w	r9, #1
 800c5ec:	d10f      	bne.n	800c60e <_dtoa_r+0x6ae>
 800c5ee:	4659      	mov	r1, fp
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	f000 facc 	bl	800cb8e <_Bfree>
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c5fa:	702b      	strb	r3, [r5, #0]
 800c5fc:	f10a 0301 	add.w	r3, sl, #1
 800c600:	6013      	str	r3, [r2, #0]
 800c602:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c604:	2b00      	cmp	r3, #0
 800c606:	f43f acf3 	beq.w	800bff0 <_dtoa_r+0x90>
 800c60a:	601d      	str	r5, [r3, #0]
 800c60c:	e4f0      	b.n	800bff0 <_dtoa_r+0x90>
 800c60e:	4657      	mov	r7, sl
 800c610:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c614:	1e6b      	subs	r3, r5, #1
 800c616:	2a39      	cmp	r2, #57	; 0x39
 800c618:	d106      	bne.n	800c628 <_dtoa_r+0x6c8>
 800c61a:	9a06      	ldr	r2, [sp, #24]
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d107      	bne.n	800c630 <_dtoa_r+0x6d0>
 800c620:	2330      	movs	r3, #48	; 0x30
 800c622:	7013      	strb	r3, [r2, #0]
 800c624:	4613      	mov	r3, r2
 800c626:	3701      	adds	r7, #1
 800c628:	781a      	ldrb	r2, [r3, #0]
 800c62a:	3201      	adds	r2, #1
 800c62c:	701a      	strb	r2, [r3, #0]
 800c62e:	e791      	b.n	800c554 <_dtoa_r+0x5f4>
 800c630:	461d      	mov	r5, r3
 800c632:	e7ed      	b.n	800c610 <_dtoa_r+0x6b0>
 800c634:	2200      	movs	r2, #0
 800c636:	4b99      	ldr	r3, [pc, #612]	; (800c89c <_dtoa_r+0x93c>)
 800c638:	f7f3 ff4e 	bl	80004d8 <__aeabi_dmul>
 800c63c:	2200      	movs	r2, #0
 800c63e:	2300      	movs	r3, #0
 800c640:	4606      	mov	r6, r0
 800c642:	460f      	mov	r7, r1
 800c644:	f7f4 f9b0 	bl	80009a8 <__aeabi_dcmpeq>
 800c648:	2800      	cmp	r0, #0
 800c64a:	d09e      	beq.n	800c58a <_dtoa_r+0x62a>
 800c64c:	e7cf      	b.n	800c5ee <_dtoa_r+0x68e>
 800c64e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c650:	2a00      	cmp	r2, #0
 800c652:	f000 8088 	beq.w	800c766 <_dtoa_r+0x806>
 800c656:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c658:	2a01      	cmp	r2, #1
 800c65a:	dc6d      	bgt.n	800c738 <_dtoa_r+0x7d8>
 800c65c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c65e:	2a00      	cmp	r2, #0
 800c660:	d066      	beq.n	800c730 <_dtoa_r+0x7d0>
 800c662:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c666:	464d      	mov	r5, r9
 800c668:	9e08      	ldr	r6, [sp, #32]
 800c66a:	9a07      	ldr	r2, [sp, #28]
 800c66c:	2101      	movs	r1, #1
 800c66e:	441a      	add	r2, r3
 800c670:	4620      	mov	r0, r4
 800c672:	4499      	add	r9, r3
 800c674:	9207      	str	r2, [sp, #28]
 800c676:	f000 fb2a 	bl	800ccce <__i2b>
 800c67a:	4607      	mov	r7, r0
 800c67c:	2d00      	cmp	r5, #0
 800c67e:	dd0b      	ble.n	800c698 <_dtoa_r+0x738>
 800c680:	9b07      	ldr	r3, [sp, #28]
 800c682:	2b00      	cmp	r3, #0
 800c684:	dd08      	ble.n	800c698 <_dtoa_r+0x738>
 800c686:	42ab      	cmp	r3, r5
 800c688:	bfa8      	it	ge
 800c68a:	462b      	movge	r3, r5
 800c68c:	9a07      	ldr	r2, [sp, #28]
 800c68e:	eba9 0903 	sub.w	r9, r9, r3
 800c692:	1aed      	subs	r5, r5, r3
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	9307      	str	r3, [sp, #28]
 800c698:	9b08      	ldr	r3, [sp, #32]
 800c69a:	b1eb      	cbz	r3, 800c6d8 <_dtoa_r+0x778>
 800c69c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d065      	beq.n	800c76e <_dtoa_r+0x80e>
 800c6a2:	b18e      	cbz	r6, 800c6c8 <_dtoa_r+0x768>
 800c6a4:	4639      	mov	r1, r7
 800c6a6:	4632      	mov	r2, r6
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	f000 fbaf 	bl	800ce0c <__pow5mult>
 800c6ae:	465a      	mov	r2, fp
 800c6b0:	4601      	mov	r1, r0
 800c6b2:	4607      	mov	r7, r0
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	f000 fb13 	bl	800cce0 <__multiply>
 800c6ba:	4659      	mov	r1, fp
 800c6bc:	900a      	str	r0, [sp, #40]	; 0x28
 800c6be:	4620      	mov	r0, r4
 800c6c0:	f000 fa65 	bl	800cb8e <_Bfree>
 800c6c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6c6:	469b      	mov	fp, r3
 800c6c8:	9b08      	ldr	r3, [sp, #32]
 800c6ca:	1b9a      	subs	r2, r3, r6
 800c6cc:	d004      	beq.n	800c6d8 <_dtoa_r+0x778>
 800c6ce:	4659      	mov	r1, fp
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f000 fb9b 	bl	800ce0c <__pow5mult>
 800c6d6:	4683      	mov	fp, r0
 800c6d8:	2101      	movs	r1, #1
 800c6da:	4620      	mov	r0, r4
 800c6dc:	f000 faf7 	bl	800ccce <__i2b>
 800c6e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6e2:	4606      	mov	r6, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f000 81c6 	beq.w	800ca76 <_dtoa_r+0xb16>
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	4601      	mov	r1, r0
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	f000 fb8c 	bl	800ce0c <__pow5mult>
 800c6f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c6f6:	4606      	mov	r6, r0
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	dc3e      	bgt.n	800c77a <_dtoa_r+0x81a>
 800c6fc:	9b02      	ldr	r3, [sp, #8]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d137      	bne.n	800c772 <_dtoa_r+0x812>
 800c702:	9b03      	ldr	r3, [sp, #12]
 800c704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d134      	bne.n	800c776 <_dtoa_r+0x816>
 800c70c:	9b03      	ldr	r3, [sp, #12]
 800c70e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c712:	0d1b      	lsrs	r3, r3, #20
 800c714:	051b      	lsls	r3, r3, #20
 800c716:	b12b      	cbz	r3, 800c724 <_dtoa_r+0x7c4>
 800c718:	9b07      	ldr	r3, [sp, #28]
 800c71a:	f109 0901 	add.w	r9, r9, #1
 800c71e:	3301      	adds	r3, #1
 800c720:	9307      	str	r3, [sp, #28]
 800c722:	2301      	movs	r3, #1
 800c724:	9308      	str	r3, [sp, #32]
 800c726:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d128      	bne.n	800c77e <_dtoa_r+0x81e>
 800c72c:	2001      	movs	r0, #1
 800c72e:	e02e      	b.n	800c78e <_dtoa_r+0x82e>
 800c730:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c732:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c736:	e796      	b.n	800c666 <_dtoa_r+0x706>
 800c738:	9b08      	ldr	r3, [sp, #32]
 800c73a:	f108 36ff 	add.w	r6, r8, #4294967295
 800c73e:	42b3      	cmp	r3, r6
 800c740:	bfb7      	itett	lt
 800c742:	9b08      	ldrlt	r3, [sp, #32]
 800c744:	1b9e      	subge	r6, r3, r6
 800c746:	1af2      	sublt	r2, r6, r3
 800c748:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800c74a:	bfbf      	itttt	lt
 800c74c:	9608      	strlt	r6, [sp, #32]
 800c74e:	189b      	addlt	r3, r3, r2
 800c750:	930c      	strlt	r3, [sp, #48]	; 0x30
 800c752:	2600      	movlt	r6, #0
 800c754:	f1b8 0f00 	cmp.w	r8, #0
 800c758:	bfb9      	ittee	lt
 800c75a:	eba9 0508 	sublt.w	r5, r9, r8
 800c75e:	2300      	movlt	r3, #0
 800c760:	464d      	movge	r5, r9
 800c762:	4643      	movge	r3, r8
 800c764:	e781      	b.n	800c66a <_dtoa_r+0x70a>
 800c766:	9e08      	ldr	r6, [sp, #32]
 800c768:	464d      	mov	r5, r9
 800c76a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c76c:	e786      	b.n	800c67c <_dtoa_r+0x71c>
 800c76e:	9a08      	ldr	r2, [sp, #32]
 800c770:	e7ad      	b.n	800c6ce <_dtoa_r+0x76e>
 800c772:	2300      	movs	r3, #0
 800c774:	e7d6      	b.n	800c724 <_dtoa_r+0x7c4>
 800c776:	9b02      	ldr	r3, [sp, #8]
 800c778:	e7d4      	b.n	800c724 <_dtoa_r+0x7c4>
 800c77a:	2300      	movs	r3, #0
 800c77c:	9308      	str	r3, [sp, #32]
 800c77e:	6933      	ldr	r3, [r6, #16]
 800c780:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c784:	6918      	ldr	r0, [r3, #16]
 800c786:	f000 fa54 	bl	800cc32 <__hi0bits>
 800c78a:	f1c0 0020 	rsb	r0, r0, #32
 800c78e:	9b07      	ldr	r3, [sp, #28]
 800c790:	4418      	add	r0, r3
 800c792:	f010 001f 	ands.w	r0, r0, #31
 800c796:	d047      	beq.n	800c828 <_dtoa_r+0x8c8>
 800c798:	f1c0 0320 	rsb	r3, r0, #32
 800c79c:	2b04      	cmp	r3, #4
 800c79e:	dd3b      	ble.n	800c818 <_dtoa_r+0x8b8>
 800c7a0:	9b07      	ldr	r3, [sp, #28]
 800c7a2:	f1c0 001c 	rsb	r0, r0, #28
 800c7a6:	4481      	add	r9, r0
 800c7a8:	4405      	add	r5, r0
 800c7aa:	4403      	add	r3, r0
 800c7ac:	9307      	str	r3, [sp, #28]
 800c7ae:	f1b9 0f00 	cmp.w	r9, #0
 800c7b2:	dd05      	ble.n	800c7c0 <_dtoa_r+0x860>
 800c7b4:	4659      	mov	r1, fp
 800c7b6:	464a      	mov	r2, r9
 800c7b8:	4620      	mov	r0, r4
 800c7ba:	f000 fb75 	bl	800cea8 <__lshift>
 800c7be:	4683      	mov	fp, r0
 800c7c0:	9b07      	ldr	r3, [sp, #28]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	dd05      	ble.n	800c7d2 <_dtoa_r+0x872>
 800c7c6:	4631      	mov	r1, r6
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	f000 fb6c 	bl	800cea8 <__lshift>
 800c7d0:	4606      	mov	r6, r0
 800c7d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7d4:	b353      	cbz	r3, 800c82c <_dtoa_r+0x8cc>
 800c7d6:	4631      	mov	r1, r6
 800c7d8:	4658      	mov	r0, fp
 800c7da:	f000 fbb9 	bl	800cf50 <__mcmp>
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	da24      	bge.n	800c82c <_dtoa_r+0x8cc>
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	4659      	mov	r1, fp
 800c7e6:	220a      	movs	r2, #10
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	f000 f9e7 	bl	800cbbc <__multadd>
 800c7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c7f4:	4683      	mov	fp, r0
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	f000 8144 	beq.w	800ca84 <_dtoa_r+0xb24>
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	4639      	mov	r1, r7
 800c800:	220a      	movs	r2, #10
 800c802:	4620      	mov	r0, r4
 800c804:	f000 f9da 	bl	800cbbc <__multadd>
 800c808:	9b04      	ldr	r3, [sp, #16]
 800c80a:	4607      	mov	r7, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	dc4d      	bgt.n	800c8ac <_dtoa_r+0x94c>
 800c810:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c812:	2b02      	cmp	r3, #2
 800c814:	dd4a      	ble.n	800c8ac <_dtoa_r+0x94c>
 800c816:	e011      	b.n	800c83c <_dtoa_r+0x8dc>
 800c818:	d0c9      	beq.n	800c7ae <_dtoa_r+0x84e>
 800c81a:	9a07      	ldr	r2, [sp, #28]
 800c81c:	331c      	adds	r3, #28
 800c81e:	441a      	add	r2, r3
 800c820:	4499      	add	r9, r3
 800c822:	441d      	add	r5, r3
 800c824:	4613      	mov	r3, r2
 800c826:	e7c1      	b.n	800c7ac <_dtoa_r+0x84c>
 800c828:	4603      	mov	r3, r0
 800c82a:	e7f6      	b.n	800c81a <_dtoa_r+0x8ba>
 800c82c:	f1b8 0f00 	cmp.w	r8, #0
 800c830:	dc36      	bgt.n	800c8a0 <_dtoa_r+0x940>
 800c832:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c834:	2b02      	cmp	r3, #2
 800c836:	dd33      	ble.n	800c8a0 <_dtoa_r+0x940>
 800c838:	f8cd 8010 	str.w	r8, [sp, #16]
 800c83c:	9b04      	ldr	r3, [sp, #16]
 800c83e:	b963      	cbnz	r3, 800c85a <_dtoa_r+0x8fa>
 800c840:	4631      	mov	r1, r6
 800c842:	2205      	movs	r2, #5
 800c844:	4620      	mov	r0, r4
 800c846:	f000 f9b9 	bl	800cbbc <__multadd>
 800c84a:	4601      	mov	r1, r0
 800c84c:	4606      	mov	r6, r0
 800c84e:	4658      	mov	r0, fp
 800c850:	f000 fb7e 	bl	800cf50 <__mcmp>
 800c854:	2800      	cmp	r0, #0
 800c856:	f73f add3 	bgt.w	800c400 <_dtoa_r+0x4a0>
 800c85a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c85c:	9d06      	ldr	r5, [sp, #24]
 800c85e:	ea6f 0a03 	mvn.w	sl, r3
 800c862:	f04f 0900 	mov.w	r9, #0
 800c866:	4631      	mov	r1, r6
 800c868:	4620      	mov	r0, r4
 800c86a:	f000 f990 	bl	800cb8e <_Bfree>
 800c86e:	2f00      	cmp	r7, #0
 800c870:	f43f aebd 	beq.w	800c5ee <_dtoa_r+0x68e>
 800c874:	f1b9 0f00 	cmp.w	r9, #0
 800c878:	d005      	beq.n	800c886 <_dtoa_r+0x926>
 800c87a:	45b9      	cmp	r9, r7
 800c87c:	d003      	beq.n	800c886 <_dtoa_r+0x926>
 800c87e:	4649      	mov	r1, r9
 800c880:	4620      	mov	r0, r4
 800c882:	f000 f984 	bl	800cb8e <_Bfree>
 800c886:	4639      	mov	r1, r7
 800c888:	4620      	mov	r0, r4
 800c88a:	f000 f980 	bl	800cb8e <_Bfree>
 800c88e:	e6ae      	b.n	800c5ee <_dtoa_r+0x68e>
 800c890:	2600      	movs	r6, #0
 800c892:	4637      	mov	r7, r6
 800c894:	e7e1      	b.n	800c85a <_dtoa_r+0x8fa>
 800c896:	46ba      	mov	sl, r7
 800c898:	4637      	mov	r7, r6
 800c89a:	e5b1      	b.n	800c400 <_dtoa_r+0x4a0>
 800c89c:	40240000 	.word	0x40240000
 800c8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8a2:	f8cd 8010 	str.w	r8, [sp, #16]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	f000 80f3 	beq.w	800ca92 <_dtoa_r+0xb32>
 800c8ac:	2d00      	cmp	r5, #0
 800c8ae:	dd05      	ble.n	800c8bc <_dtoa_r+0x95c>
 800c8b0:	4639      	mov	r1, r7
 800c8b2:	462a      	mov	r2, r5
 800c8b4:	4620      	mov	r0, r4
 800c8b6:	f000 faf7 	bl	800cea8 <__lshift>
 800c8ba:	4607      	mov	r7, r0
 800c8bc:	9b08      	ldr	r3, [sp, #32]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d04c      	beq.n	800c95c <_dtoa_r+0x9fc>
 800c8c2:	6879      	ldr	r1, [r7, #4]
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	f000 f92e 	bl	800cb26 <_Balloc>
 800c8ca:	4605      	mov	r5, r0
 800c8cc:	693a      	ldr	r2, [r7, #16]
 800c8ce:	f107 010c 	add.w	r1, r7, #12
 800c8d2:	3202      	adds	r2, #2
 800c8d4:	0092      	lsls	r2, r2, #2
 800c8d6:	300c      	adds	r0, #12
 800c8d8:	f000 f91a 	bl	800cb10 <memcpy>
 800c8dc:	2201      	movs	r2, #1
 800c8de:	4629      	mov	r1, r5
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f000 fae1 	bl	800cea8 <__lshift>
 800c8e6:	46b9      	mov	r9, r7
 800c8e8:	4607      	mov	r7, r0
 800c8ea:	9b06      	ldr	r3, [sp, #24]
 800c8ec:	9307      	str	r3, [sp, #28]
 800c8ee:	9b02      	ldr	r3, [sp, #8]
 800c8f0:	f003 0301 	and.w	r3, r3, #1
 800c8f4:	9308      	str	r3, [sp, #32]
 800c8f6:	4631      	mov	r1, r6
 800c8f8:	4658      	mov	r0, fp
 800c8fa:	f7ff faa1 	bl	800be40 <quorem>
 800c8fe:	4649      	mov	r1, r9
 800c900:	4605      	mov	r5, r0
 800c902:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c906:	4658      	mov	r0, fp
 800c908:	f000 fb22 	bl	800cf50 <__mcmp>
 800c90c:	463a      	mov	r2, r7
 800c90e:	9002      	str	r0, [sp, #8]
 800c910:	4631      	mov	r1, r6
 800c912:	4620      	mov	r0, r4
 800c914:	f000 fb36 	bl	800cf84 <__mdiff>
 800c918:	68c3      	ldr	r3, [r0, #12]
 800c91a:	4602      	mov	r2, r0
 800c91c:	bb03      	cbnz	r3, 800c960 <_dtoa_r+0xa00>
 800c91e:	4601      	mov	r1, r0
 800c920:	9009      	str	r0, [sp, #36]	; 0x24
 800c922:	4658      	mov	r0, fp
 800c924:	f000 fb14 	bl	800cf50 <__mcmp>
 800c928:	4603      	mov	r3, r0
 800c92a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c92c:	4611      	mov	r1, r2
 800c92e:	4620      	mov	r0, r4
 800c930:	9309      	str	r3, [sp, #36]	; 0x24
 800c932:	f000 f92c 	bl	800cb8e <_Bfree>
 800c936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c938:	b9a3      	cbnz	r3, 800c964 <_dtoa_r+0xa04>
 800c93a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c93c:	b992      	cbnz	r2, 800c964 <_dtoa_r+0xa04>
 800c93e:	9a08      	ldr	r2, [sp, #32]
 800c940:	b982      	cbnz	r2, 800c964 <_dtoa_r+0xa04>
 800c942:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c946:	d029      	beq.n	800c99c <_dtoa_r+0xa3c>
 800c948:	9b02      	ldr	r3, [sp, #8]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	dd01      	ble.n	800c952 <_dtoa_r+0x9f2>
 800c94e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c952:	9b07      	ldr	r3, [sp, #28]
 800c954:	1c5d      	adds	r5, r3, #1
 800c956:	f883 8000 	strb.w	r8, [r3]
 800c95a:	e784      	b.n	800c866 <_dtoa_r+0x906>
 800c95c:	4638      	mov	r0, r7
 800c95e:	e7c2      	b.n	800c8e6 <_dtoa_r+0x986>
 800c960:	2301      	movs	r3, #1
 800c962:	e7e3      	b.n	800c92c <_dtoa_r+0x9cc>
 800c964:	9a02      	ldr	r2, [sp, #8]
 800c966:	2a00      	cmp	r2, #0
 800c968:	db04      	blt.n	800c974 <_dtoa_r+0xa14>
 800c96a:	d123      	bne.n	800c9b4 <_dtoa_r+0xa54>
 800c96c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c96e:	bb0a      	cbnz	r2, 800c9b4 <_dtoa_r+0xa54>
 800c970:	9a08      	ldr	r2, [sp, #32]
 800c972:	b9fa      	cbnz	r2, 800c9b4 <_dtoa_r+0xa54>
 800c974:	2b00      	cmp	r3, #0
 800c976:	ddec      	ble.n	800c952 <_dtoa_r+0x9f2>
 800c978:	4659      	mov	r1, fp
 800c97a:	2201      	movs	r2, #1
 800c97c:	4620      	mov	r0, r4
 800c97e:	f000 fa93 	bl	800cea8 <__lshift>
 800c982:	4631      	mov	r1, r6
 800c984:	4683      	mov	fp, r0
 800c986:	f000 fae3 	bl	800cf50 <__mcmp>
 800c98a:	2800      	cmp	r0, #0
 800c98c:	dc03      	bgt.n	800c996 <_dtoa_r+0xa36>
 800c98e:	d1e0      	bne.n	800c952 <_dtoa_r+0x9f2>
 800c990:	f018 0f01 	tst.w	r8, #1
 800c994:	d0dd      	beq.n	800c952 <_dtoa_r+0x9f2>
 800c996:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c99a:	d1d8      	bne.n	800c94e <_dtoa_r+0x9ee>
 800c99c:	9b07      	ldr	r3, [sp, #28]
 800c99e:	9a07      	ldr	r2, [sp, #28]
 800c9a0:	1c5d      	adds	r5, r3, #1
 800c9a2:	2339      	movs	r3, #57	; 0x39
 800c9a4:	7013      	strb	r3, [r2, #0]
 800c9a6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c9aa:	1e6a      	subs	r2, r5, #1
 800c9ac:	2b39      	cmp	r3, #57	; 0x39
 800c9ae:	d04d      	beq.n	800ca4c <_dtoa_r+0xaec>
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	e052      	b.n	800ca5a <_dtoa_r+0xafa>
 800c9b4:	9a07      	ldr	r2, [sp, #28]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	f102 0501 	add.w	r5, r2, #1
 800c9bc:	dd06      	ble.n	800c9cc <_dtoa_r+0xa6c>
 800c9be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c9c2:	d0eb      	beq.n	800c99c <_dtoa_r+0xa3c>
 800c9c4:	f108 0801 	add.w	r8, r8, #1
 800c9c8:	9b07      	ldr	r3, [sp, #28]
 800c9ca:	e7c4      	b.n	800c956 <_dtoa_r+0x9f6>
 800c9cc:	9b06      	ldr	r3, [sp, #24]
 800c9ce:	9a04      	ldr	r2, [sp, #16]
 800c9d0:	1aeb      	subs	r3, r5, r3
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c9d8:	d021      	beq.n	800ca1e <_dtoa_r+0xabe>
 800c9da:	4659      	mov	r1, fp
 800c9dc:	2300      	movs	r3, #0
 800c9de:	220a      	movs	r2, #10
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f000 f8eb 	bl	800cbbc <__multadd>
 800c9e6:	45b9      	cmp	r9, r7
 800c9e8:	4683      	mov	fp, r0
 800c9ea:	f04f 0300 	mov.w	r3, #0
 800c9ee:	f04f 020a 	mov.w	r2, #10
 800c9f2:	4649      	mov	r1, r9
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	d105      	bne.n	800ca04 <_dtoa_r+0xaa4>
 800c9f8:	f000 f8e0 	bl	800cbbc <__multadd>
 800c9fc:	4681      	mov	r9, r0
 800c9fe:	4607      	mov	r7, r0
 800ca00:	9507      	str	r5, [sp, #28]
 800ca02:	e778      	b.n	800c8f6 <_dtoa_r+0x996>
 800ca04:	f000 f8da 	bl	800cbbc <__multadd>
 800ca08:	4639      	mov	r1, r7
 800ca0a:	4681      	mov	r9, r0
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	220a      	movs	r2, #10
 800ca10:	4620      	mov	r0, r4
 800ca12:	f000 f8d3 	bl	800cbbc <__multadd>
 800ca16:	4607      	mov	r7, r0
 800ca18:	e7f2      	b.n	800ca00 <_dtoa_r+0xaa0>
 800ca1a:	f04f 0900 	mov.w	r9, #0
 800ca1e:	4659      	mov	r1, fp
 800ca20:	2201      	movs	r2, #1
 800ca22:	4620      	mov	r0, r4
 800ca24:	f000 fa40 	bl	800cea8 <__lshift>
 800ca28:	4631      	mov	r1, r6
 800ca2a:	4683      	mov	fp, r0
 800ca2c:	f000 fa90 	bl	800cf50 <__mcmp>
 800ca30:	2800      	cmp	r0, #0
 800ca32:	dcb8      	bgt.n	800c9a6 <_dtoa_r+0xa46>
 800ca34:	d102      	bne.n	800ca3c <_dtoa_r+0xadc>
 800ca36:	f018 0f01 	tst.w	r8, #1
 800ca3a:	d1b4      	bne.n	800c9a6 <_dtoa_r+0xa46>
 800ca3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ca40:	1e6a      	subs	r2, r5, #1
 800ca42:	2b30      	cmp	r3, #48	; 0x30
 800ca44:	f47f af0f 	bne.w	800c866 <_dtoa_r+0x906>
 800ca48:	4615      	mov	r5, r2
 800ca4a:	e7f7      	b.n	800ca3c <_dtoa_r+0xadc>
 800ca4c:	9b06      	ldr	r3, [sp, #24]
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d105      	bne.n	800ca5e <_dtoa_r+0xafe>
 800ca52:	2331      	movs	r3, #49	; 0x31
 800ca54:	9a06      	ldr	r2, [sp, #24]
 800ca56:	f10a 0a01 	add.w	sl, sl, #1
 800ca5a:	7013      	strb	r3, [r2, #0]
 800ca5c:	e703      	b.n	800c866 <_dtoa_r+0x906>
 800ca5e:	4615      	mov	r5, r2
 800ca60:	e7a1      	b.n	800c9a6 <_dtoa_r+0xa46>
 800ca62:	4b17      	ldr	r3, [pc, #92]	; (800cac0 <_dtoa_r+0xb60>)
 800ca64:	f7ff bae1 	b.w	800c02a <_dtoa_r+0xca>
 800ca68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	f47f aabb 	bne.w	800bfe6 <_dtoa_r+0x86>
 800ca70:	4b14      	ldr	r3, [pc, #80]	; (800cac4 <_dtoa_r+0xb64>)
 800ca72:	f7ff bada 	b.w	800c02a <_dtoa_r+0xca>
 800ca76:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	f77f ae3f 	ble.w	800c6fc <_dtoa_r+0x79c>
 800ca7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca80:	9308      	str	r3, [sp, #32]
 800ca82:	e653      	b.n	800c72c <_dtoa_r+0x7cc>
 800ca84:	9b04      	ldr	r3, [sp, #16]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	dc03      	bgt.n	800ca92 <_dtoa_r+0xb32>
 800ca8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ca8c:	2b02      	cmp	r3, #2
 800ca8e:	f73f aed5 	bgt.w	800c83c <_dtoa_r+0x8dc>
 800ca92:	9d06      	ldr	r5, [sp, #24]
 800ca94:	4631      	mov	r1, r6
 800ca96:	4658      	mov	r0, fp
 800ca98:	f7ff f9d2 	bl	800be40 <quorem>
 800ca9c:	9b06      	ldr	r3, [sp, #24]
 800ca9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800caa2:	f805 8b01 	strb.w	r8, [r5], #1
 800caa6:	9a04      	ldr	r2, [sp, #16]
 800caa8:	1aeb      	subs	r3, r5, r3
 800caaa:	429a      	cmp	r2, r3
 800caac:	ddb5      	ble.n	800ca1a <_dtoa_r+0xaba>
 800caae:	4659      	mov	r1, fp
 800cab0:	2300      	movs	r3, #0
 800cab2:	220a      	movs	r2, #10
 800cab4:	4620      	mov	r0, r4
 800cab6:	f000 f881 	bl	800cbbc <__multadd>
 800caba:	4683      	mov	fp, r0
 800cabc:	e7ea      	b.n	800ca94 <_dtoa_r+0xb34>
 800cabe:	bf00      	nop
 800cac0:	0800f7a0 	.word	0x0800f7a0
 800cac4:	0800f7c4 	.word	0x0800f7c4

0800cac8 <_localeconv_r>:
 800cac8:	4b04      	ldr	r3, [pc, #16]	; (800cadc <_localeconv_r+0x14>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	6a18      	ldr	r0, [r3, #32]
 800cace:	4b04      	ldr	r3, [pc, #16]	; (800cae0 <_localeconv_r+0x18>)
 800cad0:	2800      	cmp	r0, #0
 800cad2:	bf08      	it	eq
 800cad4:	4618      	moveq	r0, r3
 800cad6:	30f0      	adds	r0, #240	; 0xf0
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop
 800cadc:	20000194 	.word	0x20000194
 800cae0:	200001f8 	.word	0x200001f8

0800cae4 <malloc>:
 800cae4:	4b02      	ldr	r3, [pc, #8]	; (800caf0 <malloc+0xc>)
 800cae6:	4601      	mov	r1, r0
 800cae8:	6818      	ldr	r0, [r3, #0]
 800caea:	f000 bb53 	b.w	800d194 <_malloc_r>
 800caee:	bf00      	nop
 800caf0:	20000194 	.word	0x20000194

0800caf4 <memchr>:
 800caf4:	b510      	push	{r4, lr}
 800caf6:	b2c9      	uxtb	r1, r1
 800caf8:	4402      	add	r2, r0
 800cafa:	4290      	cmp	r0, r2
 800cafc:	4603      	mov	r3, r0
 800cafe:	d101      	bne.n	800cb04 <memchr+0x10>
 800cb00:	2300      	movs	r3, #0
 800cb02:	e003      	b.n	800cb0c <memchr+0x18>
 800cb04:	781c      	ldrb	r4, [r3, #0]
 800cb06:	3001      	adds	r0, #1
 800cb08:	428c      	cmp	r4, r1
 800cb0a:	d1f6      	bne.n	800cafa <memchr+0x6>
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	bd10      	pop	{r4, pc}

0800cb10 <memcpy>:
 800cb10:	b510      	push	{r4, lr}
 800cb12:	1e43      	subs	r3, r0, #1
 800cb14:	440a      	add	r2, r1
 800cb16:	4291      	cmp	r1, r2
 800cb18:	d100      	bne.n	800cb1c <memcpy+0xc>
 800cb1a:	bd10      	pop	{r4, pc}
 800cb1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb20:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb24:	e7f7      	b.n	800cb16 <memcpy+0x6>

0800cb26 <_Balloc>:
 800cb26:	b570      	push	{r4, r5, r6, lr}
 800cb28:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cb2a:	4604      	mov	r4, r0
 800cb2c:	460e      	mov	r6, r1
 800cb2e:	b93d      	cbnz	r5, 800cb40 <_Balloc+0x1a>
 800cb30:	2010      	movs	r0, #16
 800cb32:	f7ff ffd7 	bl	800cae4 <malloc>
 800cb36:	6260      	str	r0, [r4, #36]	; 0x24
 800cb38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cb3c:	6005      	str	r5, [r0, #0]
 800cb3e:	60c5      	str	r5, [r0, #12]
 800cb40:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cb42:	68eb      	ldr	r3, [r5, #12]
 800cb44:	b183      	cbz	r3, 800cb68 <_Balloc+0x42>
 800cb46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cb4e:	b9b8      	cbnz	r0, 800cb80 <_Balloc+0x5a>
 800cb50:	2101      	movs	r1, #1
 800cb52:	fa01 f506 	lsl.w	r5, r1, r6
 800cb56:	1d6a      	adds	r2, r5, #5
 800cb58:	0092      	lsls	r2, r2, #2
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	f000 fabf 	bl	800d0de <_calloc_r>
 800cb60:	b160      	cbz	r0, 800cb7c <_Balloc+0x56>
 800cb62:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800cb66:	e00e      	b.n	800cb86 <_Balloc+0x60>
 800cb68:	2221      	movs	r2, #33	; 0x21
 800cb6a:	2104      	movs	r1, #4
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	f000 fab6 	bl	800d0de <_calloc_r>
 800cb72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb74:	60e8      	str	r0, [r5, #12]
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d1e4      	bne.n	800cb46 <_Balloc+0x20>
 800cb7c:	2000      	movs	r0, #0
 800cb7e:	bd70      	pop	{r4, r5, r6, pc}
 800cb80:	6802      	ldr	r2, [r0, #0]
 800cb82:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800cb86:	2300      	movs	r3, #0
 800cb88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb8c:	e7f7      	b.n	800cb7e <_Balloc+0x58>

0800cb8e <_Bfree>:
 800cb8e:	b570      	push	{r4, r5, r6, lr}
 800cb90:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cb92:	4606      	mov	r6, r0
 800cb94:	460d      	mov	r5, r1
 800cb96:	b93c      	cbnz	r4, 800cba8 <_Bfree+0x1a>
 800cb98:	2010      	movs	r0, #16
 800cb9a:	f7ff ffa3 	bl	800cae4 <malloc>
 800cb9e:	6270      	str	r0, [r6, #36]	; 0x24
 800cba0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cba4:	6004      	str	r4, [r0, #0]
 800cba6:	60c4      	str	r4, [r0, #12]
 800cba8:	b13d      	cbz	r5, 800cbba <_Bfree+0x2c>
 800cbaa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cbac:	686a      	ldr	r2, [r5, #4]
 800cbae:	68db      	ldr	r3, [r3, #12]
 800cbb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbb4:	6029      	str	r1, [r5, #0]
 800cbb6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800cbba:	bd70      	pop	{r4, r5, r6, pc}

0800cbbc <__multadd>:
 800cbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc0:	461f      	mov	r7, r3
 800cbc2:	4606      	mov	r6, r0
 800cbc4:	460c      	mov	r4, r1
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	690d      	ldr	r5, [r1, #16]
 800cbca:	f101 0c14 	add.w	ip, r1, #20
 800cbce:	f8dc 0000 	ldr.w	r0, [ip]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	b281      	uxth	r1, r0
 800cbd6:	fb02 7101 	mla	r1, r2, r1, r7
 800cbda:	0c00      	lsrs	r0, r0, #16
 800cbdc:	0c0f      	lsrs	r7, r1, #16
 800cbde:	fb02 7000 	mla	r0, r2, r0, r7
 800cbe2:	b289      	uxth	r1, r1
 800cbe4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800cbe8:	429d      	cmp	r5, r3
 800cbea:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800cbee:	f84c 1b04 	str.w	r1, [ip], #4
 800cbf2:	dcec      	bgt.n	800cbce <__multadd+0x12>
 800cbf4:	b1d7      	cbz	r7, 800cc2c <__multadd+0x70>
 800cbf6:	68a3      	ldr	r3, [r4, #8]
 800cbf8:	42ab      	cmp	r3, r5
 800cbfa:	dc12      	bgt.n	800cc22 <__multadd+0x66>
 800cbfc:	6861      	ldr	r1, [r4, #4]
 800cbfe:	4630      	mov	r0, r6
 800cc00:	3101      	adds	r1, #1
 800cc02:	f7ff ff90 	bl	800cb26 <_Balloc>
 800cc06:	4680      	mov	r8, r0
 800cc08:	6922      	ldr	r2, [r4, #16]
 800cc0a:	f104 010c 	add.w	r1, r4, #12
 800cc0e:	3202      	adds	r2, #2
 800cc10:	0092      	lsls	r2, r2, #2
 800cc12:	300c      	adds	r0, #12
 800cc14:	f7ff ff7c 	bl	800cb10 <memcpy>
 800cc18:	4621      	mov	r1, r4
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	f7ff ffb7 	bl	800cb8e <_Bfree>
 800cc20:	4644      	mov	r4, r8
 800cc22:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc26:	3501      	adds	r5, #1
 800cc28:	615f      	str	r7, [r3, #20]
 800cc2a:	6125      	str	r5, [r4, #16]
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cc32 <__hi0bits>:
 800cc32:	0c02      	lsrs	r2, r0, #16
 800cc34:	0412      	lsls	r2, r2, #16
 800cc36:	4603      	mov	r3, r0
 800cc38:	b9b2      	cbnz	r2, 800cc68 <__hi0bits+0x36>
 800cc3a:	0403      	lsls	r3, r0, #16
 800cc3c:	2010      	movs	r0, #16
 800cc3e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cc42:	bf04      	itt	eq
 800cc44:	021b      	lsleq	r3, r3, #8
 800cc46:	3008      	addeq	r0, #8
 800cc48:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cc4c:	bf04      	itt	eq
 800cc4e:	011b      	lsleq	r3, r3, #4
 800cc50:	3004      	addeq	r0, #4
 800cc52:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cc56:	bf04      	itt	eq
 800cc58:	009b      	lsleq	r3, r3, #2
 800cc5a:	3002      	addeq	r0, #2
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	db06      	blt.n	800cc6e <__hi0bits+0x3c>
 800cc60:	005b      	lsls	r3, r3, #1
 800cc62:	d503      	bpl.n	800cc6c <__hi0bits+0x3a>
 800cc64:	3001      	adds	r0, #1
 800cc66:	4770      	bx	lr
 800cc68:	2000      	movs	r0, #0
 800cc6a:	e7e8      	b.n	800cc3e <__hi0bits+0xc>
 800cc6c:	2020      	movs	r0, #32
 800cc6e:	4770      	bx	lr

0800cc70 <__lo0bits>:
 800cc70:	6803      	ldr	r3, [r0, #0]
 800cc72:	4601      	mov	r1, r0
 800cc74:	f013 0207 	ands.w	r2, r3, #7
 800cc78:	d00b      	beq.n	800cc92 <__lo0bits+0x22>
 800cc7a:	07da      	lsls	r2, r3, #31
 800cc7c:	d423      	bmi.n	800ccc6 <__lo0bits+0x56>
 800cc7e:	0798      	lsls	r0, r3, #30
 800cc80:	bf49      	itett	mi
 800cc82:	085b      	lsrmi	r3, r3, #1
 800cc84:	089b      	lsrpl	r3, r3, #2
 800cc86:	2001      	movmi	r0, #1
 800cc88:	600b      	strmi	r3, [r1, #0]
 800cc8a:	bf5c      	itt	pl
 800cc8c:	600b      	strpl	r3, [r1, #0]
 800cc8e:	2002      	movpl	r0, #2
 800cc90:	4770      	bx	lr
 800cc92:	b298      	uxth	r0, r3
 800cc94:	b9a8      	cbnz	r0, 800ccc2 <__lo0bits+0x52>
 800cc96:	2010      	movs	r0, #16
 800cc98:	0c1b      	lsrs	r3, r3, #16
 800cc9a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cc9e:	bf04      	itt	eq
 800cca0:	0a1b      	lsreq	r3, r3, #8
 800cca2:	3008      	addeq	r0, #8
 800cca4:	071a      	lsls	r2, r3, #28
 800cca6:	bf04      	itt	eq
 800cca8:	091b      	lsreq	r3, r3, #4
 800ccaa:	3004      	addeq	r0, #4
 800ccac:	079a      	lsls	r2, r3, #30
 800ccae:	bf04      	itt	eq
 800ccb0:	089b      	lsreq	r3, r3, #2
 800ccb2:	3002      	addeq	r0, #2
 800ccb4:	07da      	lsls	r2, r3, #31
 800ccb6:	d402      	bmi.n	800ccbe <__lo0bits+0x4e>
 800ccb8:	085b      	lsrs	r3, r3, #1
 800ccba:	d006      	beq.n	800ccca <__lo0bits+0x5a>
 800ccbc:	3001      	adds	r0, #1
 800ccbe:	600b      	str	r3, [r1, #0]
 800ccc0:	4770      	bx	lr
 800ccc2:	4610      	mov	r0, r2
 800ccc4:	e7e9      	b.n	800cc9a <__lo0bits+0x2a>
 800ccc6:	2000      	movs	r0, #0
 800ccc8:	4770      	bx	lr
 800ccca:	2020      	movs	r0, #32
 800cccc:	4770      	bx	lr

0800ccce <__i2b>:
 800ccce:	b510      	push	{r4, lr}
 800ccd0:	460c      	mov	r4, r1
 800ccd2:	2101      	movs	r1, #1
 800ccd4:	f7ff ff27 	bl	800cb26 <_Balloc>
 800ccd8:	2201      	movs	r2, #1
 800ccda:	6144      	str	r4, [r0, #20]
 800ccdc:	6102      	str	r2, [r0, #16]
 800ccde:	bd10      	pop	{r4, pc}

0800cce0 <__multiply>:
 800cce0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce4:	4614      	mov	r4, r2
 800cce6:	690a      	ldr	r2, [r1, #16]
 800cce8:	6923      	ldr	r3, [r4, #16]
 800ccea:	4688      	mov	r8, r1
 800ccec:	429a      	cmp	r2, r3
 800ccee:	bfbe      	ittt	lt
 800ccf0:	460b      	movlt	r3, r1
 800ccf2:	46a0      	movlt	r8, r4
 800ccf4:	461c      	movlt	r4, r3
 800ccf6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ccfa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ccfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd02:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cd06:	eb07 0609 	add.w	r6, r7, r9
 800cd0a:	42b3      	cmp	r3, r6
 800cd0c:	bfb8      	it	lt
 800cd0e:	3101      	addlt	r1, #1
 800cd10:	f7ff ff09 	bl	800cb26 <_Balloc>
 800cd14:	f100 0514 	add.w	r5, r0, #20
 800cd18:	462b      	mov	r3, r5
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800cd20:	4573      	cmp	r3, lr
 800cd22:	d316      	bcc.n	800cd52 <__multiply+0x72>
 800cd24:	f104 0214 	add.w	r2, r4, #20
 800cd28:	f108 0114 	add.w	r1, r8, #20
 800cd2c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800cd30:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800cd34:	9300      	str	r3, [sp, #0]
 800cd36:	9b00      	ldr	r3, [sp, #0]
 800cd38:	9201      	str	r2, [sp, #4]
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d80c      	bhi.n	800cd58 <__multiply+0x78>
 800cd3e:	2e00      	cmp	r6, #0
 800cd40:	dd03      	ble.n	800cd4a <__multiply+0x6a>
 800cd42:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d05d      	beq.n	800ce06 <__multiply+0x126>
 800cd4a:	6106      	str	r6, [r0, #16]
 800cd4c:	b003      	add	sp, #12
 800cd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd52:	f843 2b04 	str.w	r2, [r3], #4
 800cd56:	e7e3      	b.n	800cd20 <__multiply+0x40>
 800cd58:	f8b2 b000 	ldrh.w	fp, [r2]
 800cd5c:	f1bb 0f00 	cmp.w	fp, #0
 800cd60:	d023      	beq.n	800cdaa <__multiply+0xca>
 800cd62:	4689      	mov	r9, r1
 800cd64:	46ac      	mov	ip, r5
 800cd66:	f04f 0800 	mov.w	r8, #0
 800cd6a:	f859 4b04 	ldr.w	r4, [r9], #4
 800cd6e:	f8dc a000 	ldr.w	sl, [ip]
 800cd72:	b2a3      	uxth	r3, r4
 800cd74:	fa1f fa8a 	uxth.w	sl, sl
 800cd78:	fb0b a303 	mla	r3, fp, r3, sl
 800cd7c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cd80:	f8dc 4000 	ldr.w	r4, [ip]
 800cd84:	4443      	add	r3, r8
 800cd86:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cd8a:	fb0b 840a 	mla	r4, fp, sl, r8
 800cd8e:	46e2      	mov	sl, ip
 800cd90:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800cd94:	b29b      	uxth	r3, r3
 800cd96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cd9a:	454f      	cmp	r7, r9
 800cd9c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cda0:	f84a 3b04 	str.w	r3, [sl], #4
 800cda4:	d82b      	bhi.n	800cdfe <__multiply+0x11e>
 800cda6:	f8cc 8004 	str.w	r8, [ip, #4]
 800cdaa:	9b01      	ldr	r3, [sp, #4]
 800cdac:	3204      	adds	r2, #4
 800cdae:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800cdb2:	f1ba 0f00 	cmp.w	sl, #0
 800cdb6:	d020      	beq.n	800cdfa <__multiply+0x11a>
 800cdb8:	4689      	mov	r9, r1
 800cdba:	46a8      	mov	r8, r5
 800cdbc:	f04f 0b00 	mov.w	fp, #0
 800cdc0:	682b      	ldr	r3, [r5, #0]
 800cdc2:	f8b9 c000 	ldrh.w	ip, [r9]
 800cdc6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	fb0a 440c 	mla	r4, sl, ip, r4
 800cdd0:	46c4      	mov	ip, r8
 800cdd2:	445c      	add	r4, fp
 800cdd4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cdd8:	f84c 3b04 	str.w	r3, [ip], #4
 800cddc:	f859 3b04 	ldr.w	r3, [r9], #4
 800cde0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800cde4:	0c1b      	lsrs	r3, r3, #16
 800cde6:	fb0a b303 	mla	r3, sl, r3, fp
 800cdea:	454f      	cmp	r7, r9
 800cdec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800cdf0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800cdf4:	d805      	bhi.n	800ce02 <__multiply+0x122>
 800cdf6:	f8c8 3004 	str.w	r3, [r8, #4]
 800cdfa:	3504      	adds	r5, #4
 800cdfc:	e79b      	b.n	800cd36 <__multiply+0x56>
 800cdfe:	46d4      	mov	ip, sl
 800ce00:	e7b3      	b.n	800cd6a <__multiply+0x8a>
 800ce02:	46e0      	mov	r8, ip
 800ce04:	e7dd      	b.n	800cdc2 <__multiply+0xe2>
 800ce06:	3e01      	subs	r6, #1
 800ce08:	e799      	b.n	800cd3e <__multiply+0x5e>
	...

0800ce0c <__pow5mult>:
 800ce0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce10:	4615      	mov	r5, r2
 800ce12:	f012 0203 	ands.w	r2, r2, #3
 800ce16:	4606      	mov	r6, r0
 800ce18:	460f      	mov	r7, r1
 800ce1a:	d007      	beq.n	800ce2c <__pow5mult+0x20>
 800ce1c:	4c21      	ldr	r4, [pc, #132]	; (800cea4 <__pow5mult+0x98>)
 800ce1e:	3a01      	subs	r2, #1
 800ce20:	2300      	movs	r3, #0
 800ce22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce26:	f7ff fec9 	bl	800cbbc <__multadd>
 800ce2a:	4607      	mov	r7, r0
 800ce2c:	10ad      	asrs	r5, r5, #2
 800ce2e:	d035      	beq.n	800ce9c <__pow5mult+0x90>
 800ce30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ce32:	b93c      	cbnz	r4, 800ce44 <__pow5mult+0x38>
 800ce34:	2010      	movs	r0, #16
 800ce36:	f7ff fe55 	bl	800cae4 <malloc>
 800ce3a:	6270      	str	r0, [r6, #36]	; 0x24
 800ce3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce40:	6004      	str	r4, [r0, #0]
 800ce42:	60c4      	str	r4, [r0, #12]
 800ce44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ce48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce4c:	b94c      	cbnz	r4, 800ce62 <__pow5mult+0x56>
 800ce4e:	f240 2171 	movw	r1, #625	; 0x271
 800ce52:	4630      	mov	r0, r6
 800ce54:	f7ff ff3b 	bl	800ccce <__i2b>
 800ce58:	2300      	movs	r3, #0
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce60:	6003      	str	r3, [r0, #0]
 800ce62:	f04f 0800 	mov.w	r8, #0
 800ce66:	07eb      	lsls	r3, r5, #31
 800ce68:	d50a      	bpl.n	800ce80 <__pow5mult+0x74>
 800ce6a:	4639      	mov	r1, r7
 800ce6c:	4622      	mov	r2, r4
 800ce6e:	4630      	mov	r0, r6
 800ce70:	f7ff ff36 	bl	800cce0 <__multiply>
 800ce74:	4681      	mov	r9, r0
 800ce76:	4639      	mov	r1, r7
 800ce78:	4630      	mov	r0, r6
 800ce7a:	f7ff fe88 	bl	800cb8e <_Bfree>
 800ce7e:	464f      	mov	r7, r9
 800ce80:	106d      	asrs	r5, r5, #1
 800ce82:	d00b      	beq.n	800ce9c <__pow5mult+0x90>
 800ce84:	6820      	ldr	r0, [r4, #0]
 800ce86:	b938      	cbnz	r0, 800ce98 <__pow5mult+0x8c>
 800ce88:	4622      	mov	r2, r4
 800ce8a:	4621      	mov	r1, r4
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	f7ff ff27 	bl	800cce0 <__multiply>
 800ce92:	6020      	str	r0, [r4, #0]
 800ce94:	f8c0 8000 	str.w	r8, [r0]
 800ce98:	4604      	mov	r4, r0
 800ce9a:	e7e4      	b.n	800ce66 <__pow5mult+0x5a>
 800ce9c:	4638      	mov	r0, r7
 800ce9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cea2:	bf00      	nop
 800cea4:	0800f8c8 	.word	0x0800f8c8

0800cea8 <__lshift>:
 800cea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceac:	460c      	mov	r4, r1
 800ceae:	4607      	mov	r7, r0
 800ceb0:	4616      	mov	r6, r2
 800ceb2:	6923      	ldr	r3, [r4, #16]
 800ceb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ceb8:	eb0a 0903 	add.w	r9, sl, r3
 800cebc:	6849      	ldr	r1, [r1, #4]
 800cebe:	68a3      	ldr	r3, [r4, #8]
 800cec0:	f109 0501 	add.w	r5, r9, #1
 800cec4:	42ab      	cmp	r3, r5
 800cec6:	db32      	blt.n	800cf2e <__lshift+0x86>
 800cec8:	4638      	mov	r0, r7
 800ceca:	f7ff fe2c 	bl	800cb26 <_Balloc>
 800cece:	2300      	movs	r3, #0
 800ced0:	4680      	mov	r8, r0
 800ced2:	461a      	mov	r2, r3
 800ced4:	f100 0114 	add.w	r1, r0, #20
 800ced8:	4553      	cmp	r3, sl
 800ceda:	db2b      	blt.n	800cf34 <__lshift+0x8c>
 800cedc:	6920      	ldr	r0, [r4, #16]
 800cede:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cee2:	f104 0314 	add.w	r3, r4, #20
 800cee6:	f016 021f 	ands.w	r2, r6, #31
 800ceea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ceee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cef2:	d025      	beq.n	800cf40 <__lshift+0x98>
 800cef4:	2000      	movs	r0, #0
 800cef6:	f1c2 0e20 	rsb	lr, r2, #32
 800cefa:	468a      	mov	sl, r1
 800cefc:	681e      	ldr	r6, [r3, #0]
 800cefe:	4096      	lsls	r6, r2
 800cf00:	4330      	orrs	r0, r6
 800cf02:	f84a 0b04 	str.w	r0, [sl], #4
 800cf06:	f853 0b04 	ldr.w	r0, [r3], #4
 800cf0a:	459c      	cmp	ip, r3
 800cf0c:	fa20 f00e 	lsr.w	r0, r0, lr
 800cf10:	d814      	bhi.n	800cf3c <__lshift+0x94>
 800cf12:	6048      	str	r0, [r1, #4]
 800cf14:	b108      	cbz	r0, 800cf1a <__lshift+0x72>
 800cf16:	f109 0502 	add.w	r5, r9, #2
 800cf1a:	3d01      	subs	r5, #1
 800cf1c:	4638      	mov	r0, r7
 800cf1e:	f8c8 5010 	str.w	r5, [r8, #16]
 800cf22:	4621      	mov	r1, r4
 800cf24:	f7ff fe33 	bl	800cb8e <_Bfree>
 800cf28:	4640      	mov	r0, r8
 800cf2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf2e:	3101      	adds	r1, #1
 800cf30:	005b      	lsls	r3, r3, #1
 800cf32:	e7c7      	b.n	800cec4 <__lshift+0x1c>
 800cf34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cf38:	3301      	adds	r3, #1
 800cf3a:	e7cd      	b.n	800ced8 <__lshift+0x30>
 800cf3c:	4651      	mov	r1, sl
 800cf3e:	e7dc      	b.n	800cefa <__lshift+0x52>
 800cf40:	3904      	subs	r1, #4
 800cf42:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf46:	459c      	cmp	ip, r3
 800cf48:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf4c:	d8f9      	bhi.n	800cf42 <__lshift+0x9a>
 800cf4e:	e7e4      	b.n	800cf1a <__lshift+0x72>

0800cf50 <__mcmp>:
 800cf50:	6903      	ldr	r3, [r0, #16]
 800cf52:	690a      	ldr	r2, [r1, #16]
 800cf54:	b530      	push	{r4, r5, lr}
 800cf56:	1a9b      	subs	r3, r3, r2
 800cf58:	d10c      	bne.n	800cf74 <__mcmp+0x24>
 800cf5a:	0092      	lsls	r2, r2, #2
 800cf5c:	3014      	adds	r0, #20
 800cf5e:	3114      	adds	r1, #20
 800cf60:	1884      	adds	r4, r0, r2
 800cf62:	4411      	add	r1, r2
 800cf64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cf68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cf6c:	4295      	cmp	r5, r2
 800cf6e:	d003      	beq.n	800cf78 <__mcmp+0x28>
 800cf70:	d305      	bcc.n	800cf7e <__mcmp+0x2e>
 800cf72:	2301      	movs	r3, #1
 800cf74:	4618      	mov	r0, r3
 800cf76:	bd30      	pop	{r4, r5, pc}
 800cf78:	42a0      	cmp	r0, r4
 800cf7a:	d3f3      	bcc.n	800cf64 <__mcmp+0x14>
 800cf7c:	e7fa      	b.n	800cf74 <__mcmp+0x24>
 800cf7e:	f04f 33ff 	mov.w	r3, #4294967295
 800cf82:	e7f7      	b.n	800cf74 <__mcmp+0x24>

0800cf84 <__mdiff>:
 800cf84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf88:	460d      	mov	r5, r1
 800cf8a:	4607      	mov	r7, r0
 800cf8c:	4611      	mov	r1, r2
 800cf8e:	4628      	mov	r0, r5
 800cf90:	4614      	mov	r4, r2
 800cf92:	f7ff ffdd 	bl	800cf50 <__mcmp>
 800cf96:	1e06      	subs	r6, r0, #0
 800cf98:	d108      	bne.n	800cfac <__mdiff+0x28>
 800cf9a:	4631      	mov	r1, r6
 800cf9c:	4638      	mov	r0, r7
 800cf9e:	f7ff fdc2 	bl	800cb26 <_Balloc>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cfa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfac:	bfa4      	itt	ge
 800cfae:	4623      	movge	r3, r4
 800cfb0:	462c      	movge	r4, r5
 800cfb2:	4638      	mov	r0, r7
 800cfb4:	6861      	ldr	r1, [r4, #4]
 800cfb6:	bfa6      	itte	ge
 800cfb8:	461d      	movge	r5, r3
 800cfba:	2600      	movge	r6, #0
 800cfbc:	2601      	movlt	r6, #1
 800cfbe:	f7ff fdb2 	bl	800cb26 <_Balloc>
 800cfc2:	f04f 0e00 	mov.w	lr, #0
 800cfc6:	60c6      	str	r6, [r0, #12]
 800cfc8:	692b      	ldr	r3, [r5, #16]
 800cfca:	6926      	ldr	r6, [r4, #16]
 800cfcc:	f104 0214 	add.w	r2, r4, #20
 800cfd0:	f105 0914 	add.w	r9, r5, #20
 800cfd4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800cfd8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800cfdc:	f100 0114 	add.w	r1, r0, #20
 800cfe0:	f852 ab04 	ldr.w	sl, [r2], #4
 800cfe4:	f859 5b04 	ldr.w	r5, [r9], #4
 800cfe8:	fa1f f38a 	uxth.w	r3, sl
 800cfec:	4473      	add	r3, lr
 800cfee:	b2ac      	uxth	r4, r5
 800cff0:	1b1b      	subs	r3, r3, r4
 800cff2:	0c2c      	lsrs	r4, r5, #16
 800cff4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800cff8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800d002:	45c8      	cmp	r8, r9
 800d004:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800d008:	4694      	mov	ip, r2
 800d00a:	f841 4b04 	str.w	r4, [r1], #4
 800d00e:	d8e7      	bhi.n	800cfe0 <__mdiff+0x5c>
 800d010:	45bc      	cmp	ip, r7
 800d012:	d304      	bcc.n	800d01e <__mdiff+0x9a>
 800d014:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d018:	b183      	cbz	r3, 800d03c <__mdiff+0xb8>
 800d01a:	6106      	str	r6, [r0, #16]
 800d01c:	e7c4      	b.n	800cfa8 <__mdiff+0x24>
 800d01e:	f85c 4b04 	ldr.w	r4, [ip], #4
 800d022:	b2a2      	uxth	r2, r4
 800d024:	4472      	add	r2, lr
 800d026:	1413      	asrs	r3, r2, #16
 800d028:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d02c:	b292      	uxth	r2, r2
 800d02e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d032:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d036:	f841 2b04 	str.w	r2, [r1], #4
 800d03a:	e7e9      	b.n	800d010 <__mdiff+0x8c>
 800d03c:	3e01      	subs	r6, #1
 800d03e:	e7e9      	b.n	800d014 <__mdiff+0x90>

0800d040 <__d2b>:
 800d040:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d044:	461c      	mov	r4, r3
 800d046:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800d04a:	2101      	movs	r1, #1
 800d04c:	4690      	mov	r8, r2
 800d04e:	f7ff fd6a 	bl	800cb26 <_Balloc>
 800d052:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800d056:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800d05a:	4607      	mov	r7, r0
 800d05c:	bb34      	cbnz	r4, 800d0ac <__d2b+0x6c>
 800d05e:	9201      	str	r2, [sp, #4]
 800d060:	f1b8 0200 	subs.w	r2, r8, #0
 800d064:	d027      	beq.n	800d0b6 <__d2b+0x76>
 800d066:	a802      	add	r0, sp, #8
 800d068:	f840 2d08 	str.w	r2, [r0, #-8]!
 800d06c:	f7ff fe00 	bl	800cc70 <__lo0bits>
 800d070:	9900      	ldr	r1, [sp, #0]
 800d072:	b1f0      	cbz	r0, 800d0b2 <__d2b+0x72>
 800d074:	9a01      	ldr	r2, [sp, #4]
 800d076:	f1c0 0320 	rsb	r3, r0, #32
 800d07a:	fa02 f303 	lsl.w	r3, r2, r3
 800d07e:	430b      	orrs	r3, r1
 800d080:	40c2      	lsrs	r2, r0
 800d082:	617b      	str	r3, [r7, #20]
 800d084:	9201      	str	r2, [sp, #4]
 800d086:	9b01      	ldr	r3, [sp, #4]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	bf14      	ite	ne
 800d08c:	2102      	movne	r1, #2
 800d08e:	2101      	moveq	r1, #1
 800d090:	61bb      	str	r3, [r7, #24]
 800d092:	6139      	str	r1, [r7, #16]
 800d094:	b1c4      	cbz	r4, 800d0c8 <__d2b+0x88>
 800d096:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d09a:	4404      	add	r4, r0
 800d09c:	6034      	str	r4, [r6, #0]
 800d09e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d0a2:	6028      	str	r0, [r5, #0]
 800d0a4:	4638      	mov	r0, r7
 800d0a6:	b002      	add	sp, #8
 800d0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d0b0:	e7d5      	b.n	800d05e <__d2b+0x1e>
 800d0b2:	6179      	str	r1, [r7, #20]
 800d0b4:	e7e7      	b.n	800d086 <__d2b+0x46>
 800d0b6:	a801      	add	r0, sp, #4
 800d0b8:	f7ff fdda 	bl	800cc70 <__lo0bits>
 800d0bc:	2101      	movs	r1, #1
 800d0be:	9b01      	ldr	r3, [sp, #4]
 800d0c0:	6139      	str	r1, [r7, #16]
 800d0c2:	617b      	str	r3, [r7, #20]
 800d0c4:	3020      	adds	r0, #32
 800d0c6:	e7e5      	b.n	800d094 <__d2b+0x54>
 800d0c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d0cc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d0d0:	6030      	str	r0, [r6, #0]
 800d0d2:	6918      	ldr	r0, [r3, #16]
 800d0d4:	f7ff fdad 	bl	800cc32 <__hi0bits>
 800d0d8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d0dc:	e7e1      	b.n	800d0a2 <__d2b+0x62>

0800d0de <_calloc_r>:
 800d0de:	b538      	push	{r3, r4, r5, lr}
 800d0e0:	fb02 f401 	mul.w	r4, r2, r1
 800d0e4:	4621      	mov	r1, r4
 800d0e6:	f000 f855 	bl	800d194 <_malloc_r>
 800d0ea:	4605      	mov	r5, r0
 800d0ec:	b118      	cbz	r0, 800d0f6 <_calloc_r+0x18>
 800d0ee:	4622      	mov	r2, r4
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	f7fe f9f9 	bl	800b4e8 <memset>
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d0fc <_free_r>:
 800d0fc:	b538      	push	{r3, r4, r5, lr}
 800d0fe:	4605      	mov	r5, r0
 800d100:	2900      	cmp	r1, #0
 800d102:	d043      	beq.n	800d18c <_free_r+0x90>
 800d104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d108:	1f0c      	subs	r4, r1, #4
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	bfb8      	it	lt
 800d10e:	18e4      	addlt	r4, r4, r3
 800d110:	f000 fa27 	bl	800d562 <__malloc_lock>
 800d114:	4a1e      	ldr	r2, [pc, #120]	; (800d190 <_free_r+0x94>)
 800d116:	6813      	ldr	r3, [r2, #0]
 800d118:	4610      	mov	r0, r2
 800d11a:	b933      	cbnz	r3, 800d12a <_free_r+0x2e>
 800d11c:	6063      	str	r3, [r4, #4]
 800d11e:	6014      	str	r4, [r2, #0]
 800d120:	4628      	mov	r0, r5
 800d122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d126:	f000 ba1d 	b.w	800d564 <__malloc_unlock>
 800d12a:	42a3      	cmp	r3, r4
 800d12c:	d90b      	bls.n	800d146 <_free_r+0x4a>
 800d12e:	6821      	ldr	r1, [r4, #0]
 800d130:	1862      	adds	r2, r4, r1
 800d132:	4293      	cmp	r3, r2
 800d134:	bf01      	itttt	eq
 800d136:	681a      	ldreq	r2, [r3, #0]
 800d138:	685b      	ldreq	r3, [r3, #4]
 800d13a:	1852      	addeq	r2, r2, r1
 800d13c:	6022      	streq	r2, [r4, #0]
 800d13e:	6063      	str	r3, [r4, #4]
 800d140:	6004      	str	r4, [r0, #0]
 800d142:	e7ed      	b.n	800d120 <_free_r+0x24>
 800d144:	4613      	mov	r3, r2
 800d146:	685a      	ldr	r2, [r3, #4]
 800d148:	b10a      	cbz	r2, 800d14e <_free_r+0x52>
 800d14a:	42a2      	cmp	r2, r4
 800d14c:	d9fa      	bls.n	800d144 <_free_r+0x48>
 800d14e:	6819      	ldr	r1, [r3, #0]
 800d150:	1858      	adds	r0, r3, r1
 800d152:	42a0      	cmp	r0, r4
 800d154:	d10b      	bne.n	800d16e <_free_r+0x72>
 800d156:	6820      	ldr	r0, [r4, #0]
 800d158:	4401      	add	r1, r0
 800d15a:	1858      	adds	r0, r3, r1
 800d15c:	4282      	cmp	r2, r0
 800d15e:	6019      	str	r1, [r3, #0]
 800d160:	d1de      	bne.n	800d120 <_free_r+0x24>
 800d162:	6810      	ldr	r0, [r2, #0]
 800d164:	6852      	ldr	r2, [r2, #4]
 800d166:	4401      	add	r1, r0
 800d168:	6019      	str	r1, [r3, #0]
 800d16a:	605a      	str	r2, [r3, #4]
 800d16c:	e7d8      	b.n	800d120 <_free_r+0x24>
 800d16e:	d902      	bls.n	800d176 <_free_r+0x7a>
 800d170:	230c      	movs	r3, #12
 800d172:	602b      	str	r3, [r5, #0]
 800d174:	e7d4      	b.n	800d120 <_free_r+0x24>
 800d176:	6820      	ldr	r0, [r4, #0]
 800d178:	1821      	adds	r1, r4, r0
 800d17a:	428a      	cmp	r2, r1
 800d17c:	bf01      	itttt	eq
 800d17e:	6811      	ldreq	r1, [r2, #0]
 800d180:	6852      	ldreq	r2, [r2, #4]
 800d182:	1809      	addeq	r1, r1, r0
 800d184:	6021      	streq	r1, [r4, #0]
 800d186:	6062      	str	r2, [r4, #4]
 800d188:	605c      	str	r4, [r3, #4]
 800d18a:	e7c9      	b.n	800d120 <_free_r+0x24>
 800d18c:	bd38      	pop	{r3, r4, r5, pc}
 800d18e:	bf00      	nop
 800d190:	200007e0 	.word	0x200007e0

0800d194 <_malloc_r>:
 800d194:	b570      	push	{r4, r5, r6, lr}
 800d196:	1ccd      	adds	r5, r1, #3
 800d198:	f025 0503 	bic.w	r5, r5, #3
 800d19c:	3508      	adds	r5, #8
 800d19e:	2d0c      	cmp	r5, #12
 800d1a0:	bf38      	it	cc
 800d1a2:	250c      	movcc	r5, #12
 800d1a4:	2d00      	cmp	r5, #0
 800d1a6:	4606      	mov	r6, r0
 800d1a8:	db01      	blt.n	800d1ae <_malloc_r+0x1a>
 800d1aa:	42a9      	cmp	r1, r5
 800d1ac:	d903      	bls.n	800d1b6 <_malloc_r+0x22>
 800d1ae:	230c      	movs	r3, #12
 800d1b0:	6033      	str	r3, [r6, #0]
 800d1b2:	2000      	movs	r0, #0
 800d1b4:	bd70      	pop	{r4, r5, r6, pc}
 800d1b6:	f000 f9d4 	bl	800d562 <__malloc_lock>
 800d1ba:	4a21      	ldr	r2, [pc, #132]	; (800d240 <_malloc_r+0xac>)
 800d1bc:	6814      	ldr	r4, [r2, #0]
 800d1be:	4621      	mov	r1, r4
 800d1c0:	b991      	cbnz	r1, 800d1e8 <_malloc_r+0x54>
 800d1c2:	4c20      	ldr	r4, [pc, #128]	; (800d244 <_malloc_r+0xb0>)
 800d1c4:	6823      	ldr	r3, [r4, #0]
 800d1c6:	b91b      	cbnz	r3, 800d1d0 <_malloc_r+0x3c>
 800d1c8:	4630      	mov	r0, r6
 800d1ca:	f000 f98f 	bl	800d4ec <_sbrk_r>
 800d1ce:	6020      	str	r0, [r4, #0]
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	4630      	mov	r0, r6
 800d1d4:	f000 f98a 	bl	800d4ec <_sbrk_r>
 800d1d8:	1c43      	adds	r3, r0, #1
 800d1da:	d124      	bne.n	800d226 <_malloc_r+0x92>
 800d1dc:	230c      	movs	r3, #12
 800d1de:	4630      	mov	r0, r6
 800d1e0:	6033      	str	r3, [r6, #0]
 800d1e2:	f000 f9bf 	bl	800d564 <__malloc_unlock>
 800d1e6:	e7e4      	b.n	800d1b2 <_malloc_r+0x1e>
 800d1e8:	680b      	ldr	r3, [r1, #0]
 800d1ea:	1b5b      	subs	r3, r3, r5
 800d1ec:	d418      	bmi.n	800d220 <_malloc_r+0x8c>
 800d1ee:	2b0b      	cmp	r3, #11
 800d1f0:	d90f      	bls.n	800d212 <_malloc_r+0x7e>
 800d1f2:	600b      	str	r3, [r1, #0]
 800d1f4:	18cc      	adds	r4, r1, r3
 800d1f6:	50cd      	str	r5, [r1, r3]
 800d1f8:	4630      	mov	r0, r6
 800d1fa:	f000 f9b3 	bl	800d564 <__malloc_unlock>
 800d1fe:	f104 000b 	add.w	r0, r4, #11
 800d202:	1d23      	adds	r3, r4, #4
 800d204:	f020 0007 	bic.w	r0, r0, #7
 800d208:	1ac3      	subs	r3, r0, r3
 800d20a:	d0d3      	beq.n	800d1b4 <_malloc_r+0x20>
 800d20c:	425a      	negs	r2, r3
 800d20e:	50e2      	str	r2, [r4, r3]
 800d210:	e7d0      	b.n	800d1b4 <_malloc_r+0x20>
 800d212:	684b      	ldr	r3, [r1, #4]
 800d214:	428c      	cmp	r4, r1
 800d216:	bf16      	itet	ne
 800d218:	6063      	strne	r3, [r4, #4]
 800d21a:	6013      	streq	r3, [r2, #0]
 800d21c:	460c      	movne	r4, r1
 800d21e:	e7eb      	b.n	800d1f8 <_malloc_r+0x64>
 800d220:	460c      	mov	r4, r1
 800d222:	6849      	ldr	r1, [r1, #4]
 800d224:	e7cc      	b.n	800d1c0 <_malloc_r+0x2c>
 800d226:	1cc4      	adds	r4, r0, #3
 800d228:	f024 0403 	bic.w	r4, r4, #3
 800d22c:	42a0      	cmp	r0, r4
 800d22e:	d005      	beq.n	800d23c <_malloc_r+0xa8>
 800d230:	1a21      	subs	r1, r4, r0
 800d232:	4630      	mov	r0, r6
 800d234:	f000 f95a 	bl	800d4ec <_sbrk_r>
 800d238:	3001      	adds	r0, #1
 800d23a:	d0cf      	beq.n	800d1dc <_malloc_r+0x48>
 800d23c:	6025      	str	r5, [r4, #0]
 800d23e:	e7db      	b.n	800d1f8 <_malloc_r+0x64>
 800d240:	200007e0 	.word	0x200007e0
 800d244:	200007e4 	.word	0x200007e4

0800d248 <__ssputs_r>:
 800d248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d24c:	688e      	ldr	r6, [r1, #8]
 800d24e:	4682      	mov	sl, r0
 800d250:	429e      	cmp	r6, r3
 800d252:	460c      	mov	r4, r1
 800d254:	4690      	mov	r8, r2
 800d256:	4699      	mov	r9, r3
 800d258:	d837      	bhi.n	800d2ca <__ssputs_r+0x82>
 800d25a:	898a      	ldrh	r2, [r1, #12]
 800d25c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d260:	d031      	beq.n	800d2c6 <__ssputs_r+0x7e>
 800d262:	2302      	movs	r3, #2
 800d264:	6825      	ldr	r5, [r4, #0]
 800d266:	6909      	ldr	r1, [r1, #16]
 800d268:	1a6f      	subs	r7, r5, r1
 800d26a:	6965      	ldr	r5, [r4, #20]
 800d26c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d270:	fb95 f5f3 	sdiv	r5, r5, r3
 800d274:	f109 0301 	add.w	r3, r9, #1
 800d278:	443b      	add	r3, r7
 800d27a:	429d      	cmp	r5, r3
 800d27c:	bf38      	it	cc
 800d27e:	461d      	movcc	r5, r3
 800d280:	0553      	lsls	r3, r2, #21
 800d282:	d530      	bpl.n	800d2e6 <__ssputs_r+0x9e>
 800d284:	4629      	mov	r1, r5
 800d286:	f7ff ff85 	bl	800d194 <_malloc_r>
 800d28a:	4606      	mov	r6, r0
 800d28c:	b950      	cbnz	r0, 800d2a4 <__ssputs_r+0x5c>
 800d28e:	230c      	movs	r3, #12
 800d290:	f04f 30ff 	mov.w	r0, #4294967295
 800d294:	f8ca 3000 	str.w	r3, [sl]
 800d298:	89a3      	ldrh	r3, [r4, #12]
 800d29a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d29e:	81a3      	strh	r3, [r4, #12]
 800d2a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2a4:	463a      	mov	r2, r7
 800d2a6:	6921      	ldr	r1, [r4, #16]
 800d2a8:	f7ff fc32 	bl	800cb10 <memcpy>
 800d2ac:	89a3      	ldrh	r3, [r4, #12]
 800d2ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d2b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2b6:	81a3      	strh	r3, [r4, #12]
 800d2b8:	6126      	str	r6, [r4, #16]
 800d2ba:	443e      	add	r6, r7
 800d2bc:	6026      	str	r6, [r4, #0]
 800d2be:	464e      	mov	r6, r9
 800d2c0:	6165      	str	r5, [r4, #20]
 800d2c2:	1bed      	subs	r5, r5, r7
 800d2c4:	60a5      	str	r5, [r4, #8]
 800d2c6:	454e      	cmp	r6, r9
 800d2c8:	d900      	bls.n	800d2cc <__ssputs_r+0x84>
 800d2ca:	464e      	mov	r6, r9
 800d2cc:	4632      	mov	r2, r6
 800d2ce:	4641      	mov	r1, r8
 800d2d0:	6820      	ldr	r0, [r4, #0]
 800d2d2:	f000 f92d 	bl	800d530 <memmove>
 800d2d6:	68a3      	ldr	r3, [r4, #8]
 800d2d8:	2000      	movs	r0, #0
 800d2da:	1b9b      	subs	r3, r3, r6
 800d2dc:	60a3      	str	r3, [r4, #8]
 800d2de:	6823      	ldr	r3, [r4, #0]
 800d2e0:	441e      	add	r6, r3
 800d2e2:	6026      	str	r6, [r4, #0]
 800d2e4:	e7dc      	b.n	800d2a0 <__ssputs_r+0x58>
 800d2e6:	462a      	mov	r2, r5
 800d2e8:	f000 f93d 	bl	800d566 <_realloc_r>
 800d2ec:	4606      	mov	r6, r0
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	d1e2      	bne.n	800d2b8 <__ssputs_r+0x70>
 800d2f2:	6921      	ldr	r1, [r4, #16]
 800d2f4:	4650      	mov	r0, sl
 800d2f6:	f7ff ff01 	bl	800d0fc <_free_r>
 800d2fa:	e7c8      	b.n	800d28e <__ssputs_r+0x46>

0800d2fc <_svfiprintf_r>:
 800d2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d300:	461d      	mov	r5, r3
 800d302:	898b      	ldrh	r3, [r1, #12]
 800d304:	b09d      	sub	sp, #116	; 0x74
 800d306:	061f      	lsls	r7, r3, #24
 800d308:	4680      	mov	r8, r0
 800d30a:	460c      	mov	r4, r1
 800d30c:	4616      	mov	r6, r2
 800d30e:	d50f      	bpl.n	800d330 <_svfiprintf_r+0x34>
 800d310:	690b      	ldr	r3, [r1, #16]
 800d312:	b96b      	cbnz	r3, 800d330 <_svfiprintf_r+0x34>
 800d314:	2140      	movs	r1, #64	; 0x40
 800d316:	f7ff ff3d 	bl	800d194 <_malloc_r>
 800d31a:	6020      	str	r0, [r4, #0]
 800d31c:	6120      	str	r0, [r4, #16]
 800d31e:	b928      	cbnz	r0, 800d32c <_svfiprintf_r+0x30>
 800d320:	230c      	movs	r3, #12
 800d322:	f8c8 3000 	str.w	r3, [r8]
 800d326:	f04f 30ff 	mov.w	r0, #4294967295
 800d32a:	e0c8      	b.n	800d4be <_svfiprintf_r+0x1c2>
 800d32c:	2340      	movs	r3, #64	; 0x40
 800d32e:	6163      	str	r3, [r4, #20]
 800d330:	2300      	movs	r3, #0
 800d332:	9309      	str	r3, [sp, #36]	; 0x24
 800d334:	2320      	movs	r3, #32
 800d336:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d33a:	2330      	movs	r3, #48	; 0x30
 800d33c:	f04f 0b01 	mov.w	fp, #1
 800d340:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d344:	9503      	str	r5, [sp, #12]
 800d346:	4637      	mov	r7, r6
 800d348:	463d      	mov	r5, r7
 800d34a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d34e:	b10b      	cbz	r3, 800d354 <_svfiprintf_r+0x58>
 800d350:	2b25      	cmp	r3, #37	; 0x25
 800d352:	d13e      	bne.n	800d3d2 <_svfiprintf_r+0xd6>
 800d354:	ebb7 0a06 	subs.w	sl, r7, r6
 800d358:	d00b      	beq.n	800d372 <_svfiprintf_r+0x76>
 800d35a:	4653      	mov	r3, sl
 800d35c:	4632      	mov	r2, r6
 800d35e:	4621      	mov	r1, r4
 800d360:	4640      	mov	r0, r8
 800d362:	f7ff ff71 	bl	800d248 <__ssputs_r>
 800d366:	3001      	adds	r0, #1
 800d368:	f000 80a4 	beq.w	800d4b4 <_svfiprintf_r+0x1b8>
 800d36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d36e:	4453      	add	r3, sl
 800d370:	9309      	str	r3, [sp, #36]	; 0x24
 800d372:	783b      	ldrb	r3, [r7, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	f000 809d 	beq.w	800d4b4 <_svfiprintf_r+0x1b8>
 800d37a:	2300      	movs	r3, #0
 800d37c:	f04f 32ff 	mov.w	r2, #4294967295
 800d380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d384:	9304      	str	r3, [sp, #16]
 800d386:	9307      	str	r3, [sp, #28]
 800d388:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d38c:	931a      	str	r3, [sp, #104]	; 0x68
 800d38e:	462f      	mov	r7, r5
 800d390:	2205      	movs	r2, #5
 800d392:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d396:	4850      	ldr	r0, [pc, #320]	; (800d4d8 <_svfiprintf_r+0x1dc>)
 800d398:	f7ff fbac 	bl	800caf4 <memchr>
 800d39c:	9b04      	ldr	r3, [sp, #16]
 800d39e:	b9d0      	cbnz	r0, 800d3d6 <_svfiprintf_r+0xda>
 800d3a0:	06d9      	lsls	r1, r3, #27
 800d3a2:	bf44      	itt	mi
 800d3a4:	2220      	movmi	r2, #32
 800d3a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d3aa:	071a      	lsls	r2, r3, #28
 800d3ac:	bf44      	itt	mi
 800d3ae:	222b      	movmi	r2, #43	; 0x2b
 800d3b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d3b4:	782a      	ldrb	r2, [r5, #0]
 800d3b6:	2a2a      	cmp	r2, #42	; 0x2a
 800d3b8:	d015      	beq.n	800d3e6 <_svfiprintf_r+0xea>
 800d3ba:	462f      	mov	r7, r5
 800d3bc:	2000      	movs	r0, #0
 800d3be:	250a      	movs	r5, #10
 800d3c0:	9a07      	ldr	r2, [sp, #28]
 800d3c2:	4639      	mov	r1, r7
 800d3c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3c8:	3b30      	subs	r3, #48	; 0x30
 800d3ca:	2b09      	cmp	r3, #9
 800d3cc:	d94d      	bls.n	800d46a <_svfiprintf_r+0x16e>
 800d3ce:	b1b8      	cbz	r0, 800d400 <_svfiprintf_r+0x104>
 800d3d0:	e00f      	b.n	800d3f2 <_svfiprintf_r+0xf6>
 800d3d2:	462f      	mov	r7, r5
 800d3d4:	e7b8      	b.n	800d348 <_svfiprintf_r+0x4c>
 800d3d6:	4a40      	ldr	r2, [pc, #256]	; (800d4d8 <_svfiprintf_r+0x1dc>)
 800d3d8:	463d      	mov	r5, r7
 800d3da:	1a80      	subs	r0, r0, r2
 800d3dc:	fa0b f000 	lsl.w	r0, fp, r0
 800d3e0:	4318      	orrs	r0, r3
 800d3e2:	9004      	str	r0, [sp, #16]
 800d3e4:	e7d3      	b.n	800d38e <_svfiprintf_r+0x92>
 800d3e6:	9a03      	ldr	r2, [sp, #12]
 800d3e8:	1d11      	adds	r1, r2, #4
 800d3ea:	6812      	ldr	r2, [r2, #0]
 800d3ec:	9103      	str	r1, [sp, #12]
 800d3ee:	2a00      	cmp	r2, #0
 800d3f0:	db01      	blt.n	800d3f6 <_svfiprintf_r+0xfa>
 800d3f2:	9207      	str	r2, [sp, #28]
 800d3f4:	e004      	b.n	800d400 <_svfiprintf_r+0x104>
 800d3f6:	4252      	negs	r2, r2
 800d3f8:	f043 0302 	orr.w	r3, r3, #2
 800d3fc:	9207      	str	r2, [sp, #28]
 800d3fe:	9304      	str	r3, [sp, #16]
 800d400:	783b      	ldrb	r3, [r7, #0]
 800d402:	2b2e      	cmp	r3, #46	; 0x2e
 800d404:	d10c      	bne.n	800d420 <_svfiprintf_r+0x124>
 800d406:	787b      	ldrb	r3, [r7, #1]
 800d408:	2b2a      	cmp	r3, #42	; 0x2a
 800d40a:	d133      	bne.n	800d474 <_svfiprintf_r+0x178>
 800d40c:	9b03      	ldr	r3, [sp, #12]
 800d40e:	3702      	adds	r7, #2
 800d410:	1d1a      	adds	r2, r3, #4
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	9203      	str	r2, [sp, #12]
 800d416:	2b00      	cmp	r3, #0
 800d418:	bfb8      	it	lt
 800d41a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d41e:	9305      	str	r3, [sp, #20]
 800d420:	4d2e      	ldr	r5, [pc, #184]	; (800d4dc <_svfiprintf_r+0x1e0>)
 800d422:	2203      	movs	r2, #3
 800d424:	7839      	ldrb	r1, [r7, #0]
 800d426:	4628      	mov	r0, r5
 800d428:	f7ff fb64 	bl	800caf4 <memchr>
 800d42c:	b138      	cbz	r0, 800d43e <_svfiprintf_r+0x142>
 800d42e:	2340      	movs	r3, #64	; 0x40
 800d430:	1b40      	subs	r0, r0, r5
 800d432:	fa03 f000 	lsl.w	r0, r3, r0
 800d436:	9b04      	ldr	r3, [sp, #16]
 800d438:	3701      	adds	r7, #1
 800d43a:	4303      	orrs	r3, r0
 800d43c:	9304      	str	r3, [sp, #16]
 800d43e:	7839      	ldrb	r1, [r7, #0]
 800d440:	2206      	movs	r2, #6
 800d442:	4827      	ldr	r0, [pc, #156]	; (800d4e0 <_svfiprintf_r+0x1e4>)
 800d444:	1c7e      	adds	r6, r7, #1
 800d446:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d44a:	f7ff fb53 	bl	800caf4 <memchr>
 800d44e:	2800      	cmp	r0, #0
 800d450:	d038      	beq.n	800d4c4 <_svfiprintf_r+0x1c8>
 800d452:	4b24      	ldr	r3, [pc, #144]	; (800d4e4 <_svfiprintf_r+0x1e8>)
 800d454:	bb13      	cbnz	r3, 800d49c <_svfiprintf_r+0x1a0>
 800d456:	9b03      	ldr	r3, [sp, #12]
 800d458:	3307      	adds	r3, #7
 800d45a:	f023 0307 	bic.w	r3, r3, #7
 800d45e:	3308      	adds	r3, #8
 800d460:	9303      	str	r3, [sp, #12]
 800d462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d464:	444b      	add	r3, r9
 800d466:	9309      	str	r3, [sp, #36]	; 0x24
 800d468:	e76d      	b.n	800d346 <_svfiprintf_r+0x4a>
 800d46a:	fb05 3202 	mla	r2, r5, r2, r3
 800d46e:	2001      	movs	r0, #1
 800d470:	460f      	mov	r7, r1
 800d472:	e7a6      	b.n	800d3c2 <_svfiprintf_r+0xc6>
 800d474:	2300      	movs	r3, #0
 800d476:	250a      	movs	r5, #10
 800d478:	4619      	mov	r1, r3
 800d47a:	3701      	adds	r7, #1
 800d47c:	9305      	str	r3, [sp, #20]
 800d47e:	4638      	mov	r0, r7
 800d480:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d484:	3a30      	subs	r2, #48	; 0x30
 800d486:	2a09      	cmp	r2, #9
 800d488:	d903      	bls.n	800d492 <_svfiprintf_r+0x196>
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d0c8      	beq.n	800d420 <_svfiprintf_r+0x124>
 800d48e:	9105      	str	r1, [sp, #20]
 800d490:	e7c6      	b.n	800d420 <_svfiprintf_r+0x124>
 800d492:	fb05 2101 	mla	r1, r5, r1, r2
 800d496:	2301      	movs	r3, #1
 800d498:	4607      	mov	r7, r0
 800d49a:	e7f0      	b.n	800d47e <_svfiprintf_r+0x182>
 800d49c:	ab03      	add	r3, sp, #12
 800d49e:	9300      	str	r3, [sp, #0]
 800d4a0:	4622      	mov	r2, r4
 800d4a2:	4b11      	ldr	r3, [pc, #68]	; (800d4e8 <_svfiprintf_r+0x1ec>)
 800d4a4:	a904      	add	r1, sp, #16
 800d4a6:	4640      	mov	r0, r8
 800d4a8:	f7fe f8b8 	bl	800b61c <_printf_float>
 800d4ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d4b0:	4681      	mov	r9, r0
 800d4b2:	d1d6      	bne.n	800d462 <_svfiprintf_r+0x166>
 800d4b4:	89a3      	ldrh	r3, [r4, #12]
 800d4b6:	065b      	lsls	r3, r3, #25
 800d4b8:	f53f af35 	bmi.w	800d326 <_svfiprintf_r+0x2a>
 800d4bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4be:	b01d      	add	sp, #116	; 0x74
 800d4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4c4:	ab03      	add	r3, sp, #12
 800d4c6:	9300      	str	r3, [sp, #0]
 800d4c8:	4622      	mov	r2, r4
 800d4ca:	4b07      	ldr	r3, [pc, #28]	; (800d4e8 <_svfiprintf_r+0x1ec>)
 800d4cc:	a904      	add	r1, sp, #16
 800d4ce:	4640      	mov	r0, r8
 800d4d0:	f7fe fb50 	bl	800bb74 <_printf_i>
 800d4d4:	e7ea      	b.n	800d4ac <_svfiprintf_r+0x1b0>
 800d4d6:	bf00      	nop
 800d4d8:	0800f8d4 	.word	0x0800f8d4
 800d4dc:	0800f8da 	.word	0x0800f8da
 800d4e0:	0800f8de 	.word	0x0800f8de
 800d4e4:	0800b61d 	.word	0x0800b61d
 800d4e8:	0800d249 	.word	0x0800d249

0800d4ec <_sbrk_r>:
 800d4ec:	b538      	push	{r3, r4, r5, lr}
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	4c05      	ldr	r4, [pc, #20]	; (800d508 <_sbrk_r+0x1c>)
 800d4f2:	4605      	mov	r5, r0
 800d4f4:	4608      	mov	r0, r1
 800d4f6:	6023      	str	r3, [r4, #0]
 800d4f8:	f7fd fab6 	bl	800aa68 <_sbrk>
 800d4fc:	1c43      	adds	r3, r0, #1
 800d4fe:	d102      	bne.n	800d506 <_sbrk_r+0x1a>
 800d500:	6823      	ldr	r3, [r4, #0]
 800d502:	b103      	cbz	r3, 800d506 <_sbrk_r+0x1a>
 800d504:	602b      	str	r3, [r5, #0]
 800d506:	bd38      	pop	{r3, r4, r5, pc}
 800d508:	2000231c 	.word	0x2000231c

0800d50c <__ascii_mbtowc>:
 800d50c:	b082      	sub	sp, #8
 800d50e:	b901      	cbnz	r1, 800d512 <__ascii_mbtowc+0x6>
 800d510:	a901      	add	r1, sp, #4
 800d512:	b142      	cbz	r2, 800d526 <__ascii_mbtowc+0x1a>
 800d514:	b14b      	cbz	r3, 800d52a <__ascii_mbtowc+0x1e>
 800d516:	7813      	ldrb	r3, [r2, #0]
 800d518:	600b      	str	r3, [r1, #0]
 800d51a:	7812      	ldrb	r2, [r2, #0]
 800d51c:	1c10      	adds	r0, r2, #0
 800d51e:	bf18      	it	ne
 800d520:	2001      	movne	r0, #1
 800d522:	b002      	add	sp, #8
 800d524:	4770      	bx	lr
 800d526:	4610      	mov	r0, r2
 800d528:	e7fb      	b.n	800d522 <__ascii_mbtowc+0x16>
 800d52a:	f06f 0001 	mvn.w	r0, #1
 800d52e:	e7f8      	b.n	800d522 <__ascii_mbtowc+0x16>

0800d530 <memmove>:
 800d530:	4288      	cmp	r0, r1
 800d532:	b510      	push	{r4, lr}
 800d534:	eb01 0302 	add.w	r3, r1, r2
 800d538:	d807      	bhi.n	800d54a <memmove+0x1a>
 800d53a:	1e42      	subs	r2, r0, #1
 800d53c:	4299      	cmp	r1, r3
 800d53e:	d00a      	beq.n	800d556 <memmove+0x26>
 800d540:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d544:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d548:	e7f8      	b.n	800d53c <memmove+0xc>
 800d54a:	4283      	cmp	r3, r0
 800d54c:	d9f5      	bls.n	800d53a <memmove+0xa>
 800d54e:	1881      	adds	r1, r0, r2
 800d550:	1ad2      	subs	r2, r2, r3
 800d552:	42d3      	cmn	r3, r2
 800d554:	d100      	bne.n	800d558 <memmove+0x28>
 800d556:	bd10      	pop	{r4, pc}
 800d558:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d55c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d560:	e7f7      	b.n	800d552 <memmove+0x22>

0800d562 <__malloc_lock>:
 800d562:	4770      	bx	lr

0800d564 <__malloc_unlock>:
 800d564:	4770      	bx	lr

0800d566 <_realloc_r>:
 800d566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d568:	4607      	mov	r7, r0
 800d56a:	4614      	mov	r4, r2
 800d56c:	460e      	mov	r6, r1
 800d56e:	b921      	cbnz	r1, 800d57a <_realloc_r+0x14>
 800d570:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d574:	4611      	mov	r1, r2
 800d576:	f7ff be0d 	b.w	800d194 <_malloc_r>
 800d57a:	b922      	cbnz	r2, 800d586 <_realloc_r+0x20>
 800d57c:	f7ff fdbe 	bl	800d0fc <_free_r>
 800d580:	4625      	mov	r5, r4
 800d582:	4628      	mov	r0, r5
 800d584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d586:	f000 f821 	bl	800d5cc <_malloc_usable_size_r>
 800d58a:	42a0      	cmp	r0, r4
 800d58c:	d20f      	bcs.n	800d5ae <_realloc_r+0x48>
 800d58e:	4621      	mov	r1, r4
 800d590:	4638      	mov	r0, r7
 800d592:	f7ff fdff 	bl	800d194 <_malloc_r>
 800d596:	4605      	mov	r5, r0
 800d598:	2800      	cmp	r0, #0
 800d59a:	d0f2      	beq.n	800d582 <_realloc_r+0x1c>
 800d59c:	4631      	mov	r1, r6
 800d59e:	4622      	mov	r2, r4
 800d5a0:	f7ff fab6 	bl	800cb10 <memcpy>
 800d5a4:	4631      	mov	r1, r6
 800d5a6:	4638      	mov	r0, r7
 800d5a8:	f7ff fda8 	bl	800d0fc <_free_r>
 800d5ac:	e7e9      	b.n	800d582 <_realloc_r+0x1c>
 800d5ae:	4635      	mov	r5, r6
 800d5b0:	e7e7      	b.n	800d582 <_realloc_r+0x1c>

0800d5b2 <__ascii_wctomb>:
 800d5b2:	b149      	cbz	r1, 800d5c8 <__ascii_wctomb+0x16>
 800d5b4:	2aff      	cmp	r2, #255	; 0xff
 800d5b6:	bf8b      	itete	hi
 800d5b8:	238a      	movhi	r3, #138	; 0x8a
 800d5ba:	700a      	strbls	r2, [r1, #0]
 800d5bc:	6003      	strhi	r3, [r0, #0]
 800d5be:	2001      	movls	r0, #1
 800d5c0:	bf88      	it	hi
 800d5c2:	f04f 30ff 	movhi.w	r0, #4294967295
 800d5c6:	4770      	bx	lr
 800d5c8:	4608      	mov	r0, r1
 800d5ca:	4770      	bx	lr

0800d5cc <_malloc_usable_size_r>:
 800d5cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5d0:	1f18      	subs	r0, r3, #4
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	bfbc      	itt	lt
 800d5d6:	580b      	ldrlt	r3, [r1, r0]
 800d5d8:	18c0      	addlt	r0, r0, r3
 800d5da:	4770      	bx	lr

0800d5dc <cos>:
 800d5dc:	b530      	push	{r4, r5, lr}
 800d5de:	4a18      	ldr	r2, [pc, #96]	; (800d640 <cos+0x64>)
 800d5e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d5e4:	4293      	cmp	r3, r2
 800d5e6:	b087      	sub	sp, #28
 800d5e8:	dc04      	bgt.n	800d5f4 <cos+0x18>
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	f000 fb1b 	bl	800dc28 <__kernel_cos>
 800d5f2:	e006      	b.n	800d602 <cos+0x26>
 800d5f4:	4a13      	ldr	r2, [pc, #76]	; (800d644 <cos+0x68>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	dd05      	ble.n	800d606 <cos+0x2a>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	f7f2 fdb3 	bl	8000168 <__aeabi_dsub>
 800d602:	b007      	add	sp, #28
 800d604:	bd30      	pop	{r4, r5, pc}
 800d606:	aa02      	add	r2, sp, #8
 800d608:	f000 f872 	bl	800d6f0 <__ieee754_rem_pio2>
 800d60c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d610:	f000 0403 	and.w	r4, r0, #3
 800d614:	2c01      	cmp	r4, #1
 800d616:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d61a:	d008      	beq.n	800d62e <cos+0x52>
 800d61c:	2c02      	cmp	r4, #2
 800d61e:	d00c      	beq.n	800d63a <cos+0x5e>
 800d620:	2c00      	cmp	r4, #0
 800d622:	d0e4      	beq.n	800d5ee <cos+0x12>
 800d624:	2401      	movs	r4, #1
 800d626:	9400      	str	r4, [sp, #0]
 800d628:	f000 ff06 	bl	800e438 <__kernel_sin>
 800d62c:	e7e9      	b.n	800d602 <cos+0x26>
 800d62e:	9400      	str	r4, [sp, #0]
 800d630:	f000 ff02 	bl	800e438 <__kernel_sin>
 800d634:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d638:	e7e3      	b.n	800d602 <cos+0x26>
 800d63a:	f000 faf5 	bl	800dc28 <__kernel_cos>
 800d63e:	e7f9      	b.n	800d634 <cos+0x58>
 800d640:	3fe921fb 	.word	0x3fe921fb
 800d644:	7fefffff 	.word	0x7fefffff

0800d648 <sqrt>:
 800d648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d64c:	b08b      	sub	sp, #44	; 0x2c
 800d64e:	4604      	mov	r4, r0
 800d650:	460d      	mov	r5, r1
 800d652:	f000 fa3d 	bl	800dad0 <__ieee754_sqrt>
 800d656:	4b24      	ldr	r3, [pc, #144]	; (800d6e8 <sqrt+0xa0>)
 800d658:	4680      	mov	r8, r0
 800d65a:	f993 a000 	ldrsb.w	sl, [r3]
 800d65e:	4689      	mov	r9, r1
 800d660:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d664:	d02b      	beq.n	800d6be <sqrt+0x76>
 800d666:	4622      	mov	r2, r4
 800d668:	462b      	mov	r3, r5
 800d66a:	4620      	mov	r0, r4
 800d66c:	4629      	mov	r1, r5
 800d66e:	f7f3 f9cd 	bl	8000a0c <__aeabi_dcmpun>
 800d672:	4683      	mov	fp, r0
 800d674:	bb18      	cbnz	r0, 800d6be <sqrt+0x76>
 800d676:	2600      	movs	r6, #0
 800d678:	2700      	movs	r7, #0
 800d67a:	4632      	mov	r2, r6
 800d67c:	463b      	mov	r3, r7
 800d67e:	4620      	mov	r0, r4
 800d680:	4629      	mov	r1, r5
 800d682:	f7f3 f99b 	bl	80009bc <__aeabi_dcmplt>
 800d686:	b1d0      	cbz	r0, 800d6be <sqrt+0x76>
 800d688:	2301      	movs	r3, #1
 800d68a:	9300      	str	r3, [sp, #0]
 800d68c:	4b17      	ldr	r3, [pc, #92]	; (800d6ec <sqrt+0xa4>)
 800d68e:	f8cd b020 	str.w	fp, [sp, #32]
 800d692:	9301      	str	r3, [sp, #4]
 800d694:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800d698:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d69c:	f1ba 0f00 	cmp.w	sl, #0
 800d6a0:	d112      	bne.n	800d6c8 <sqrt+0x80>
 800d6a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d6a6:	4668      	mov	r0, sp
 800d6a8:	f001 f806 	bl	800e6b8 <matherr>
 800d6ac:	b1b8      	cbz	r0, 800d6de <sqrt+0x96>
 800d6ae:	9b08      	ldr	r3, [sp, #32]
 800d6b0:	b11b      	cbz	r3, 800d6ba <sqrt+0x72>
 800d6b2:	f7fd feef 	bl	800b494 <__errno>
 800d6b6:	9b08      	ldr	r3, [sp, #32]
 800d6b8:	6003      	str	r3, [r0, #0]
 800d6ba:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800d6be:	4640      	mov	r0, r8
 800d6c0:	4649      	mov	r1, r9
 800d6c2:	b00b      	add	sp, #44	; 0x2c
 800d6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6c8:	4632      	mov	r2, r6
 800d6ca:	463b      	mov	r3, r7
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	4639      	mov	r1, r7
 800d6d0:	f7f3 f82c 	bl	800072c <__aeabi_ddiv>
 800d6d4:	f1ba 0f02 	cmp.w	sl, #2
 800d6d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d6dc:	d1e3      	bne.n	800d6a6 <sqrt+0x5e>
 800d6de:	f7fd fed9 	bl	800b494 <__errno>
 800d6e2:	2321      	movs	r3, #33	; 0x21
 800d6e4:	6003      	str	r3, [r0, #0]
 800d6e6:	e7e2      	b.n	800d6ae <sqrt+0x66>
 800d6e8:	20000364 	.word	0x20000364
 800d6ec:	0800f9f0 	.word	0x0800f9f0

0800d6f0 <__ieee754_rem_pio2>:
 800d6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6f4:	4614      	mov	r4, r2
 800d6f6:	4ac2      	ldr	r2, [pc, #776]	; (800da00 <__ieee754_rem_pio2+0x310>)
 800d6f8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800d6fc:	4592      	cmp	sl, r2
 800d6fe:	b08d      	sub	sp, #52	; 0x34
 800d700:	468b      	mov	fp, r1
 800d702:	dc07      	bgt.n	800d714 <__ieee754_rem_pio2+0x24>
 800d704:	2200      	movs	r2, #0
 800d706:	2300      	movs	r3, #0
 800d708:	e9c4 0100 	strd	r0, r1, [r4]
 800d70c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d710:	2500      	movs	r5, #0
 800d712:	e023      	b.n	800d75c <__ieee754_rem_pio2+0x6c>
 800d714:	4abb      	ldr	r2, [pc, #748]	; (800da04 <__ieee754_rem_pio2+0x314>)
 800d716:	4592      	cmp	sl, r2
 800d718:	dc71      	bgt.n	800d7fe <__ieee754_rem_pio2+0x10e>
 800d71a:	a3ab      	add	r3, pc, #684	; (adr r3, 800d9c8 <__ieee754_rem_pio2+0x2d8>)
 800d71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d720:	2900      	cmp	r1, #0
 800d722:	4db9      	ldr	r5, [pc, #740]	; (800da08 <__ieee754_rem_pio2+0x318>)
 800d724:	dd36      	ble.n	800d794 <__ieee754_rem_pio2+0xa4>
 800d726:	f7f2 fd1f 	bl	8000168 <__aeabi_dsub>
 800d72a:	45aa      	cmp	sl, r5
 800d72c:	4606      	mov	r6, r0
 800d72e:	460f      	mov	r7, r1
 800d730:	d018      	beq.n	800d764 <__ieee754_rem_pio2+0x74>
 800d732:	a3a7      	add	r3, pc, #668	; (adr r3, 800d9d0 <__ieee754_rem_pio2+0x2e0>)
 800d734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d738:	f7f2 fd16 	bl	8000168 <__aeabi_dsub>
 800d73c:	4602      	mov	r2, r0
 800d73e:	460b      	mov	r3, r1
 800d740:	4630      	mov	r0, r6
 800d742:	e9c4 2300 	strd	r2, r3, [r4]
 800d746:	4639      	mov	r1, r7
 800d748:	f7f2 fd0e 	bl	8000168 <__aeabi_dsub>
 800d74c:	a3a0      	add	r3, pc, #640	; (adr r3, 800d9d0 <__ieee754_rem_pio2+0x2e0>)
 800d74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d752:	f7f2 fd09 	bl	8000168 <__aeabi_dsub>
 800d756:	2501      	movs	r5, #1
 800d758:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d75c:	4628      	mov	r0, r5
 800d75e:	b00d      	add	sp, #52	; 0x34
 800d760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d764:	a39c      	add	r3, pc, #624	; (adr r3, 800d9d8 <__ieee754_rem_pio2+0x2e8>)
 800d766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76a:	f7f2 fcfd 	bl	8000168 <__aeabi_dsub>
 800d76e:	a39c      	add	r3, pc, #624	; (adr r3, 800d9e0 <__ieee754_rem_pio2+0x2f0>)
 800d770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d774:	4606      	mov	r6, r0
 800d776:	460f      	mov	r7, r1
 800d778:	f7f2 fcf6 	bl	8000168 <__aeabi_dsub>
 800d77c:	4602      	mov	r2, r0
 800d77e:	460b      	mov	r3, r1
 800d780:	4630      	mov	r0, r6
 800d782:	e9c4 2300 	strd	r2, r3, [r4]
 800d786:	4639      	mov	r1, r7
 800d788:	f7f2 fcee 	bl	8000168 <__aeabi_dsub>
 800d78c:	a394      	add	r3, pc, #592	; (adr r3, 800d9e0 <__ieee754_rem_pio2+0x2f0>)
 800d78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d792:	e7de      	b.n	800d752 <__ieee754_rem_pio2+0x62>
 800d794:	f7f2 fcea 	bl	800016c <__adddf3>
 800d798:	45aa      	cmp	sl, r5
 800d79a:	4606      	mov	r6, r0
 800d79c:	460f      	mov	r7, r1
 800d79e:	d016      	beq.n	800d7ce <__ieee754_rem_pio2+0xde>
 800d7a0:	a38b      	add	r3, pc, #556	; (adr r3, 800d9d0 <__ieee754_rem_pio2+0x2e0>)
 800d7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a6:	f7f2 fce1 	bl	800016c <__adddf3>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	460b      	mov	r3, r1
 800d7ae:	4630      	mov	r0, r6
 800d7b0:	e9c4 2300 	strd	r2, r3, [r4]
 800d7b4:	4639      	mov	r1, r7
 800d7b6:	f7f2 fcd7 	bl	8000168 <__aeabi_dsub>
 800d7ba:	a385      	add	r3, pc, #532	; (adr r3, 800d9d0 <__ieee754_rem_pio2+0x2e0>)
 800d7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c0:	f7f2 fcd4 	bl	800016c <__adddf3>
 800d7c4:	f04f 35ff 	mov.w	r5, #4294967295
 800d7c8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d7cc:	e7c6      	b.n	800d75c <__ieee754_rem_pio2+0x6c>
 800d7ce:	a382      	add	r3, pc, #520	; (adr r3, 800d9d8 <__ieee754_rem_pio2+0x2e8>)
 800d7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d4:	f7f2 fcca 	bl	800016c <__adddf3>
 800d7d8:	a381      	add	r3, pc, #516	; (adr r3, 800d9e0 <__ieee754_rem_pio2+0x2f0>)
 800d7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7de:	4606      	mov	r6, r0
 800d7e0:	460f      	mov	r7, r1
 800d7e2:	f7f2 fcc3 	bl	800016c <__adddf3>
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	4630      	mov	r0, r6
 800d7ec:	e9c4 2300 	strd	r2, r3, [r4]
 800d7f0:	4639      	mov	r1, r7
 800d7f2:	f7f2 fcb9 	bl	8000168 <__aeabi_dsub>
 800d7f6:	a37a      	add	r3, pc, #488	; (adr r3, 800d9e0 <__ieee754_rem_pio2+0x2f0>)
 800d7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fc:	e7e0      	b.n	800d7c0 <__ieee754_rem_pio2+0xd0>
 800d7fe:	4a83      	ldr	r2, [pc, #524]	; (800da0c <__ieee754_rem_pio2+0x31c>)
 800d800:	4592      	cmp	sl, r2
 800d802:	f300 80d2 	bgt.w	800d9aa <__ieee754_rem_pio2+0x2ba>
 800d806:	f000 fecd 	bl	800e5a4 <fabs>
 800d80a:	a377      	add	r3, pc, #476	; (adr r3, 800d9e8 <__ieee754_rem_pio2+0x2f8>)
 800d80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d810:	4606      	mov	r6, r0
 800d812:	460f      	mov	r7, r1
 800d814:	f7f2 fe60 	bl	80004d8 <__aeabi_dmul>
 800d818:	2200      	movs	r2, #0
 800d81a:	4b7d      	ldr	r3, [pc, #500]	; (800da10 <__ieee754_rem_pio2+0x320>)
 800d81c:	f7f2 fca6 	bl	800016c <__adddf3>
 800d820:	f7f3 f90a 	bl	8000a38 <__aeabi_d2iz>
 800d824:	4605      	mov	r5, r0
 800d826:	f7f2 fded 	bl	8000404 <__aeabi_i2d>
 800d82a:	a367      	add	r3, pc, #412	; (adr r3, 800d9c8 <__ieee754_rem_pio2+0x2d8>)
 800d82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d830:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d834:	f7f2 fe50 	bl	80004d8 <__aeabi_dmul>
 800d838:	4602      	mov	r2, r0
 800d83a:	460b      	mov	r3, r1
 800d83c:	4630      	mov	r0, r6
 800d83e:	4639      	mov	r1, r7
 800d840:	f7f2 fc92 	bl	8000168 <__aeabi_dsub>
 800d844:	a362      	add	r3, pc, #392	; (adr r3, 800d9d0 <__ieee754_rem_pio2+0x2e0>)
 800d846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84a:	4606      	mov	r6, r0
 800d84c:	460f      	mov	r7, r1
 800d84e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d852:	f7f2 fe41 	bl	80004d8 <__aeabi_dmul>
 800d856:	2d1f      	cmp	r5, #31
 800d858:	4680      	mov	r8, r0
 800d85a:	4689      	mov	r9, r1
 800d85c:	dc0e      	bgt.n	800d87c <__ieee754_rem_pio2+0x18c>
 800d85e:	4b6d      	ldr	r3, [pc, #436]	; (800da14 <__ieee754_rem_pio2+0x324>)
 800d860:	1e6a      	subs	r2, r5, #1
 800d862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d866:	4553      	cmp	r3, sl
 800d868:	d008      	beq.n	800d87c <__ieee754_rem_pio2+0x18c>
 800d86a:	4642      	mov	r2, r8
 800d86c:	464b      	mov	r3, r9
 800d86e:	4630      	mov	r0, r6
 800d870:	4639      	mov	r1, r7
 800d872:	f7f2 fc79 	bl	8000168 <__aeabi_dsub>
 800d876:	e9c4 0100 	strd	r0, r1, [r4]
 800d87a:	e011      	b.n	800d8a0 <__ieee754_rem_pio2+0x1b0>
 800d87c:	464b      	mov	r3, r9
 800d87e:	4642      	mov	r2, r8
 800d880:	4630      	mov	r0, r6
 800d882:	4639      	mov	r1, r7
 800d884:	f7f2 fc70 	bl	8000168 <__aeabi_dsub>
 800d888:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800d88c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d890:	ebaa 0303 	sub.w	r3, sl, r3
 800d894:	2b10      	cmp	r3, #16
 800d896:	dc1f      	bgt.n	800d8d8 <__ieee754_rem_pio2+0x1e8>
 800d898:	4602      	mov	r2, r0
 800d89a:	460b      	mov	r3, r1
 800d89c:	e9c4 2300 	strd	r2, r3, [r4]
 800d8a0:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	4653      	mov	r3, sl
 800d8a8:	4639      	mov	r1, r7
 800d8aa:	f7f2 fc5d 	bl	8000168 <__aeabi_dsub>
 800d8ae:	4642      	mov	r2, r8
 800d8b0:	464b      	mov	r3, r9
 800d8b2:	f7f2 fc59 	bl	8000168 <__aeabi_dsub>
 800d8b6:	4602      	mov	r2, r0
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	f1bb 0f00 	cmp.w	fp, #0
 800d8be:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d8c2:	f6bf af4b 	bge.w	800d75c <__ieee754_rem_pio2+0x6c>
 800d8c6:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800d8ca:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800d8ce:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d8d2:	60e1      	str	r1, [r4, #12]
 800d8d4:	426d      	negs	r5, r5
 800d8d6:	e741      	b.n	800d75c <__ieee754_rem_pio2+0x6c>
 800d8d8:	a33f      	add	r3, pc, #252	; (adr r3, 800d9d8 <__ieee754_rem_pio2+0x2e8>)
 800d8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8e2:	f7f2 fdf9 	bl	80004d8 <__aeabi_dmul>
 800d8e6:	4680      	mov	r8, r0
 800d8e8:	4689      	mov	r9, r1
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	4630      	mov	r0, r6
 800d8f0:	4639      	mov	r1, r7
 800d8f2:	f7f2 fc39 	bl	8000168 <__aeabi_dsub>
 800d8f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	4630      	mov	r0, r6
 800d900:	4639      	mov	r1, r7
 800d902:	f7f2 fc31 	bl	8000168 <__aeabi_dsub>
 800d906:	4642      	mov	r2, r8
 800d908:	464b      	mov	r3, r9
 800d90a:	f7f2 fc2d 	bl	8000168 <__aeabi_dsub>
 800d90e:	a334      	add	r3, pc, #208	; (adr r3, 800d9e0 <__ieee754_rem_pio2+0x2f0>)
 800d910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d914:	4606      	mov	r6, r0
 800d916:	460f      	mov	r7, r1
 800d918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d91c:	f7f2 fddc 	bl	80004d8 <__aeabi_dmul>
 800d920:	4632      	mov	r2, r6
 800d922:	463b      	mov	r3, r7
 800d924:	f7f2 fc20 	bl	8000168 <__aeabi_dsub>
 800d928:	460b      	mov	r3, r1
 800d92a:	4602      	mov	r2, r0
 800d92c:	4680      	mov	r8, r0
 800d92e:	4689      	mov	r9, r1
 800d930:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d934:	f7f2 fc18 	bl	8000168 <__aeabi_dsub>
 800d938:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d93c:	ebaa 0a03 	sub.w	sl, sl, r3
 800d940:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800d944:	dc06      	bgt.n	800d954 <__ieee754_rem_pio2+0x264>
 800d946:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800d94a:	4602      	mov	r2, r0
 800d94c:	460b      	mov	r3, r1
 800d94e:	e9c4 2300 	strd	r2, r3, [r4]
 800d952:	e7a5      	b.n	800d8a0 <__ieee754_rem_pio2+0x1b0>
 800d954:	a326      	add	r3, pc, #152	; (adr r3, 800d9f0 <__ieee754_rem_pio2+0x300>)
 800d956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d95e:	f7f2 fdbb 	bl	80004d8 <__aeabi_dmul>
 800d962:	4680      	mov	r8, r0
 800d964:	4689      	mov	r9, r1
 800d966:	4602      	mov	r2, r0
 800d968:	460b      	mov	r3, r1
 800d96a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d96e:	f7f2 fbfb 	bl	8000168 <__aeabi_dsub>
 800d972:	4602      	mov	r2, r0
 800d974:	460b      	mov	r3, r1
 800d976:	4606      	mov	r6, r0
 800d978:	460f      	mov	r7, r1
 800d97a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d97e:	f7f2 fbf3 	bl	8000168 <__aeabi_dsub>
 800d982:	4642      	mov	r2, r8
 800d984:	464b      	mov	r3, r9
 800d986:	f7f2 fbef 	bl	8000168 <__aeabi_dsub>
 800d98a:	a31b      	add	r3, pc, #108	; (adr r3, 800d9f8 <__ieee754_rem_pio2+0x308>)
 800d98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d990:	4680      	mov	r8, r0
 800d992:	4689      	mov	r9, r1
 800d994:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d998:	f7f2 fd9e 	bl	80004d8 <__aeabi_dmul>
 800d99c:	4642      	mov	r2, r8
 800d99e:	464b      	mov	r3, r9
 800d9a0:	f7f2 fbe2 	bl	8000168 <__aeabi_dsub>
 800d9a4:	4680      	mov	r8, r0
 800d9a6:	4689      	mov	r9, r1
 800d9a8:	e75f      	b.n	800d86a <__ieee754_rem_pio2+0x17a>
 800d9aa:	4a1b      	ldr	r2, [pc, #108]	; (800da18 <__ieee754_rem_pio2+0x328>)
 800d9ac:	4592      	cmp	sl, r2
 800d9ae:	dd35      	ble.n	800da1c <__ieee754_rem_pio2+0x32c>
 800d9b0:	4602      	mov	r2, r0
 800d9b2:	460b      	mov	r3, r1
 800d9b4:	f7f2 fbd8 	bl	8000168 <__aeabi_dsub>
 800d9b8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d9bc:	e9c4 0100 	strd	r0, r1, [r4]
 800d9c0:	e6a6      	b.n	800d710 <__ieee754_rem_pio2+0x20>
 800d9c2:	bf00      	nop
 800d9c4:	f3af 8000 	nop.w
 800d9c8:	54400000 	.word	0x54400000
 800d9cc:	3ff921fb 	.word	0x3ff921fb
 800d9d0:	1a626331 	.word	0x1a626331
 800d9d4:	3dd0b461 	.word	0x3dd0b461
 800d9d8:	1a600000 	.word	0x1a600000
 800d9dc:	3dd0b461 	.word	0x3dd0b461
 800d9e0:	2e037073 	.word	0x2e037073
 800d9e4:	3ba3198a 	.word	0x3ba3198a
 800d9e8:	6dc9c883 	.word	0x6dc9c883
 800d9ec:	3fe45f30 	.word	0x3fe45f30
 800d9f0:	2e000000 	.word	0x2e000000
 800d9f4:	3ba3198a 	.word	0x3ba3198a
 800d9f8:	252049c1 	.word	0x252049c1
 800d9fc:	397b839a 	.word	0x397b839a
 800da00:	3fe921fb 	.word	0x3fe921fb
 800da04:	4002d97b 	.word	0x4002d97b
 800da08:	3ff921fb 	.word	0x3ff921fb
 800da0c:	413921fb 	.word	0x413921fb
 800da10:	3fe00000 	.word	0x3fe00000
 800da14:	0800f9f8 	.word	0x0800f9f8
 800da18:	7fefffff 	.word	0x7fefffff
 800da1c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800da20:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800da24:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800da28:	460f      	mov	r7, r1
 800da2a:	4606      	mov	r6, r0
 800da2c:	f7f3 f804 	bl	8000a38 <__aeabi_d2iz>
 800da30:	f7f2 fce8 	bl	8000404 <__aeabi_i2d>
 800da34:	4602      	mov	r2, r0
 800da36:	460b      	mov	r3, r1
 800da38:	4630      	mov	r0, r6
 800da3a:	4639      	mov	r1, r7
 800da3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800da40:	f7f2 fb92 	bl	8000168 <__aeabi_dsub>
 800da44:	2200      	movs	r2, #0
 800da46:	4b20      	ldr	r3, [pc, #128]	; (800dac8 <__ieee754_rem_pio2+0x3d8>)
 800da48:	f7f2 fd46 	bl	80004d8 <__aeabi_dmul>
 800da4c:	460f      	mov	r7, r1
 800da4e:	4606      	mov	r6, r0
 800da50:	f7f2 fff2 	bl	8000a38 <__aeabi_d2iz>
 800da54:	f7f2 fcd6 	bl	8000404 <__aeabi_i2d>
 800da58:	4602      	mov	r2, r0
 800da5a:	460b      	mov	r3, r1
 800da5c:	4630      	mov	r0, r6
 800da5e:	4639      	mov	r1, r7
 800da60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800da64:	f7f2 fb80 	bl	8000168 <__aeabi_dsub>
 800da68:	2200      	movs	r2, #0
 800da6a:	4b17      	ldr	r3, [pc, #92]	; (800dac8 <__ieee754_rem_pio2+0x3d8>)
 800da6c:	f7f2 fd34 	bl	80004d8 <__aeabi_dmul>
 800da70:	f04f 0803 	mov.w	r8, #3
 800da74:	2600      	movs	r6, #0
 800da76:	2700      	movs	r7, #0
 800da78:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800da7c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800da80:	4632      	mov	r2, r6
 800da82:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800da86:	463b      	mov	r3, r7
 800da88:	f108 3aff 	add.w	sl, r8, #4294967295
 800da8c:	f7f2 ff8c 	bl	80009a8 <__aeabi_dcmpeq>
 800da90:	b9b8      	cbnz	r0, 800dac2 <__ieee754_rem_pio2+0x3d2>
 800da92:	4b0e      	ldr	r3, [pc, #56]	; (800dacc <__ieee754_rem_pio2+0x3dc>)
 800da94:	462a      	mov	r2, r5
 800da96:	9301      	str	r3, [sp, #4]
 800da98:	2302      	movs	r3, #2
 800da9a:	4621      	mov	r1, r4
 800da9c:	9300      	str	r3, [sp, #0]
 800da9e:	a806      	add	r0, sp, #24
 800daa0:	4643      	mov	r3, r8
 800daa2:	f000 f97f 	bl	800dda4 <__kernel_rem_pio2>
 800daa6:	f1bb 0f00 	cmp.w	fp, #0
 800daaa:	4605      	mov	r5, r0
 800daac:	f6bf ae56 	bge.w	800d75c <__ieee754_rem_pio2+0x6c>
 800dab0:	6863      	ldr	r3, [r4, #4]
 800dab2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dab6:	6063      	str	r3, [r4, #4]
 800dab8:	68e3      	ldr	r3, [r4, #12]
 800daba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dabe:	60e3      	str	r3, [r4, #12]
 800dac0:	e708      	b.n	800d8d4 <__ieee754_rem_pio2+0x1e4>
 800dac2:	46d0      	mov	r8, sl
 800dac4:	e7dc      	b.n	800da80 <__ieee754_rem_pio2+0x390>
 800dac6:	bf00      	nop
 800dac8:	41700000 	.word	0x41700000
 800dacc:	0800fa78 	.word	0x0800fa78

0800dad0 <__ieee754_sqrt>:
 800dad0:	4b54      	ldr	r3, [pc, #336]	; (800dc24 <__ieee754_sqrt+0x154>)
 800dad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dad6:	438b      	bics	r3, r1
 800dad8:	4606      	mov	r6, r0
 800dada:	460d      	mov	r5, r1
 800dadc:	460a      	mov	r2, r1
 800dade:	460c      	mov	r4, r1
 800dae0:	d10f      	bne.n	800db02 <__ieee754_sqrt+0x32>
 800dae2:	4602      	mov	r2, r0
 800dae4:	460b      	mov	r3, r1
 800dae6:	f7f2 fcf7 	bl	80004d8 <__aeabi_dmul>
 800daea:	4602      	mov	r2, r0
 800daec:	460b      	mov	r3, r1
 800daee:	4630      	mov	r0, r6
 800daf0:	4629      	mov	r1, r5
 800daf2:	f7f2 fb3b 	bl	800016c <__adddf3>
 800daf6:	4606      	mov	r6, r0
 800daf8:	460d      	mov	r5, r1
 800dafa:	4630      	mov	r0, r6
 800dafc:	4629      	mov	r1, r5
 800dafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db02:	2900      	cmp	r1, #0
 800db04:	4607      	mov	r7, r0
 800db06:	4603      	mov	r3, r0
 800db08:	dc0e      	bgt.n	800db28 <__ieee754_sqrt+0x58>
 800db0a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800db0e:	ea5c 0707 	orrs.w	r7, ip, r7
 800db12:	d0f2      	beq.n	800dafa <__ieee754_sqrt+0x2a>
 800db14:	b141      	cbz	r1, 800db28 <__ieee754_sqrt+0x58>
 800db16:	4602      	mov	r2, r0
 800db18:	460b      	mov	r3, r1
 800db1a:	f7f2 fb25 	bl	8000168 <__aeabi_dsub>
 800db1e:	4602      	mov	r2, r0
 800db20:	460b      	mov	r3, r1
 800db22:	f7f2 fe03 	bl	800072c <__aeabi_ddiv>
 800db26:	e7e6      	b.n	800daf6 <__ieee754_sqrt+0x26>
 800db28:	1512      	asrs	r2, r2, #20
 800db2a:	d074      	beq.n	800dc16 <__ieee754_sqrt+0x146>
 800db2c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800db30:	07d5      	lsls	r5, r2, #31
 800db32:	f04f 0500 	mov.w	r5, #0
 800db36:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800db3a:	bf48      	it	mi
 800db3c:	0fd9      	lsrmi	r1, r3, #31
 800db3e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800db42:	bf44      	itt	mi
 800db44:	005b      	lslmi	r3, r3, #1
 800db46:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800db4a:	1051      	asrs	r1, r2, #1
 800db4c:	0fda      	lsrs	r2, r3, #31
 800db4e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800db52:	4628      	mov	r0, r5
 800db54:	2216      	movs	r2, #22
 800db56:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800db5a:	005b      	lsls	r3, r3, #1
 800db5c:	1987      	adds	r7, r0, r6
 800db5e:	42a7      	cmp	r7, r4
 800db60:	bfde      	ittt	le
 800db62:	19b8      	addle	r0, r7, r6
 800db64:	1be4      	suble	r4, r4, r7
 800db66:	19ad      	addle	r5, r5, r6
 800db68:	0fdf      	lsrs	r7, r3, #31
 800db6a:	3a01      	subs	r2, #1
 800db6c:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800db70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800db74:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800db78:	d1f0      	bne.n	800db5c <__ieee754_sqrt+0x8c>
 800db7a:	f04f 0c20 	mov.w	ip, #32
 800db7e:	4696      	mov	lr, r2
 800db80:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800db84:	4284      	cmp	r4, r0
 800db86:	eb06 070e 	add.w	r7, r6, lr
 800db8a:	dc02      	bgt.n	800db92 <__ieee754_sqrt+0xc2>
 800db8c:	d112      	bne.n	800dbb4 <__ieee754_sqrt+0xe4>
 800db8e:	429f      	cmp	r7, r3
 800db90:	d810      	bhi.n	800dbb4 <__ieee754_sqrt+0xe4>
 800db92:	2f00      	cmp	r7, #0
 800db94:	eb07 0e06 	add.w	lr, r7, r6
 800db98:	da42      	bge.n	800dc20 <__ieee754_sqrt+0x150>
 800db9a:	f1be 0f00 	cmp.w	lr, #0
 800db9e:	db3f      	blt.n	800dc20 <__ieee754_sqrt+0x150>
 800dba0:	f100 0801 	add.w	r8, r0, #1
 800dba4:	1a24      	subs	r4, r4, r0
 800dba6:	4640      	mov	r0, r8
 800dba8:	429f      	cmp	r7, r3
 800dbaa:	bf88      	it	hi
 800dbac:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800dbb0:	1bdb      	subs	r3, r3, r7
 800dbb2:	4432      	add	r2, r6
 800dbb4:	0064      	lsls	r4, r4, #1
 800dbb6:	f1bc 0c01 	subs.w	ip, ip, #1
 800dbba:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800dbbe:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dbc2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dbc6:	d1dd      	bne.n	800db84 <__ieee754_sqrt+0xb4>
 800dbc8:	4323      	orrs	r3, r4
 800dbca:	d006      	beq.n	800dbda <__ieee754_sqrt+0x10a>
 800dbcc:	1c54      	adds	r4, r2, #1
 800dbce:	bf0b      	itete	eq
 800dbd0:	4662      	moveq	r2, ip
 800dbd2:	3201      	addne	r2, #1
 800dbd4:	3501      	addeq	r5, #1
 800dbd6:	f022 0201 	bicne.w	r2, r2, #1
 800dbda:	106b      	asrs	r3, r5, #1
 800dbdc:	0852      	lsrs	r2, r2, #1
 800dbde:	07e8      	lsls	r0, r5, #31
 800dbe0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800dbe4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800dbe8:	bf48      	it	mi
 800dbea:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800dbee:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800dbf2:	4616      	mov	r6, r2
 800dbf4:	e781      	b.n	800dafa <__ieee754_sqrt+0x2a>
 800dbf6:	0adc      	lsrs	r4, r3, #11
 800dbf8:	3915      	subs	r1, #21
 800dbfa:	055b      	lsls	r3, r3, #21
 800dbfc:	2c00      	cmp	r4, #0
 800dbfe:	d0fa      	beq.n	800dbf6 <__ieee754_sqrt+0x126>
 800dc00:	02e6      	lsls	r6, r4, #11
 800dc02:	d50a      	bpl.n	800dc1a <__ieee754_sqrt+0x14a>
 800dc04:	f1c2 0020 	rsb	r0, r2, #32
 800dc08:	fa23 f000 	lsr.w	r0, r3, r0
 800dc0c:	1e55      	subs	r5, r2, #1
 800dc0e:	4093      	lsls	r3, r2
 800dc10:	4304      	orrs	r4, r0
 800dc12:	1b4a      	subs	r2, r1, r5
 800dc14:	e78a      	b.n	800db2c <__ieee754_sqrt+0x5c>
 800dc16:	4611      	mov	r1, r2
 800dc18:	e7f0      	b.n	800dbfc <__ieee754_sqrt+0x12c>
 800dc1a:	0064      	lsls	r4, r4, #1
 800dc1c:	3201      	adds	r2, #1
 800dc1e:	e7ef      	b.n	800dc00 <__ieee754_sqrt+0x130>
 800dc20:	4680      	mov	r8, r0
 800dc22:	e7bf      	b.n	800dba4 <__ieee754_sqrt+0xd4>
 800dc24:	7ff00000 	.word	0x7ff00000

0800dc28 <__kernel_cos>:
 800dc28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc2c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dc30:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800dc34:	4680      	mov	r8, r0
 800dc36:	460f      	mov	r7, r1
 800dc38:	e9cd 2300 	strd	r2, r3, [sp]
 800dc3c:	da04      	bge.n	800dc48 <__kernel_cos+0x20>
 800dc3e:	f7f2 fefb 	bl	8000a38 <__aeabi_d2iz>
 800dc42:	2800      	cmp	r0, #0
 800dc44:	f000 8086 	beq.w	800dd54 <__kernel_cos+0x12c>
 800dc48:	4642      	mov	r2, r8
 800dc4a:	463b      	mov	r3, r7
 800dc4c:	4640      	mov	r0, r8
 800dc4e:	4639      	mov	r1, r7
 800dc50:	f7f2 fc42 	bl	80004d8 <__aeabi_dmul>
 800dc54:	2200      	movs	r2, #0
 800dc56:	4b4e      	ldr	r3, [pc, #312]	; (800dd90 <__kernel_cos+0x168>)
 800dc58:	4604      	mov	r4, r0
 800dc5a:	460d      	mov	r5, r1
 800dc5c:	f7f2 fc3c 	bl	80004d8 <__aeabi_dmul>
 800dc60:	a33f      	add	r3, pc, #252	; (adr r3, 800dd60 <__kernel_cos+0x138>)
 800dc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc66:	4682      	mov	sl, r0
 800dc68:	468b      	mov	fp, r1
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	4629      	mov	r1, r5
 800dc6e:	f7f2 fc33 	bl	80004d8 <__aeabi_dmul>
 800dc72:	a33d      	add	r3, pc, #244	; (adr r3, 800dd68 <__kernel_cos+0x140>)
 800dc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc78:	f7f2 fa78 	bl	800016c <__adddf3>
 800dc7c:	4622      	mov	r2, r4
 800dc7e:	462b      	mov	r3, r5
 800dc80:	f7f2 fc2a 	bl	80004d8 <__aeabi_dmul>
 800dc84:	a33a      	add	r3, pc, #232	; (adr r3, 800dd70 <__kernel_cos+0x148>)
 800dc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc8a:	f7f2 fa6d 	bl	8000168 <__aeabi_dsub>
 800dc8e:	4622      	mov	r2, r4
 800dc90:	462b      	mov	r3, r5
 800dc92:	f7f2 fc21 	bl	80004d8 <__aeabi_dmul>
 800dc96:	a338      	add	r3, pc, #224	; (adr r3, 800dd78 <__kernel_cos+0x150>)
 800dc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9c:	f7f2 fa66 	bl	800016c <__adddf3>
 800dca0:	4622      	mov	r2, r4
 800dca2:	462b      	mov	r3, r5
 800dca4:	f7f2 fc18 	bl	80004d8 <__aeabi_dmul>
 800dca8:	a335      	add	r3, pc, #212	; (adr r3, 800dd80 <__kernel_cos+0x158>)
 800dcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcae:	f7f2 fa5b 	bl	8000168 <__aeabi_dsub>
 800dcb2:	4622      	mov	r2, r4
 800dcb4:	462b      	mov	r3, r5
 800dcb6:	f7f2 fc0f 	bl	80004d8 <__aeabi_dmul>
 800dcba:	a333      	add	r3, pc, #204	; (adr r3, 800dd88 <__kernel_cos+0x160>)
 800dcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc0:	f7f2 fa54 	bl	800016c <__adddf3>
 800dcc4:	4622      	mov	r2, r4
 800dcc6:	462b      	mov	r3, r5
 800dcc8:	f7f2 fc06 	bl	80004d8 <__aeabi_dmul>
 800dccc:	4622      	mov	r2, r4
 800dcce:	462b      	mov	r3, r5
 800dcd0:	f7f2 fc02 	bl	80004d8 <__aeabi_dmul>
 800dcd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dcd8:	4604      	mov	r4, r0
 800dcda:	460d      	mov	r5, r1
 800dcdc:	4640      	mov	r0, r8
 800dcde:	4639      	mov	r1, r7
 800dce0:	f7f2 fbfa 	bl	80004d8 <__aeabi_dmul>
 800dce4:	460b      	mov	r3, r1
 800dce6:	4602      	mov	r2, r0
 800dce8:	4629      	mov	r1, r5
 800dcea:	4620      	mov	r0, r4
 800dcec:	f7f2 fa3c 	bl	8000168 <__aeabi_dsub>
 800dcf0:	4b28      	ldr	r3, [pc, #160]	; (800dd94 <__kernel_cos+0x16c>)
 800dcf2:	4680      	mov	r8, r0
 800dcf4:	429e      	cmp	r6, r3
 800dcf6:	4689      	mov	r9, r1
 800dcf8:	dc0e      	bgt.n	800dd18 <__kernel_cos+0xf0>
 800dcfa:	4602      	mov	r2, r0
 800dcfc:	460b      	mov	r3, r1
 800dcfe:	4650      	mov	r0, sl
 800dd00:	4659      	mov	r1, fp
 800dd02:	f7f2 fa31 	bl	8000168 <__aeabi_dsub>
 800dd06:	4602      	mov	r2, r0
 800dd08:	2000      	movs	r0, #0
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	4922      	ldr	r1, [pc, #136]	; (800dd98 <__kernel_cos+0x170>)
 800dd0e:	f7f2 fa2b 	bl	8000168 <__aeabi_dsub>
 800dd12:	b003      	add	sp, #12
 800dd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd18:	2400      	movs	r4, #0
 800dd1a:	4b20      	ldr	r3, [pc, #128]	; (800dd9c <__kernel_cos+0x174>)
 800dd1c:	4622      	mov	r2, r4
 800dd1e:	429e      	cmp	r6, r3
 800dd20:	bfcc      	ite	gt
 800dd22:	4d1f      	ldrgt	r5, [pc, #124]	; (800dda0 <__kernel_cos+0x178>)
 800dd24:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800dd28:	462b      	mov	r3, r5
 800dd2a:	2000      	movs	r0, #0
 800dd2c:	491a      	ldr	r1, [pc, #104]	; (800dd98 <__kernel_cos+0x170>)
 800dd2e:	f7f2 fa1b 	bl	8000168 <__aeabi_dsub>
 800dd32:	4622      	mov	r2, r4
 800dd34:	4606      	mov	r6, r0
 800dd36:	460f      	mov	r7, r1
 800dd38:	462b      	mov	r3, r5
 800dd3a:	4650      	mov	r0, sl
 800dd3c:	4659      	mov	r1, fp
 800dd3e:	f7f2 fa13 	bl	8000168 <__aeabi_dsub>
 800dd42:	4642      	mov	r2, r8
 800dd44:	464b      	mov	r3, r9
 800dd46:	f7f2 fa0f 	bl	8000168 <__aeabi_dsub>
 800dd4a:	4602      	mov	r2, r0
 800dd4c:	460b      	mov	r3, r1
 800dd4e:	4630      	mov	r0, r6
 800dd50:	4639      	mov	r1, r7
 800dd52:	e7dc      	b.n	800dd0e <__kernel_cos+0xe6>
 800dd54:	2000      	movs	r0, #0
 800dd56:	4910      	ldr	r1, [pc, #64]	; (800dd98 <__kernel_cos+0x170>)
 800dd58:	e7db      	b.n	800dd12 <__kernel_cos+0xea>
 800dd5a:	bf00      	nop
 800dd5c:	f3af 8000 	nop.w
 800dd60:	be8838d4 	.word	0xbe8838d4
 800dd64:	bda8fae9 	.word	0xbda8fae9
 800dd68:	bdb4b1c4 	.word	0xbdb4b1c4
 800dd6c:	3e21ee9e 	.word	0x3e21ee9e
 800dd70:	809c52ad 	.word	0x809c52ad
 800dd74:	3e927e4f 	.word	0x3e927e4f
 800dd78:	19cb1590 	.word	0x19cb1590
 800dd7c:	3efa01a0 	.word	0x3efa01a0
 800dd80:	16c15177 	.word	0x16c15177
 800dd84:	3f56c16c 	.word	0x3f56c16c
 800dd88:	5555554c 	.word	0x5555554c
 800dd8c:	3fa55555 	.word	0x3fa55555
 800dd90:	3fe00000 	.word	0x3fe00000
 800dd94:	3fd33332 	.word	0x3fd33332
 800dd98:	3ff00000 	.word	0x3ff00000
 800dd9c:	3fe90000 	.word	0x3fe90000
 800dda0:	3fd20000 	.word	0x3fd20000

0800dda4 <__kernel_rem_pio2>:
 800dda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dda8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ddac:	9307      	str	r3, [sp, #28]
 800ddae:	9104      	str	r1, [sp, #16]
 800ddb0:	4bbf      	ldr	r3, [pc, #764]	; (800e0b0 <__kernel_rem_pio2+0x30c>)
 800ddb2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800ddb4:	1ed4      	subs	r4, r2, #3
 800ddb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ddba:	2500      	movs	r5, #0
 800ddbc:	9302      	str	r3, [sp, #8]
 800ddbe:	9b07      	ldr	r3, [sp, #28]
 800ddc0:	9008      	str	r0, [sp, #32]
 800ddc2:	3b01      	subs	r3, #1
 800ddc4:	9306      	str	r3, [sp, #24]
 800ddc6:	2318      	movs	r3, #24
 800ddc8:	fb94 f4f3 	sdiv	r4, r4, r3
 800ddcc:	f06f 0317 	mvn.w	r3, #23
 800ddd0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800ddd4:	fb04 3303 	mla	r3, r4, r3, r3
 800ddd8:	eb03 0a02 	add.w	sl, r3, r2
 800dddc:	9a06      	ldr	r2, [sp, #24]
 800ddde:	9b02      	ldr	r3, [sp, #8]
 800dde0:	1aa7      	subs	r7, r4, r2
 800dde2:	eb03 0802 	add.w	r8, r3, r2
 800dde6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800dde8:	2200      	movs	r2, #0
 800ddea:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ddee:	2300      	movs	r3, #0
 800ddf0:	ae1e      	add	r6, sp, #120	; 0x78
 800ddf2:	4545      	cmp	r5, r8
 800ddf4:	dd14      	ble.n	800de20 <__kernel_rem_pio2+0x7c>
 800ddf6:	2600      	movs	r6, #0
 800ddf8:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800ddfc:	9b02      	ldr	r3, [sp, #8]
 800ddfe:	429e      	cmp	r6, r3
 800de00:	dc39      	bgt.n	800de76 <__kernel_rem_pio2+0xd2>
 800de02:	9b08      	ldr	r3, [sp, #32]
 800de04:	f04f 0800 	mov.w	r8, #0
 800de08:	3b08      	subs	r3, #8
 800de0a:	9300      	str	r3, [sp, #0]
 800de0c:	9b07      	ldr	r3, [sp, #28]
 800de0e:	f04f 0900 	mov.w	r9, #0
 800de12:	199d      	adds	r5, r3, r6
 800de14:	ab20      	add	r3, sp, #128	; 0x80
 800de16:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800de1a:	9305      	str	r3, [sp, #20]
 800de1c:	2700      	movs	r7, #0
 800de1e:	e023      	b.n	800de68 <__kernel_rem_pio2+0xc4>
 800de20:	42ef      	cmn	r7, r5
 800de22:	d40b      	bmi.n	800de3c <__kernel_rem_pio2+0x98>
 800de24:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800de28:	e9cd 2300 	strd	r2, r3, [sp]
 800de2c:	f7f2 faea 	bl	8000404 <__aeabi_i2d>
 800de30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de34:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800de38:	3501      	adds	r5, #1
 800de3a:	e7da      	b.n	800ddf2 <__kernel_rem_pio2+0x4e>
 800de3c:	4610      	mov	r0, r2
 800de3e:	4619      	mov	r1, r3
 800de40:	e7f8      	b.n	800de34 <__kernel_rem_pio2+0x90>
 800de42:	9905      	ldr	r1, [sp, #20]
 800de44:	9d00      	ldr	r5, [sp, #0]
 800de46:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800de4a:	9105      	str	r1, [sp, #20]
 800de4c:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800de50:	9500      	str	r5, [sp, #0]
 800de52:	f7f2 fb41 	bl	80004d8 <__aeabi_dmul>
 800de56:	4602      	mov	r2, r0
 800de58:	460b      	mov	r3, r1
 800de5a:	4640      	mov	r0, r8
 800de5c:	4649      	mov	r1, r9
 800de5e:	f7f2 f985 	bl	800016c <__adddf3>
 800de62:	4680      	mov	r8, r0
 800de64:	4689      	mov	r9, r1
 800de66:	3701      	adds	r7, #1
 800de68:	9b06      	ldr	r3, [sp, #24]
 800de6a:	429f      	cmp	r7, r3
 800de6c:	dde9      	ble.n	800de42 <__kernel_rem_pio2+0x9e>
 800de6e:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800de72:	3601      	adds	r6, #1
 800de74:	e7c2      	b.n	800ddfc <__kernel_rem_pio2+0x58>
 800de76:	9b02      	ldr	r3, [sp, #8]
 800de78:	aa0c      	add	r2, sp, #48	; 0x30
 800de7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800de7e:	930b      	str	r3, [sp, #44]	; 0x2c
 800de80:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800de82:	9f02      	ldr	r7, [sp, #8]
 800de84:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800de88:	930a      	str	r3, [sp, #40]	; 0x28
 800de8a:	2600      	movs	r6, #0
 800de8c:	ab98      	add	r3, sp, #608	; 0x260
 800de8e:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800de92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800de96:	f10b 3bff 	add.w	fp, fp, #4294967295
 800de9a:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800de9e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800dea2:	ab98      	add	r3, sp, #608	; 0x260
 800dea4:	445b      	add	r3, fp
 800dea6:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800deaa:	1bbb      	subs	r3, r7, r6
 800deac:	2b00      	cmp	r3, #0
 800deae:	dc71      	bgt.n	800df94 <__kernel_rem_pio2+0x1f0>
 800deb0:	4652      	mov	r2, sl
 800deb2:	4640      	mov	r0, r8
 800deb4:	4649      	mov	r1, r9
 800deb6:	f000 fc03 	bl	800e6c0 <scalbn>
 800deba:	2200      	movs	r2, #0
 800debc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800dec0:	4604      	mov	r4, r0
 800dec2:	460d      	mov	r5, r1
 800dec4:	f7f2 fb08 	bl	80004d8 <__aeabi_dmul>
 800dec8:	f000 fb72 	bl	800e5b0 <floor>
 800decc:	2200      	movs	r2, #0
 800dece:	4b79      	ldr	r3, [pc, #484]	; (800e0b4 <__kernel_rem_pio2+0x310>)
 800ded0:	f7f2 fb02 	bl	80004d8 <__aeabi_dmul>
 800ded4:	4602      	mov	r2, r0
 800ded6:	460b      	mov	r3, r1
 800ded8:	4620      	mov	r0, r4
 800deda:	4629      	mov	r1, r5
 800dedc:	f7f2 f944 	bl	8000168 <__aeabi_dsub>
 800dee0:	460d      	mov	r5, r1
 800dee2:	4604      	mov	r4, r0
 800dee4:	f7f2 fda8 	bl	8000a38 <__aeabi_d2iz>
 800dee8:	9005      	str	r0, [sp, #20]
 800deea:	f7f2 fa8b 	bl	8000404 <__aeabi_i2d>
 800deee:	4602      	mov	r2, r0
 800def0:	460b      	mov	r3, r1
 800def2:	4620      	mov	r0, r4
 800def4:	4629      	mov	r1, r5
 800def6:	f7f2 f937 	bl	8000168 <__aeabi_dsub>
 800defa:	f1ba 0f00 	cmp.w	sl, #0
 800defe:	4680      	mov	r8, r0
 800df00:	4689      	mov	r9, r1
 800df02:	dd6c      	ble.n	800dfde <__kernel_rem_pio2+0x23a>
 800df04:	1e7a      	subs	r2, r7, #1
 800df06:	ab0c      	add	r3, sp, #48	; 0x30
 800df08:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800df0c:	f1ca 0118 	rsb	r1, sl, #24
 800df10:	9c05      	ldr	r4, [sp, #20]
 800df12:	fa40 f301 	asr.w	r3, r0, r1
 800df16:	441c      	add	r4, r3
 800df18:	408b      	lsls	r3, r1
 800df1a:	1ac0      	subs	r0, r0, r3
 800df1c:	ab0c      	add	r3, sp, #48	; 0x30
 800df1e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800df22:	f1ca 0317 	rsb	r3, sl, #23
 800df26:	9405      	str	r4, [sp, #20]
 800df28:	fa40 f303 	asr.w	r3, r0, r3
 800df2c:	9300      	str	r3, [sp, #0]
 800df2e:	9b00      	ldr	r3, [sp, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	dd62      	ble.n	800dffa <__kernel_rem_pio2+0x256>
 800df34:	2200      	movs	r2, #0
 800df36:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800df3a:	4614      	mov	r4, r2
 800df3c:	9b05      	ldr	r3, [sp, #20]
 800df3e:	3301      	adds	r3, #1
 800df40:	9305      	str	r3, [sp, #20]
 800df42:	4297      	cmp	r7, r2
 800df44:	f300 809f 	bgt.w	800e086 <__kernel_rem_pio2+0x2e2>
 800df48:	f1ba 0f00 	cmp.w	sl, #0
 800df4c:	dd07      	ble.n	800df5e <__kernel_rem_pio2+0x1ba>
 800df4e:	f1ba 0f01 	cmp.w	sl, #1
 800df52:	f000 80bb 	beq.w	800e0cc <__kernel_rem_pio2+0x328>
 800df56:	f1ba 0f02 	cmp.w	sl, #2
 800df5a:	f000 80c1 	beq.w	800e0e0 <__kernel_rem_pio2+0x33c>
 800df5e:	9b00      	ldr	r3, [sp, #0]
 800df60:	2b02      	cmp	r3, #2
 800df62:	d14a      	bne.n	800dffa <__kernel_rem_pio2+0x256>
 800df64:	4642      	mov	r2, r8
 800df66:	464b      	mov	r3, r9
 800df68:	2000      	movs	r0, #0
 800df6a:	4953      	ldr	r1, [pc, #332]	; (800e0b8 <__kernel_rem_pio2+0x314>)
 800df6c:	f7f2 f8fc 	bl	8000168 <__aeabi_dsub>
 800df70:	4680      	mov	r8, r0
 800df72:	4689      	mov	r9, r1
 800df74:	2c00      	cmp	r4, #0
 800df76:	d040      	beq.n	800dffa <__kernel_rem_pio2+0x256>
 800df78:	4652      	mov	r2, sl
 800df7a:	2000      	movs	r0, #0
 800df7c:	494e      	ldr	r1, [pc, #312]	; (800e0b8 <__kernel_rem_pio2+0x314>)
 800df7e:	f000 fb9f 	bl	800e6c0 <scalbn>
 800df82:	4602      	mov	r2, r0
 800df84:	460b      	mov	r3, r1
 800df86:	4640      	mov	r0, r8
 800df88:	4649      	mov	r1, r9
 800df8a:	f7f2 f8ed 	bl	8000168 <__aeabi_dsub>
 800df8e:	4680      	mov	r8, r0
 800df90:	4689      	mov	r9, r1
 800df92:	e032      	b.n	800dffa <__kernel_rem_pio2+0x256>
 800df94:	2200      	movs	r2, #0
 800df96:	4b49      	ldr	r3, [pc, #292]	; (800e0bc <__kernel_rem_pio2+0x318>)
 800df98:	4640      	mov	r0, r8
 800df9a:	4649      	mov	r1, r9
 800df9c:	f7f2 fa9c 	bl	80004d8 <__aeabi_dmul>
 800dfa0:	f7f2 fd4a 	bl	8000a38 <__aeabi_d2iz>
 800dfa4:	f7f2 fa2e 	bl	8000404 <__aeabi_i2d>
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	4b45      	ldr	r3, [pc, #276]	; (800e0c0 <__kernel_rem_pio2+0x31c>)
 800dfac:	e9cd 0100 	strd	r0, r1, [sp]
 800dfb0:	f7f2 fa92 	bl	80004d8 <__aeabi_dmul>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	4640      	mov	r0, r8
 800dfba:	4649      	mov	r1, r9
 800dfbc:	f7f2 f8d4 	bl	8000168 <__aeabi_dsub>
 800dfc0:	f7f2 fd3a 	bl	8000a38 <__aeabi_d2iz>
 800dfc4:	ab0c      	add	r3, sp, #48	; 0x30
 800dfc6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800dfca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dfce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dfd2:	f7f2 f8cb 	bl	800016c <__adddf3>
 800dfd6:	3601      	adds	r6, #1
 800dfd8:	4680      	mov	r8, r0
 800dfda:	4689      	mov	r9, r1
 800dfdc:	e765      	b.n	800deaa <__kernel_rem_pio2+0x106>
 800dfde:	d105      	bne.n	800dfec <__kernel_rem_pio2+0x248>
 800dfe0:	1e7b      	subs	r3, r7, #1
 800dfe2:	aa0c      	add	r2, sp, #48	; 0x30
 800dfe4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800dfe8:	15c3      	asrs	r3, r0, #23
 800dfea:	e79f      	b.n	800df2c <__kernel_rem_pio2+0x188>
 800dfec:	2200      	movs	r2, #0
 800dfee:	4b35      	ldr	r3, [pc, #212]	; (800e0c4 <__kernel_rem_pio2+0x320>)
 800dff0:	f7f2 fcf8 	bl	80009e4 <__aeabi_dcmpge>
 800dff4:	2800      	cmp	r0, #0
 800dff6:	d143      	bne.n	800e080 <__kernel_rem_pio2+0x2dc>
 800dff8:	9000      	str	r0, [sp, #0]
 800dffa:	2200      	movs	r2, #0
 800dffc:	2300      	movs	r3, #0
 800dffe:	4640      	mov	r0, r8
 800e000:	4649      	mov	r1, r9
 800e002:	f7f2 fcd1 	bl	80009a8 <__aeabi_dcmpeq>
 800e006:	2800      	cmp	r0, #0
 800e008:	f000 80c3 	beq.w	800e192 <__kernel_rem_pio2+0x3ee>
 800e00c:	1e7c      	subs	r4, r7, #1
 800e00e:	4623      	mov	r3, r4
 800e010:	2200      	movs	r2, #0
 800e012:	9902      	ldr	r1, [sp, #8]
 800e014:	428b      	cmp	r3, r1
 800e016:	da6a      	bge.n	800e0ee <__kernel_rem_pio2+0x34a>
 800e018:	2a00      	cmp	r2, #0
 800e01a:	f000 8084 	beq.w	800e126 <__kernel_rem_pio2+0x382>
 800e01e:	ab0c      	add	r3, sp, #48	; 0x30
 800e020:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e024:	f1aa 0a18 	sub.w	sl, sl, #24
 800e028:	2b00      	cmp	r3, #0
 800e02a:	f000 80b0 	beq.w	800e18e <__kernel_rem_pio2+0x3ea>
 800e02e:	4652      	mov	r2, sl
 800e030:	2000      	movs	r0, #0
 800e032:	4921      	ldr	r1, [pc, #132]	; (800e0b8 <__kernel_rem_pio2+0x314>)
 800e034:	f000 fb44 	bl	800e6c0 <scalbn>
 800e038:	4625      	mov	r5, r4
 800e03a:	4606      	mov	r6, r0
 800e03c:	460f      	mov	r7, r1
 800e03e:	f04f 0a00 	mov.w	sl, #0
 800e042:	00e3      	lsls	r3, r4, #3
 800e044:	aa98      	add	r2, sp, #608	; 0x260
 800e046:	eb02 0803 	add.w	r8, r2, r3
 800e04a:	f8df b070 	ldr.w	fp, [pc, #112]	; 800e0bc <__kernel_rem_pio2+0x318>
 800e04e:	9306      	str	r3, [sp, #24]
 800e050:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800e054:	2d00      	cmp	r5, #0
 800e056:	f280 80d2 	bge.w	800e1fe <__kernel_rem_pio2+0x45a>
 800e05a:	2500      	movs	r5, #0
 800e05c:	9a06      	ldr	r2, [sp, #24]
 800e05e:	ab98      	add	r3, sp, #608	; 0x260
 800e060:	189e      	adds	r6, r3, r2
 800e062:	3ea8      	subs	r6, #168	; 0xa8
 800e064:	1b63      	subs	r3, r4, r5
 800e066:	2b00      	cmp	r3, #0
 800e068:	f2c0 80f9 	blt.w	800e25e <__kernel_rem_pio2+0x4ba>
 800e06c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800e0c8 <__kernel_rem_pio2+0x324>
 800e070:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800e074:	f04f 0a00 	mov.w	sl, #0
 800e078:	f04f 0b00 	mov.w	fp, #0
 800e07c:	2700      	movs	r7, #0
 800e07e:	e0e2      	b.n	800e246 <__kernel_rem_pio2+0x4a2>
 800e080:	2302      	movs	r3, #2
 800e082:	9300      	str	r3, [sp, #0]
 800e084:	e756      	b.n	800df34 <__kernel_rem_pio2+0x190>
 800e086:	ab0c      	add	r3, sp, #48	; 0x30
 800e088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e08c:	b94c      	cbnz	r4, 800e0a2 <__kernel_rem_pio2+0x2fe>
 800e08e:	b12b      	cbz	r3, 800e09c <__kernel_rem_pio2+0x2f8>
 800e090:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e094:	a80c      	add	r0, sp, #48	; 0x30
 800e096:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800e09a:	2301      	movs	r3, #1
 800e09c:	3201      	adds	r2, #1
 800e09e:	461c      	mov	r4, r3
 800e0a0:	e74f      	b.n	800df42 <__kernel_rem_pio2+0x19e>
 800e0a2:	1acb      	subs	r3, r1, r3
 800e0a4:	a80c      	add	r0, sp, #48	; 0x30
 800e0a6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800e0aa:	4623      	mov	r3, r4
 800e0ac:	e7f6      	b.n	800e09c <__kernel_rem_pio2+0x2f8>
 800e0ae:	bf00      	nop
 800e0b0:	0800fbc0 	.word	0x0800fbc0
 800e0b4:	40200000 	.word	0x40200000
 800e0b8:	3ff00000 	.word	0x3ff00000
 800e0bc:	3e700000 	.word	0x3e700000
 800e0c0:	41700000 	.word	0x41700000
 800e0c4:	3fe00000 	.word	0x3fe00000
 800e0c8:	0800fb78 	.word	0x0800fb78
 800e0cc:	1e7a      	subs	r2, r7, #1
 800e0ce:	ab0c      	add	r3, sp, #48	; 0x30
 800e0d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0d4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e0d8:	a90c      	add	r1, sp, #48	; 0x30
 800e0da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e0de:	e73e      	b.n	800df5e <__kernel_rem_pio2+0x1ba>
 800e0e0:	1e7a      	subs	r2, r7, #1
 800e0e2:	ab0c      	add	r3, sp, #48	; 0x30
 800e0e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e0ec:	e7f4      	b.n	800e0d8 <__kernel_rem_pio2+0x334>
 800e0ee:	a90c      	add	r1, sp, #48	; 0x30
 800e0f0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e0f4:	3b01      	subs	r3, #1
 800e0f6:	430a      	orrs	r2, r1
 800e0f8:	e78b      	b.n	800e012 <__kernel_rem_pio2+0x26e>
 800e0fa:	3401      	adds	r4, #1
 800e0fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e100:	2a00      	cmp	r2, #0
 800e102:	d0fa      	beq.n	800e0fa <__kernel_rem_pio2+0x356>
 800e104:	ab98      	add	r3, sp, #608	; 0x260
 800e106:	449b      	add	fp, r3
 800e108:	9b07      	ldr	r3, [sp, #28]
 800e10a:	1c7e      	adds	r6, r7, #1
 800e10c:	19dd      	adds	r5, r3, r7
 800e10e:	ab98      	add	r3, sp, #608	; 0x260
 800e110:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e114:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800e118:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800e11c:	443c      	add	r4, r7
 800e11e:	42b4      	cmp	r4, r6
 800e120:	da04      	bge.n	800e12c <__kernel_rem_pio2+0x388>
 800e122:	4627      	mov	r7, r4
 800e124:	e6b1      	b.n	800de8a <__kernel_rem_pio2+0xe6>
 800e126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e128:	2401      	movs	r4, #1
 800e12a:	e7e7      	b.n	800e0fc <__kernel_rem_pio2+0x358>
 800e12c:	f105 0308 	add.w	r3, r5, #8
 800e130:	9309      	str	r3, [sp, #36]	; 0x24
 800e132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e134:	2700      	movs	r7, #0
 800e136:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e13a:	f7f2 f963 	bl	8000404 <__aeabi_i2d>
 800e13e:	f04f 0800 	mov.w	r8, #0
 800e142:	f04f 0900 	mov.w	r9, #0
 800e146:	9b08      	ldr	r3, [sp, #32]
 800e148:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800e14c:	3b08      	subs	r3, #8
 800e14e:	9300      	str	r3, [sp, #0]
 800e150:	f105 0310 	add.w	r3, r5, #16
 800e154:	9305      	str	r3, [sp, #20]
 800e156:	9b06      	ldr	r3, [sp, #24]
 800e158:	429f      	cmp	r7, r3
 800e15a:	dd04      	ble.n	800e166 <__kernel_rem_pio2+0x3c2>
 800e15c:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800e160:	3601      	adds	r6, #1
 800e162:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e164:	e7db      	b.n	800e11e <__kernel_rem_pio2+0x37a>
 800e166:	9905      	ldr	r1, [sp, #20]
 800e168:	9d00      	ldr	r5, [sp, #0]
 800e16a:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800e16e:	9105      	str	r1, [sp, #20]
 800e170:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800e174:	9500      	str	r5, [sp, #0]
 800e176:	f7f2 f9af 	bl	80004d8 <__aeabi_dmul>
 800e17a:	4602      	mov	r2, r0
 800e17c:	460b      	mov	r3, r1
 800e17e:	4640      	mov	r0, r8
 800e180:	4649      	mov	r1, r9
 800e182:	f7f1 fff3 	bl	800016c <__adddf3>
 800e186:	3701      	adds	r7, #1
 800e188:	4680      	mov	r8, r0
 800e18a:	4689      	mov	r9, r1
 800e18c:	e7e3      	b.n	800e156 <__kernel_rem_pio2+0x3b2>
 800e18e:	3c01      	subs	r4, #1
 800e190:	e745      	b.n	800e01e <__kernel_rem_pio2+0x27a>
 800e192:	f1ca 0200 	rsb	r2, sl, #0
 800e196:	4640      	mov	r0, r8
 800e198:	4649      	mov	r1, r9
 800e19a:	f000 fa91 	bl	800e6c0 <scalbn>
 800e19e:	2200      	movs	r2, #0
 800e1a0:	4ba3      	ldr	r3, [pc, #652]	; (800e430 <__kernel_rem_pio2+0x68c>)
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	460d      	mov	r5, r1
 800e1a6:	f7f2 fc1d 	bl	80009e4 <__aeabi_dcmpge>
 800e1aa:	b1f8      	cbz	r0, 800e1ec <__kernel_rem_pio2+0x448>
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	4ba1      	ldr	r3, [pc, #644]	; (800e434 <__kernel_rem_pio2+0x690>)
 800e1b0:	4620      	mov	r0, r4
 800e1b2:	4629      	mov	r1, r5
 800e1b4:	f7f2 f990 	bl	80004d8 <__aeabi_dmul>
 800e1b8:	f7f2 fc3e 	bl	8000a38 <__aeabi_d2iz>
 800e1bc:	4606      	mov	r6, r0
 800e1be:	f7f2 f921 	bl	8000404 <__aeabi_i2d>
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	4b9a      	ldr	r3, [pc, #616]	; (800e430 <__kernel_rem_pio2+0x68c>)
 800e1c6:	f7f2 f987 	bl	80004d8 <__aeabi_dmul>
 800e1ca:	460b      	mov	r3, r1
 800e1cc:	4602      	mov	r2, r0
 800e1ce:	4629      	mov	r1, r5
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	f7f1 ffc9 	bl	8000168 <__aeabi_dsub>
 800e1d6:	f7f2 fc2f 	bl	8000a38 <__aeabi_d2iz>
 800e1da:	1c7c      	adds	r4, r7, #1
 800e1dc:	ab0c      	add	r3, sp, #48	; 0x30
 800e1de:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800e1e2:	f10a 0a18 	add.w	sl, sl, #24
 800e1e6:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800e1ea:	e720      	b.n	800e02e <__kernel_rem_pio2+0x28a>
 800e1ec:	4620      	mov	r0, r4
 800e1ee:	4629      	mov	r1, r5
 800e1f0:	f7f2 fc22 	bl	8000a38 <__aeabi_d2iz>
 800e1f4:	ab0c      	add	r3, sp, #48	; 0x30
 800e1f6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800e1fa:	463c      	mov	r4, r7
 800e1fc:	e717      	b.n	800e02e <__kernel_rem_pio2+0x28a>
 800e1fe:	ab0c      	add	r3, sp, #48	; 0x30
 800e200:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e204:	f7f2 f8fe 	bl	8000404 <__aeabi_i2d>
 800e208:	4632      	mov	r2, r6
 800e20a:	463b      	mov	r3, r7
 800e20c:	f7f2 f964 	bl	80004d8 <__aeabi_dmul>
 800e210:	4652      	mov	r2, sl
 800e212:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800e216:	465b      	mov	r3, fp
 800e218:	4630      	mov	r0, r6
 800e21a:	4639      	mov	r1, r7
 800e21c:	f7f2 f95c 	bl	80004d8 <__aeabi_dmul>
 800e220:	3d01      	subs	r5, #1
 800e222:	4606      	mov	r6, r0
 800e224:	460f      	mov	r7, r1
 800e226:	e715      	b.n	800e054 <__kernel_rem_pio2+0x2b0>
 800e228:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800e22c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800e230:	f7f2 f952 	bl	80004d8 <__aeabi_dmul>
 800e234:	4602      	mov	r2, r0
 800e236:	460b      	mov	r3, r1
 800e238:	4650      	mov	r0, sl
 800e23a:	4659      	mov	r1, fp
 800e23c:	f7f1 ff96 	bl	800016c <__adddf3>
 800e240:	4682      	mov	sl, r0
 800e242:	468b      	mov	fp, r1
 800e244:	3701      	adds	r7, #1
 800e246:	9b02      	ldr	r3, [sp, #8]
 800e248:	429f      	cmp	r7, r3
 800e24a:	dc01      	bgt.n	800e250 <__kernel_rem_pio2+0x4ac>
 800e24c:	42bd      	cmp	r5, r7
 800e24e:	daeb      	bge.n	800e228 <__kernel_rem_pio2+0x484>
 800e250:	ab48      	add	r3, sp, #288	; 0x120
 800e252:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e256:	e9c3 ab00 	strd	sl, fp, [r3]
 800e25a:	3501      	adds	r5, #1
 800e25c:	e702      	b.n	800e064 <__kernel_rem_pio2+0x2c0>
 800e25e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800e260:	2b03      	cmp	r3, #3
 800e262:	d86c      	bhi.n	800e33e <__kernel_rem_pio2+0x59a>
 800e264:	e8df f003 	tbb	[pc, r3]
 800e268:	022f2f59 	.word	0x022f2f59
 800e26c:	9a06      	ldr	r2, [sp, #24]
 800e26e:	ab48      	add	r3, sp, #288	; 0x120
 800e270:	189d      	adds	r5, r3, r2
 800e272:	46aa      	mov	sl, r5
 800e274:	46a3      	mov	fp, r4
 800e276:	f1bb 0f00 	cmp.w	fp, #0
 800e27a:	f300 8087 	bgt.w	800e38c <__kernel_rem_pio2+0x5e8>
 800e27e:	46a2      	mov	sl, r4
 800e280:	f1ba 0f01 	cmp.w	sl, #1
 800e284:	f300 809f 	bgt.w	800e3c6 <__kernel_rem_pio2+0x622>
 800e288:	2700      	movs	r7, #0
 800e28a:	463e      	mov	r6, r7
 800e28c:	9d06      	ldr	r5, [sp, #24]
 800e28e:	ab48      	add	r3, sp, #288	; 0x120
 800e290:	3508      	adds	r5, #8
 800e292:	441d      	add	r5, r3
 800e294:	2c01      	cmp	r4, #1
 800e296:	f300 80b3 	bgt.w	800e400 <__kernel_rem_pio2+0x65c>
 800e29a:	9b00      	ldr	r3, [sp, #0]
 800e29c:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800e29e:	9849      	ldr	r0, [sp, #292]	; 0x124
 800e2a0:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800e2a2:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	f040 80b5 	bne.w	800e414 <__kernel_rem_pio2+0x670>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	462a      	mov	r2, r5
 800e2ae:	9804      	ldr	r0, [sp, #16]
 800e2b0:	e9c0 2300 	strd	r2, r3, [r0]
 800e2b4:	4622      	mov	r2, r4
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e2bc:	463a      	mov	r2, r7
 800e2be:	4633      	mov	r3, r6
 800e2c0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e2c4:	e03b      	b.n	800e33e <__kernel_rem_pio2+0x59a>
 800e2c6:	f04f 0c00 	mov.w	ip, #0
 800e2ca:	4626      	mov	r6, r4
 800e2cc:	4667      	mov	r7, ip
 800e2ce:	9d06      	ldr	r5, [sp, #24]
 800e2d0:	ab48      	add	r3, sp, #288	; 0x120
 800e2d2:	3508      	adds	r5, #8
 800e2d4:	441d      	add	r5, r3
 800e2d6:	2e00      	cmp	r6, #0
 800e2d8:	da42      	bge.n	800e360 <__kernel_rem_pio2+0x5bc>
 800e2da:	9b00      	ldr	r3, [sp, #0]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d049      	beq.n	800e374 <__kernel_rem_pio2+0x5d0>
 800e2e0:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800e2e4:	4662      	mov	r2, ip
 800e2e6:	460b      	mov	r3, r1
 800e2e8:	9904      	ldr	r1, [sp, #16]
 800e2ea:	2601      	movs	r6, #1
 800e2ec:	e9c1 2300 	strd	r2, r3, [r1]
 800e2f0:	a948      	add	r1, sp, #288	; 0x120
 800e2f2:	463b      	mov	r3, r7
 800e2f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2f8:	f7f1 ff36 	bl	8000168 <__aeabi_dsub>
 800e2fc:	4684      	mov	ip, r0
 800e2fe:	460f      	mov	r7, r1
 800e300:	ad48      	add	r5, sp, #288	; 0x120
 800e302:	42b4      	cmp	r4, r6
 800e304:	da38      	bge.n	800e378 <__kernel_rem_pio2+0x5d4>
 800e306:	9b00      	ldr	r3, [sp, #0]
 800e308:	b10b      	cbz	r3, 800e30e <__kernel_rem_pio2+0x56a>
 800e30a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800e30e:	4662      	mov	r2, ip
 800e310:	463b      	mov	r3, r7
 800e312:	9904      	ldr	r1, [sp, #16]
 800e314:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800e318:	e011      	b.n	800e33e <__kernel_rem_pio2+0x59a>
 800e31a:	2700      	movs	r7, #0
 800e31c:	463d      	mov	r5, r7
 800e31e:	9b06      	ldr	r3, [sp, #24]
 800e320:	aa98      	add	r2, sp, #608	; 0x260
 800e322:	4413      	add	r3, r2
 800e324:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800e328:	2c00      	cmp	r4, #0
 800e32a:	da0f      	bge.n	800e34c <__kernel_rem_pio2+0x5a8>
 800e32c:	9b00      	ldr	r3, [sp, #0]
 800e32e:	b10b      	cbz	r3, 800e334 <__kernel_rem_pio2+0x590>
 800e330:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800e334:	463a      	mov	r2, r7
 800e336:	462b      	mov	r3, r5
 800e338:	9904      	ldr	r1, [sp, #16]
 800e33a:	e9c1 2300 	strd	r2, r3, [r1]
 800e33e:	9b05      	ldr	r3, [sp, #20]
 800e340:	f003 0007 	and.w	r0, r3, #7
 800e344:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e34c:	4638      	mov	r0, r7
 800e34e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e352:	4629      	mov	r1, r5
 800e354:	f7f1 ff0a 	bl	800016c <__adddf3>
 800e358:	3c01      	subs	r4, #1
 800e35a:	4607      	mov	r7, r0
 800e35c:	460d      	mov	r5, r1
 800e35e:	e7e3      	b.n	800e328 <__kernel_rem_pio2+0x584>
 800e360:	4660      	mov	r0, ip
 800e362:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e366:	4639      	mov	r1, r7
 800e368:	f7f1 ff00 	bl	800016c <__adddf3>
 800e36c:	3e01      	subs	r6, #1
 800e36e:	4684      	mov	ip, r0
 800e370:	460f      	mov	r7, r1
 800e372:	e7b0      	b.n	800e2d6 <__kernel_rem_pio2+0x532>
 800e374:	4639      	mov	r1, r7
 800e376:	e7b5      	b.n	800e2e4 <__kernel_rem_pio2+0x540>
 800e378:	4660      	mov	r0, ip
 800e37a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800e37e:	4639      	mov	r1, r7
 800e380:	f7f1 fef4 	bl	800016c <__adddf3>
 800e384:	3601      	adds	r6, #1
 800e386:	4684      	mov	ip, r0
 800e388:	460f      	mov	r7, r1
 800e38a:	e7ba      	b.n	800e302 <__kernel_rem_pio2+0x55e>
 800e38c:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800e390:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800e394:	4640      	mov	r0, r8
 800e396:	4649      	mov	r1, r9
 800e398:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e39c:	f7f1 fee6 	bl	800016c <__adddf3>
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	460b      	mov	r3, r1
 800e3a4:	4606      	mov	r6, r0
 800e3a6:	460f      	mov	r7, r1
 800e3a8:	4640      	mov	r0, r8
 800e3aa:	4649      	mov	r1, r9
 800e3ac:	f7f1 fedc 	bl	8000168 <__aeabi_dsub>
 800e3b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e3b4:	f7f1 feda 	bl	800016c <__adddf3>
 800e3b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e3bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e3c0:	e9ca 6700 	strd	r6, r7, [sl]
 800e3c4:	e757      	b.n	800e276 <__kernel_rem_pio2+0x4d2>
 800e3c6:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800e3ca:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800e3ce:	4630      	mov	r0, r6
 800e3d0:	4639      	mov	r1, r7
 800e3d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e3d6:	f7f1 fec9 	bl	800016c <__adddf3>
 800e3da:	4602      	mov	r2, r0
 800e3dc:	460b      	mov	r3, r1
 800e3de:	4680      	mov	r8, r0
 800e3e0:	4689      	mov	r9, r1
 800e3e2:	4630      	mov	r0, r6
 800e3e4:	4639      	mov	r1, r7
 800e3e6:	f7f1 febf 	bl	8000168 <__aeabi_dsub>
 800e3ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e3ee:	f7f1 febd 	bl	800016c <__adddf3>
 800e3f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e3f6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800e3fa:	e9c5 8900 	strd	r8, r9, [r5]
 800e3fe:	e73f      	b.n	800e280 <__kernel_rem_pio2+0x4dc>
 800e400:	4638      	mov	r0, r7
 800e402:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e406:	4631      	mov	r1, r6
 800e408:	f7f1 feb0 	bl	800016c <__adddf3>
 800e40c:	3c01      	subs	r4, #1
 800e40e:	4607      	mov	r7, r0
 800e410:	460e      	mov	r6, r1
 800e412:	e73f      	b.n	800e294 <__kernel_rem_pio2+0x4f0>
 800e414:	9b04      	ldr	r3, [sp, #16]
 800e416:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e41a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800e41e:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800e422:	601d      	str	r5, [r3, #0]
 800e424:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800e428:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800e42c:	615e      	str	r6, [r3, #20]
 800e42e:	e786      	b.n	800e33e <__kernel_rem_pio2+0x59a>
 800e430:	41700000 	.word	0x41700000
 800e434:	3e700000 	.word	0x3e700000

0800e438 <__kernel_sin>:
 800e438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e43c:	b086      	sub	sp, #24
 800e43e:	e9cd 2300 	strd	r2, r3, [sp]
 800e442:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e446:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e44a:	4682      	mov	sl, r0
 800e44c:	460c      	mov	r4, r1
 800e44e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800e450:	da03      	bge.n	800e45a <__kernel_sin+0x22>
 800e452:	f7f2 faf1 	bl	8000a38 <__aeabi_d2iz>
 800e456:	2800      	cmp	r0, #0
 800e458:	d050      	beq.n	800e4fc <__kernel_sin+0xc4>
 800e45a:	4652      	mov	r2, sl
 800e45c:	4623      	mov	r3, r4
 800e45e:	4650      	mov	r0, sl
 800e460:	4621      	mov	r1, r4
 800e462:	f7f2 f839 	bl	80004d8 <__aeabi_dmul>
 800e466:	4606      	mov	r6, r0
 800e468:	460f      	mov	r7, r1
 800e46a:	4602      	mov	r2, r0
 800e46c:	460b      	mov	r3, r1
 800e46e:	4650      	mov	r0, sl
 800e470:	4621      	mov	r1, r4
 800e472:	f7f2 f831 	bl	80004d8 <__aeabi_dmul>
 800e476:	a33e      	add	r3, pc, #248	; (adr r3, 800e570 <__kernel_sin+0x138>)
 800e478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e47c:	4680      	mov	r8, r0
 800e47e:	4689      	mov	r9, r1
 800e480:	4630      	mov	r0, r6
 800e482:	4639      	mov	r1, r7
 800e484:	f7f2 f828 	bl	80004d8 <__aeabi_dmul>
 800e488:	a33b      	add	r3, pc, #236	; (adr r3, 800e578 <__kernel_sin+0x140>)
 800e48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48e:	f7f1 fe6b 	bl	8000168 <__aeabi_dsub>
 800e492:	4632      	mov	r2, r6
 800e494:	463b      	mov	r3, r7
 800e496:	f7f2 f81f 	bl	80004d8 <__aeabi_dmul>
 800e49a:	a339      	add	r3, pc, #228	; (adr r3, 800e580 <__kernel_sin+0x148>)
 800e49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a0:	f7f1 fe64 	bl	800016c <__adddf3>
 800e4a4:	4632      	mov	r2, r6
 800e4a6:	463b      	mov	r3, r7
 800e4a8:	f7f2 f816 	bl	80004d8 <__aeabi_dmul>
 800e4ac:	a336      	add	r3, pc, #216	; (adr r3, 800e588 <__kernel_sin+0x150>)
 800e4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b2:	f7f1 fe59 	bl	8000168 <__aeabi_dsub>
 800e4b6:	4632      	mov	r2, r6
 800e4b8:	463b      	mov	r3, r7
 800e4ba:	f7f2 f80d 	bl	80004d8 <__aeabi_dmul>
 800e4be:	a334      	add	r3, pc, #208	; (adr r3, 800e590 <__kernel_sin+0x158>)
 800e4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c4:	f7f1 fe52 	bl	800016c <__adddf3>
 800e4c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4cc:	b9dd      	cbnz	r5, 800e506 <__kernel_sin+0xce>
 800e4ce:	4602      	mov	r2, r0
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	4639      	mov	r1, r7
 800e4d6:	f7f1 ffff 	bl	80004d8 <__aeabi_dmul>
 800e4da:	a32f      	add	r3, pc, #188	; (adr r3, 800e598 <__kernel_sin+0x160>)
 800e4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e0:	f7f1 fe42 	bl	8000168 <__aeabi_dsub>
 800e4e4:	4642      	mov	r2, r8
 800e4e6:	464b      	mov	r3, r9
 800e4e8:	f7f1 fff6 	bl	80004d8 <__aeabi_dmul>
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	460b      	mov	r3, r1
 800e4f0:	4650      	mov	r0, sl
 800e4f2:	4621      	mov	r1, r4
 800e4f4:	f7f1 fe3a 	bl	800016c <__adddf3>
 800e4f8:	4682      	mov	sl, r0
 800e4fa:	460c      	mov	r4, r1
 800e4fc:	4650      	mov	r0, sl
 800e4fe:	4621      	mov	r1, r4
 800e500:	b006      	add	sp, #24
 800e502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e506:	2200      	movs	r2, #0
 800e508:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e50c:	4b24      	ldr	r3, [pc, #144]	; (800e5a0 <__kernel_sin+0x168>)
 800e50e:	f7f1 ffe3 	bl	80004d8 <__aeabi_dmul>
 800e512:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e516:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e51a:	4640      	mov	r0, r8
 800e51c:	4649      	mov	r1, r9
 800e51e:	f7f1 ffdb 	bl	80004d8 <__aeabi_dmul>
 800e522:	4602      	mov	r2, r0
 800e524:	460b      	mov	r3, r1
 800e526:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e52a:	f7f1 fe1d 	bl	8000168 <__aeabi_dsub>
 800e52e:	4632      	mov	r2, r6
 800e530:	463b      	mov	r3, r7
 800e532:	f7f1 ffd1 	bl	80004d8 <__aeabi_dmul>
 800e536:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e53a:	f7f1 fe15 	bl	8000168 <__aeabi_dsub>
 800e53e:	a316      	add	r3, pc, #88	; (adr r3, 800e598 <__kernel_sin+0x160>)
 800e540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e544:	4606      	mov	r6, r0
 800e546:	460f      	mov	r7, r1
 800e548:	4640      	mov	r0, r8
 800e54a:	4649      	mov	r1, r9
 800e54c:	f7f1 ffc4 	bl	80004d8 <__aeabi_dmul>
 800e550:	4602      	mov	r2, r0
 800e552:	460b      	mov	r3, r1
 800e554:	4630      	mov	r0, r6
 800e556:	4639      	mov	r1, r7
 800e558:	f7f1 fe08 	bl	800016c <__adddf3>
 800e55c:	4602      	mov	r2, r0
 800e55e:	460b      	mov	r3, r1
 800e560:	4650      	mov	r0, sl
 800e562:	4621      	mov	r1, r4
 800e564:	f7f1 fe00 	bl	8000168 <__aeabi_dsub>
 800e568:	e7c6      	b.n	800e4f8 <__kernel_sin+0xc0>
 800e56a:	bf00      	nop
 800e56c:	f3af 8000 	nop.w
 800e570:	5acfd57c 	.word	0x5acfd57c
 800e574:	3de5d93a 	.word	0x3de5d93a
 800e578:	8a2b9ceb 	.word	0x8a2b9ceb
 800e57c:	3e5ae5e6 	.word	0x3e5ae5e6
 800e580:	57b1fe7d 	.word	0x57b1fe7d
 800e584:	3ec71de3 	.word	0x3ec71de3
 800e588:	19c161d5 	.word	0x19c161d5
 800e58c:	3f2a01a0 	.word	0x3f2a01a0
 800e590:	1110f8a6 	.word	0x1110f8a6
 800e594:	3f811111 	.word	0x3f811111
 800e598:	55555549 	.word	0x55555549
 800e59c:	3fc55555 	.word	0x3fc55555
 800e5a0:	3fe00000 	.word	0x3fe00000

0800e5a4 <fabs>:
 800e5a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e5a8:	4619      	mov	r1, r3
 800e5aa:	4770      	bx	lr
 800e5ac:	0000      	movs	r0, r0
	...

0800e5b0 <floor>:
 800e5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5b4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800e5b8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800e5bc:	2e13      	cmp	r6, #19
 800e5be:	4607      	mov	r7, r0
 800e5c0:	460b      	mov	r3, r1
 800e5c2:	460c      	mov	r4, r1
 800e5c4:	4605      	mov	r5, r0
 800e5c6:	dc35      	bgt.n	800e634 <floor+0x84>
 800e5c8:	2e00      	cmp	r6, #0
 800e5ca:	da16      	bge.n	800e5fa <floor+0x4a>
 800e5cc:	a336      	add	r3, pc, #216	; (adr r3, 800e6a8 <floor+0xf8>)
 800e5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d2:	f7f1 fdcb 	bl	800016c <__adddf3>
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	2300      	movs	r3, #0
 800e5da:	f7f2 fa0d 	bl	80009f8 <__aeabi_dcmpgt>
 800e5de:	b148      	cbz	r0, 800e5f4 <floor+0x44>
 800e5e0:	2c00      	cmp	r4, #0
 800e5e2:	da5b      	bge.n	800e69c <floor+0xec>
 800e5e4:	2500      	movs	r5, #0
 800e5e6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e5ea:	4a31      	ldr	r2, [pc, #196]	; (800e6b0 <floor+0x100>)
 800e5ec:	433b      	orrs	r3, r7
 800e5ee:	42ab      	cmp	r3, r5
 800e5f0:	bf18      	it	ne
 800e5f2:	4614      	movne	r4, r2
 800e5f4:	4623      	mov	r3, r4
 800e5f6:	462f      	mov	r7, r5
 800e5f8:	e026      	b.n	800e648 <floor+0x98>
 800e5fa:	4a2e      	ldr	r2, [pc, #184]	; (800e6b4 <floor+0x104>)
 800e5fc:	fa42 f806 	asr.w	r8, r2, r6
 800e600:	ea01 0208 	and.w	r2, r1, r8
 800e604:	4302      	orrs	r2, r0
 800e606:	d01f      	beq.n	800e648 <floor+0x98>
 800e608:	a327      	add	r3, pc, #156	; (adr r3, 800e6a8 <floor+0xf8>)
 800e60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e60e:	f7f1 fdad 	bl	800016c <__adddf3>
 800e612:	2200      	movs	r2, #0
 800e614:	2300      	movs	r3, #0
 800e616:	f7f2 f9ef 	bl	80009f8 <__aeabi_dcmpgt>
 800e61a:	2800      	cmp	r0, #0
 800e61c:	d0ea      	beq.n	800e5f4 <floor+0x44>
 800e61e:	2c00      	cmp	r4, #0
 800e620:	bfbe      	ittt	lt
 800e622:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e626:	fa43 f606 	asrlt.w	r6, r3, r6
 800e62a:	19a4      	addlt	r4, r4, r6
 800e62c:	ea24 0408 	bic.w	r4, r4, r8
 800e630:	2500      	movs	r5, #0
 800e632:	e7df      	b.n	800e5f4 <floor+0x44>
 800e634:	2e33      	cmp	r6, #51	; 0x33
 800e636:	dd0b      	ble.n	800e650 <floor+0xa0>
 800e638:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e63c:	d104      	bne.n	800e648 <floor+0x98>
 800e63e:	4602      	mov	r2, r0
 800e640:	f7f1 fd94 	bl	800016c <__adddf3>
 800e644:	4607      	mov	r7, r0
 800e646:	460b      	mov	r3, r1
 800e648:	4638      	mov	r0, r7
 800e64a:	4619      	mov	r1, r3
 800e64c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e650:	f04f 32ff 	mov.w	r2, #4294967295
 800e654:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800e658:	fa22 f808 	lsr.w	r8, r2, r8
 800e65c:	ea18 0f00 	tst.w	r8, r0
 800e660:	d0f2      	beq.n	800e648 <floor+0x98>
 800e662:	a311      	add	r3, pc, #68	; (adr r3, 800e6a8 <floor+0xf8>)
 800e664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e668:	f7f1 fd80 	bl	800016c <__adddf3>
 800e66c:	2200      	movs	r2, #0
 800e66e:	2300      	movs	r3, #0
 800e670:	f7f2 f9c2 	bl	80009f8 <__aeabi_dcmpgt>
 800e674:	2800      	cmp	r0, #0
 800e676:	d0bd      	beq.n	800e5f4 <floor+0x44>
 800e678:	2c00      	cmp	r4, #0
 800e67a:	da02      	bge.n	800e682 <floor+0xd2>
 800e67c:	2e14      	cmp	r6, #20
 800e67e:	d103      	bne.n	800e688 <floor+0xd8>
 800e680:	3401      	adds	r4, #1
 800e682:	ea25 0508 	bic.w	r5, r5, r8
 800e686:	e7b5      	b.n	800e5f4 <floor+0x44>
 800e688:	2301      	movs	r3, #1
 800e68a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e68e:	fa03 f606 	lsl.w	r6, r3, r6
 800e692:	4435      	add	r5, r6
 800e694:	42bd      	cmp	r5, r7
 800e696:	bf38      	it	cc
 800e698:	18e4      	addcc	r4, r4, r3
 800e69a:	e7f2      	b.n	800e682 <floor+0xd2>
 800e69c:	2500      	movs	r5, #0
 800e69e:	462c      	mov	r4, r5
 800e6a0:	e7a8      	b.n	800e5f4 <floor+0x44>
 800e6a2:	bf00      	nop
 800e6a4:	f3af 8000 	nop.w
 800e6a8:	8800759c 	.word	0x8800759c
 800e6ac:	7e37e43c 	.word	0x7e37e43c
 800e6b0:	bff00000 	.word	0xbff00000
 800e6b4:	000fffff 	.word	0x000fffff

0800e6b8 <matherr>:
 800e6b8:	2000      	movs	r0, #0
 800e6ba:	4770      	bx	lr
 800e6bc:	0000      	movs	r0, r0
	...

0800e6c0 <scalbn>:
 800e6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6c2:	4616      	mov	r6, r2
 800e6c4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e6c8:	4604      	mov	r4, r0
 800e6ca:	460d      	mov	r5, r1
 800e6cc:	460b      	mov	r3, r1
 800e6ce:	b982      	cbnz	r2, 800e6f2 <scalbn+0x32>
 800e6d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e6d4:	4303      	orrs	r3, r0
 800e6d6:	d034      	beq.n	800e742 <scalbn+0x82>
 800e6d8:	4b2d      	ldr	r3, [pc, #180]	; (800e790 <scalbn+0xd0>)
 800e6da:	2200      	movs	r2, #0
 800e6dc:	f7f1 fefc 	bl	80004d8 <__aeabi_dmul>
 800e6e0:	4b2c      	ldr	r3, [pc, #176]	; (800e794 <scalbn+0xd4>)
 800e6e2:	4604      	mov	r4, r0
 800e6e4:	429e      	cmp	r6, r3
 800e6e6:	460d      	mov	r5, r1
 800e6e8:	da0d      	bge.n	800e706 <scalbn+0x46>
 800e6ea:	a325      	add	r3, pc, #148	; (adr r3, 800e780 <scalbn+0xc0>)
 800e6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f0:	e01c      	b.n	800e72c <scalbn+0x6c>
 800e6f2:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800e6f6:	42ba      	cmp	r2, r7
 800e6f8:	d109      	bne.n	800e70e <scalbn+0x4e>
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	f7f1 fd36 	bl	800016c <__adddf3>
 800e700:	4604      	mov	r4, r0
 800e702:	460d      	mov	r5, r1
 800e704:	e01d      	b.n	800e742 <scalbn+0x82>
 800e706:	460b      	mov	r3, r1
 800e708:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e70c:	3a36      	subs	r2, #54	; 0x36
 800e70e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e712:	4432      	add	r2, r6
 800e714:	428a      	cmp	r2, r1
 800e716:	dd0c      	ble.n	800e732 <scalbn+0x72>
 800e718:	4622      	mov	r2, r4
 800e71a:	462b      	mov	r3, r5
 800e71c:	a11a      	add	r1, pc, #104	; (adr r1, 800e788 <scalbn+0xc8>)
 800e71e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e722:	f000 f83b 	bl	800e79c <copysign>
 800e726:	a318      	add	r3, pc, #96	; (adr r3, 800e788 <scalbn+0xc8>)
 800e728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e72c:	f7f1 fed4 	bl	80004d8 <__aeabi_dmul>
 800e730:	e7e6      	b.n	800e700 <scalbn+0x40>
 800e732:	2a00      	cmp	r2, #0
 800e734:	dd08      	ble.n	800e748 <scalbn+0x88>
 800e736:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e73a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e73e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e742:	4620      	mov	r0, r4
 800e744:	4629      	mov	r1, r5
 800e746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e748:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e74c:	da0b      	bge.n	800e766 <scalbn+0xa6>
 800e74e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e752:	429e      	cmp	r6, r3
 800e754:	4622      	mov	r2, r4
 800e756:	462b      	mov	r3, r5
 800e758:	dce0      	bgt.n	800e71c <scalbn+0x5c>
 800e75a:	a109      	add	r1, pc, #36	; (adr r1, 800e780 <scalbn+0xc0>)
 800e75c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e760:	f000 f81c 	bl	800e79c <copysign>
 800e764:	e7c1      	b.n	800e6ea <scalbn+0x2a>
 800e766:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e76a:	3236      	adds	r2, #54	; 0x36
 800e76c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e770:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e774:	4620      	mov	r0, r4
 800e776:	4629      	mov	r1, r5
 800e778:	2200      	movs	r2, #0
 800e77a:	4b07      	ldr	r3, [pc, #28]	; (800e798 <scalbn+0xd8>)
 800e77c:	e7d6      	b.n	800e72c <scalbn+0x6c>
 800e77e:	bf00      	nop
 800e780:	c2f8f359 	.word	0xc2f8f359
 800e784:	01a56e1f 	.word	0x01a56e1f
 800e788:	8800759c 	.word	0x8800759c
 800e78c:	7e37e43c 	.word	0x7e37e43c
 800e790:	43500000 	.word	0x43500000
 800e794:	ffff3cb0 	.word	0xffff3cb0
 800e798:	3c900000 	.word	0x3c900000

0800e79c <copysign>:
 800e79c:	b530      	push	{r4, r5, lr}
 800e79e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800e7a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e7a6:	ea42 0503 	orr.w	r5, r2, r3
 800e7aa:	4629      	mov	r1, r5
 800e7ac:	bd30      	pop	{r4, r5, pc}
	...

0800e7b0 <_init>:
 800e7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7b2:	bf00      	nop
 800e7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7b6:	bc08      	pop	{r3}
 800e7b8:	469e      	mov	lr, r3
 800e7ba:	4770      	bx	lr

0800e7bc <_fini>:
 800e7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7be:	bf00      	nop
 800e7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7c2:	bc08      	pop	{r3}
 800e7c4:	469e      	mov	lr, r3
 800e7c6:	4770      	bx	lr
